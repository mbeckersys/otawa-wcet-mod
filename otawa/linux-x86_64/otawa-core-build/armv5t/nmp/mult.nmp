//
// GLISS V2 -- ARM multiplication instructions
// Copyright (c) 2010, IRIT - UPS <casse@irit.fr>
//
// This file is part of GLISS2.
//
// GLISS2 is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// GLISS2 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GLISS2; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

macro UGet_ARM_GPR(r) = coerce(u32, Get_ARM_GPR(r))

op MLA(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, rs : REG_INDEX, rm : REG_INDEX)
	syntax = format("mla%s%s %s, %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rm.syntax, rs.syntax, rn.syntax)
	image = format("%s0000001%s%s%s%s1001%s", cond.image,sets.image, rd.image, rn.image, rs.image, rm.image)
	action = {
		if (cond) then
			sets.action;
			TMP_REG1 = Get_ARM_GPR(rm);
			TMP_REG2 = Get_ARM_GPR(rs);
			TMP_REG4 = Get_ARM_GPR(rn);
			TMP_DOUBLE = TMP_REG1 * TMP_REG2 + TMP_REG4;
			TMP_REG4 = TMP_DOUBLE<31..0>;
			Set_ARM_GPR(rd,TMP_REG4);
			TMP_REG3 = Get_ARM_GPR(rd);
			if SBIT == 1 then
				NFLAG = TMP_REG3<31..31>;
				if TMP_REG3 == 0 then
					ZFLAG = 1;
				else
					ZFLAG = 0;
				endif;
			endif;
		endif;
	}
op MUL(cond: condition, sets: setS, rd: REG_INDEX, rs: REG_INDEX, rm: REG_INDEX)
	syntax = format("mul%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rm.syntax, rs.syntax)
	image = format("%s0000000%s%s0000%s1001%s", cond.image,sets.image, rd.image, rs.image, rm.image)
	action = {
			if (cond) then
				sets.action;
				TMP_REG1 = Get_ARM_GPR(rm);
				TMP_REG2 = Get_ARM_GPR(rs);
				TMP_DOUBLE = TMP_REG1 * TMP_REG2;
				TMP_REG4 = TMP_DOUBLE<31..0>;
				Set_ARM_GPR(rd,TMP_REG4);
				TMP_REG3 = Get_ARM_GPR(rd);
				if SBIT == 1 then
					NFLAG = TMP_REG3<31..31>;
					if SBIT == 1 then
						NFLAG = TMP_REG3<31..31>;
						if TMP_REG3 == 0 then
							ZFLAG = 1;
						else
							ZFLAG = 0;
						endif;
					endif;
				endif;
			endif;
	}

op SMULL(cond: condition, sets: setS, rdhi: REG_INDEX, rdlo: REG_INDEX, rs: REG_INDEX, rm: REG_INDEX)
	syntax = format("smull%s%s %s,%s,%s,%s",cond.syntax,sets.syntax,rdlo.syntax,rdhi.syntax,rm.syntax,rs.syntax)
	image = format("%s0000110%s%s%s%s1001%s",cond.image,sets.image,rdhi.image,rdlo.image,rs.image,rm.image)
	action = { 
		if (cond) then
			sets.action;
			TMP_REG1 = Get_ARM_GPR(rm);
			TMP_REG2 = Get_ARM_GPR(rs);
			TMP_DWORD = coerce(s64, TMP_REG1) * coerce(s64, TMP_REG2);
			TMP_REG3 = TMP_DWORD<31..0>;
			Set_ARM_GPR(rdlo,TMP_REG3);
			TMP_REG4 = TMP_DWORD<63..32>;
			Set_ARM_GPR(rdhi,TMP_REG4);
			if (SBIT == 1) then
				NFLAG = TMP_REG4<31..31>;
				if (TMP_REG4 == 0) then
					if (TMP_REG3 == 0) then
						ZFLAG = 1;
					else 
						ZFLAG = 0;
					endif;
				else
					ZFLAG = 0;
				endif;
			endif;
		endif;
	}

op UMULL(cond : condition, sets : setS, rdhi : REG_INDEX, rdlo : REG_INDEX,rs : REG_INDEX, rm : REG_INDEX)
	syntax = format("umull%s%s %s,%s,%s,%s",cond.syntax,sets.syntax,rdlo.syntax,rdhi.syntax,rm.syntax,rs.syntax)
	image = format("%s0000100%s%s%s%s1001%s",cond.image,sets.image,rdhi.image,rdlo.image,rs.image,rm.image)
	action = {
		if (cond) then
			sets.action;
			TMP64_UREG1 = UGet_ARM_GPR(rm);
			TMP64_UREG2 = UGet_ARM_GPR(rs);
			TMP_UDWORD = TMP64_UREG1 * TMP64_UREG2;
			TMP_UREG3 = TMP_UDWORD<31..0>;
			Set_ARM_GPR(rdlo,TMP_UREG3);
			TMP_UREG4 = TMP_UDWORD<63..32>;
			Set_ARM_GPR(rdhi,TMP_UREG4);
			if (SBIT == 1) then
				NFLAG = TMP_UREG4<31..31>;
				if (TMP_UREG4 == 0) then
					if (TMP_UREG3 == 0) then
						ZFLAG = 1;
					else 
						ZFLAG = 0;
					endif;
				else
					ZFLAG = 0;
				endif;
			endif;
		endif;
	}

op SMLAL(cond : condition, sets : setS, rdhi : REG_INDEX, rdlo : REG_INDEX,rs : REG_INDEX, rm : REG_INDEX)
	syntax = format("smlal%s%s %s,%s,%s,%s",cond.syntax,sets.syntax,rdlo.syntax,rdhi.syntax,rm.syntax,rs.syntax)
	image = format("%s0000111%s%s%s%s1001%s",cond.image,sets.image,rdhi.image,rdlo.image,rs.image,rm.image)
   action = {
		if (cond) then
			sets.action;
			TMP_REG1 = Get_ARM_GPR(rm);
			TMP_REG2 = Get_ARM_GPR(rs);
			TMP_REG3 = Get_ARM_GPR(rdhi);
			TMP_REG4 = Get_ARM_GPR(rdlo);
			TMP_DWORD = coerce(s64,TMP_REG1) * coerce(s64,TMP_REG2);
			TMP_REG6  = coerce(s32,TMP_DWORD<31..0>) + coerce (s32,TMP_REG4);
			Set_ARM_GPR(rdlo,TMP_REG6);
			TMP_SWORD = TMP_DWORD<31..0>;
			TMP_REG5  = coerce(s32,TMP_DWORD<63..32>) + coerce(s32,TMP_REG3) + CarryFromAdd(TMP_SWORD,TMP_REG4,TMP_REG6);
			Set_ARM_GPR(rdhi,TMP_REG5);
			if (SBIT == 1) then
				NFLAG = TMP_REG5<31..31>;
				if (TMP_REG5 == 0) then
					if (TMP_REG6 == 0) then
						ZFLAG = 1;
					else 
						ZFLAG = 0;
					endif;
				else
					ZFLAG = 0;
				endif;
			endif;
		endif;
	}

op UMLAL(cond : condition, sets : setS, rdhi : REG_INDEX, rdlo : REG_INDEX,rs : REG_INDEX, rm : REG_INDEX)
	syntax = format("umlal%s%s %s,%s,%s,%s",cond.syntax,sets.syntax,rdlo.syntax,rdhi.syntax,rm.syntax,rs.syntax)
	
	image = format("%s0000101%s%s%s%s1001%s",cond.image,sets.image,rdhi.image,rdlo.image,rs.image,rm.image)

	action = {
		if (cond) then
			sets.action;
			TMP64_UREG1 = UGet_ARM_GPR(rm);
			TMP64_UREG2 = UGet_ARM_GPR(rs);
			TMP_UREG3 = UGet_ARM_GPR(rdhi);
			TMP_UREG4 = UGet_ARM_GPR(rdlo);
			TMP_UDWORD = TMP64_UREG1 * TMP64_UREG2;
			TMP_UREG6  = TMP_UDWORD<31..0>+TMP_UREG4;
			Set_ARM_GPR(rdlo,TMP_UREG6);
			TMP_SWORD = TMP_UDWORD<31..0>;
			TMP_UREG5  = TMP_UDWORD<63..32> + TMP_UREG3 + CarryFromAdd(TMP_SWORD,TMP_UREG4,TMP_UREG6);
			Set_ARM_GPR(rdhi,TMP_UREG5);
			if (SBIT == 1) then
				NFLAG = TMP_UREG5<31..31>;
				if (TMP_UREG5 == 0) then
					if (TMP_UREG6 == 0) then
						ZFLAG = 1;
					else 
						ZFLAG = 0;
					endif;
				else
					ZFLAG = 0;
				endif;
			endif;
		endif;
	}

