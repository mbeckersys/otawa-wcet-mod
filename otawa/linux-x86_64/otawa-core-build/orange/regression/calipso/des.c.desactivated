
int working_memcmp(char  const *a, char  const *b, int n)
{
	char __tmp_0__ = 0;
	int __return__;
# 134 "originaux/des.c"
	printf("working_memcmp deb\n");
# 135 "originaux/des.c"
	for(; !__tmp_0__ && n; __tmp_0__ || (n--, a++, b++))
	{
# 136 "originaux/des.c"
		if(*a != *b)
		{
# 137 "originaux/des.c"
			__return__ = (int)((*(int*)a)) - (int)((*(int*)b));
			__tmp_0__ = 1 != 0;
		}
	}
	if(!__tmp_0__)
	{
# 137 "originaux/des.c"
		printf("boucle for 1 %d\n", n);
# 137 "originaux/des.c"
		printf("working_memcmp fin\n");
	}
# 138 "originaux/des.c"
	if(!__tmp_0__)
		__return__ = 0;
	__tmp_0__ = 0;
	return __return__;
}

typedef struct _des_ctx {
	int encrypt_subkeys[32];
	int decrypt_subkeys[32];
} des_ctx[1];

typedef struct _tripledes_ctx {
	int encrypt_subkeys[96];
	int decrypt_subkeys[96];
} tripledes_ctx[1];

static char  const *selftest_failed;
static void des_key_schedule(int  const *, int *);
static int des_setkey(struct _des_ctx *, int  const *);
static int des_ecb_crypt(struct _des_ctx *, int  const *, int *, int );
static int tripledes_set2keys(struct _tripledes_ctx *, int  const *, int
	 const *);
static int tripledes_set3keys(struct _tripledes_ctx *, int  const *, int
	 const *, int  const *);
static int tripledes_ecb_crypt(struct _tripledes_ctx *, int  const *, int *, int
	);
static int is_weak_key(int  const *key);
static char  const *selftest(void );
static int sbox1[64] = {0x01010400, 0x00000000, 0x00010000, 0x01010404,
	0x01010004, 0x00010404, 0x00000004, 0x00010000, 0x00000400, 0x01010400,
	0x01010404, 0x00000400, 0x01000404, 0x01010004, 0x01000000, 0x00000004,
	0x00000404, 0x01000400, 0x01000400, 0x00010400, 0x00010400, 0x01010000,
	0x01010000, 0x01000404, 0x00010004, 0x01000004, 0x01000004, 0x00010004,
	0x00000000, 0x00000404, 0x00010404, 0x01000000, 0x00010000, 0x01010404,
	0x00000004, 0x01010000, 0x01010400, 0x01000000, 0x01000000, 0x00000400,
	0x01010004, 0x00010000, 0x00010400, 0x01000004, 0x00000400, 0x00000004,
	0x01000404, 0x00010404, 0x01010404, 0x00010004, 0x01010000, 0x01000404,
	0x01000004, 0x00000404, 0x00010404, 0x01010400, 0x00000404, 0x01000400,
	0x01000400, 0x00000000, 0x00010004, 0x00010400, 0x00000000, 0x01010004};
static int sbox2[64] = {0x80108020, 0x80008000, 0x00008000, 0x00108020,
	0x00100000, 0x00000020, 0x80100020, 0x80008020, 0x80000020, 0x80108020,
	0x80108000, 0x80000000, 0x80008000, 0x00100000, 0x00000020, 0x80100020,
	0x00108000, 0x00100020, 0x80008020, 0x00000000, 0x80000000, 0x00008000,
	0x00108020, 0x80100000, 0x00100020, 0x80000020, 0x00000000, 0x00108000,
	0x00008020, 0x80108000, 0x80100000, 0x00008020, 0x00000000, 0x00108020,
	0x80100020, 0x00100000, 0x80008020, 0x80100000, 0x80108000, 0x00008000,
	0x80100000, 0x80008000, 0x00000020, 0x80108020, 0x00108020, 0x00000020,
	0x00008000, 0x80000000, 0x00008020, 0x80108000, 0x00100000, 0x80000020,
	0x00100020, 0x80008020, 0x80000020, 0x00100020, 0x00108000, 0x00000000,
	0x80008000, 0x00008020, 0x80000000, 0x80100020, 0x80108020, 0x00108000};
static int sbox3[64] = {0x00000208, 0x08020200, 0x00000000, 0x08020008,
	0x08000200, 0x00000000, 0x00020208, 0x08000200, 0x00020008, 0x08000008,
	0x08000008, 0x00020000, 0x08020208, 0x00020008, 0x08020000, 0x00000208,
	0x08000000, 0x00000008, 0x08020200, 0x00000200, 0x00020200, 0x08020000,
	0x08020008, 0x00020208, 0x08000208, 0x00020200, 0x00020000, 0x08000208,
	0x00000008, 0x08020208, 0x00000200, 0x08000000, 0x08020200, 0x08000000,
	0x00020008, 0x00000208, 0x00020000, 0x08020200, 0x08000200, 0x00000000,
	0x00000200, 0x00020008, 0x08020208, 0x08000200, 0x08000008, 0x00000200,
	0x00000000, 0x08020008, 0x08000208, 0x00020000, 0x08000000, 0x08020208,
	0x00000008, 0x00020208, 0x00020200, 0x08000008, 0x08020000, 0x08000208,
	0x00000208, 0x08020000, 0x00020208, 0x00000008, 0x08020008, 0x00020200};
static int sbox4[64] = {0x00802001, 0x00002081, 0x00002081, 0x00000080,
	0x00802080, 0x00800081, 0x00800001, 0x00002001, 0x00000000, 0x00802000,
	0x00802000, 0x00802081, 0x00000081, 0x00000000, 0x00800080, 0x00800001,
	0x00000001, 0x00002000, 0x00800000, 0x00802001, 0x00000080, 0x00800000,
	0x00002001, 0x00002080, 0x00800081, 0x00000001, 0x00002080, 0x00800080,
	0x00002000, 0x00802080, 0x00802081, 0x00000081, 0x00800080, 0x00800001,
	0x00802000, 0x00802081, 0x00000081, 0x00000000, 0x00000000, 0x00802000,
	0x00002080, 0x00800080, 0x00800081, 0x00000001, 0x00802001, 0x00002081,
	0x00002081, 0x00000080, 0x00802081, 0x00000081, 0x00000001, 0x00002000,
	0x00800001, 0x00002001, 0x00802080, 0x00800081, 0x00002001, 0x00002080,
	0x00800000, 0x00802001, 0x00000080, 0x00800000, 0x00002000, 0x00802080};
static int sbox5[64] = {0x00000100, 0x02080100, 0x02080000, 0x42000100,
	0x00080000, 0x00000100, 0x40000000, 0x02080000, 0x40080100, 0x00080000,
	0x02000100, 0x40080100, 0x42000100, 0x42080000, 0x00080100, 0x40000000,
	0x02000000, 0x40080000, 0x40080000, 0x00000000, 0x40000100, 0x42080100,
	0x42080100, 0x02000100, 0x42080000, 0x40000100, 0x00000000, 0x42000000,
	0x02080100, 0x02000000, 0x42000000, 0x00080100, 0x00080000, 0x42000100,
	0x00000100, 0x02000000, 0x40000000, 0x02080000, 0x42000100, 0x40080100,
	0x02000100, 0x40000000, 0x42080000, 0x02080100, 0x40080100, 0x00000100,
	0x02000000, 0x42080000, 0x42080100, 0x00080100, 0x42000000, 0x42080100,
	0x02080000, 0x00000000, 0x40080000, 0x42000000, 0x00080100, 0x02000100,
	0x40000100, 0x00080000, 0x00000000, 0x40080000, 0x02080100, 0x40000100};
static int sbox6[64] = {0x20000010, 0x20400000, 0x00004000, 0x20404010,
	0x20400000, 0x00000010, 0x20404010, 0x00400000, 0x20004000, 0x00404010,
	0x00400000, 0x20000010, 0x00400010, 0x20004000, 0x20000000, 0x00004010,
	0x00000000, 0x00400010, 0x20004010, 0x00004000, 0x00404000, 0x20004010,
	0x00000010, 0x20400010, 0x20400010, 0x00000000, 0x00404010, 0x20404000,
	0x00004010, 0x00404000, 0x20404000, 0x20000000, 0x20004000, 0x00000010,
	0x20400010, 0x00404000, 0x20404010, 0x00400000, 0x00004010, 0x20000010,
	0x00400000, 0x20004000, 0x20000000, 0x00004010, 0x20000010, 0x20404010,
	0x00404000, 0x20400000, 0x00404010, 0x20404000, 0x00000000, 0x20400010,
	0x00000010, 0x00004000, 0x20400000, 0x00404010, 0x00004000, 0x00400010,
	0x20004010, 0x00000000, 0x20404000, 0x20000000, 0x00400010, 0x20004010};
static int sbox7[64] = {0x00200000, 0x04200002, 0x04000802, 0x00000000,
	0x00000800, 0x04000802, 0x00200802, 0x04200800, 0x04200802, 0x00200000,
	0x00000000, 0x04000002, 0x00000002, 0x04000000, 0x04200002, 0x00000802,
	0x04000800, 0x00200802, 0x00200002, 0x04000800, 0x04000002, 0x04200000,
	0x04200800, 0x00200002, 0x04200000, 0x00000800, 0x00000802, 0x04200802,
	0x00200800, 0x00000002, 0x04000000, 0x00200800, 0x04000000, 0x00200800,
	0x00200000, 0x04000802, 0x04000802, 0x04200002, 0x04200002, 0x00000002,
	0x00200002, 0x04000000, 0x04000800, 0x00200000, 0x04200800, 0x00000802,
	0x00200802, 0x04200800, 0x00000802, 0x04000002, 0x04200802, 0x04200000,
	0x00200800, 0x00000000, 0x00000002, 0x04200802, 0x00000000, 0x00200802,
	0x04200000, 0x00000800, 0x04000002, 0x04000800, 0x00000800, 0x00200002};
static int sbox8[64] = {0x10001040, 0x00001000, 0x00040000, 0x10041040,
	0x10000000, 0x10001040, 0x00000040, 0x10000000, 0x00040040, 0x10040000,
	0x10041040, 0x00041000, 0x10041000, 0x00041040, 0x00001000, 0x00000040,
	0x10040000, 0x10000040, 0x10001000, 0x00001040, 0x00041000, 0x00040040,
	0x10040040, 0x10041000, 0x00001040, 0x00000000, 0x00000000, 0x10040040,
	0x10000040, 0x10001000, 0x00041040, 0x00040000, 0x00041040, 0x00040000,
	0x10041000, 0x00001000, 0x00000040, 0x10040040, 0x00001000, 0x00041040,
	0x10001000, 0x00000040, 0x10000040, 0x10040000, 0x10040040, 0x10000000,
	0x00040000, 0x10001040, 0x00000000, 0x10041040, 0x00040040, 0x10000040,
	0x10040000, 0x10001000, 0x10001040, 0x00000000, 0x10041040, 0x00041000,
	0x00041000, 0x00001040, 0x00001040, 0x00040040, 0x10000000, 0x10041000};
int leftkey_swap[16] = {0x00000000, 0x00000001, 0x00000100, 0x00000101,
	0x00010000, 0x00010001, 0x00010100, 0x00010101, 0x01000000, 0x01000001,
	0x01000100, 0x01000101, 0x01010000, 0x01010001, 0x01010100, 0x01010101};
int rightkey_swap[16] = {0x00000000, 0x01000000, 0x00010000, 0x01010000,
	0x00000100, 0x01000100, 0x00010100, 0x01010100, 0x00000001, 0x01000001,
	0x00010001, 0x01010001, 0x00000101, 0x01000101, 0x00010101, 0x01010101};
static int encrypt_rotate_tab[16] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 1};
static int weak_keys[64][8] = {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{0x00, 0x00, 0x1e, 0x1e, 0x00, 0x00, 0x0e, 0x0e}, {0x00, 0x00, 0xe0,
	0xe0, 0x00, 0x00, 0xf0, 0xf0}, {0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00,
	0xfe, 0xfe}, {0x00, 0x1e, 0x00, 0x1e, 0x00, 0x0e, 0x00, 0x0e}, {0x00,
	0x1e, 0x1e, 0x00, 0x00, 0x0e, 0x0e, 0x00}, {0x00, 0x1e, 0xe0, 0xfe,
	0x00, 0x0e, 0xf0, 0xfe}, {0x00, 0x1e, 0xfe, 0xe0, 0x00, 0x0e, 0xfe,
	0xf0}, {0x00, 0xe0, 0x00, 0xe0, 0x00, 0xf0, 0x00, 0xf0}, {0x00, 0xe0,
	0x1e, 0xfe, 0x00, 0xf0, 0x0e, 0xfe}, {0x00, 0xe0, 0xe0, 0x00, 0x00,
	0xf0, 0xf0, 0x00}, {0x00, 0xe0, 0xfe, 0x1e, 0x00, 0xf0, 0xfe, 0x0e},
	{0x00, 0xfe, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0xfe}, {0x00, 0xfe, 0x1e,
	0xe0, 0x00, 0xfe, 0x0e, 0xf0}, {0x00, 0xfe, 0xe0, 0x1e, 0x00, 0xfe,
	0xf0, 0x0e}, {0x00, 0xfe, 0xfe, 0x00, 0x00, 0xfe, 0xfe, 0x00}, {0x0e,
	0x0e, 0x0e, 0x0e, 0xf0, 0xf0, 0xf0, 0xf0}, {0x1e, 0x00, 0x00, 0x1e,
	0x0e, 0x00, 0x00, 0x0e}, {0x1e, 0x00, 0x1e, 0x00, 0x0e, 0x00, 0x0e,
	0x00}, {0x1e, 0x00, 0xe0, 0xfe, 0x0e, 0x00, 0xf0, 0xfe}, {0x1e, 0x00,
	0xfe, 0xe0, 0x0e, 0x00, 0xfe, 0xf0}, {0x1e, 0x1e, 0x00, 0x00, 0x0e,
	0x0e, 0x00, 0x00}, {0x1e, 0x1e, 0x1e, 0x1e, 0x0e, 0x0e, 0x0e, 0x0e},
	{0x1e, 0x1e, 0xe0, 0xe0, 0x0e, 0x0e, 0xf0, 0xf0}, {0x1e, 0x1e, 0xfe,
	0xfe, 0x0e, 0x0e, 0xfe, 0xfe}, {0x1e, 0xe0, 0x00, 0xfe, 0x0e, 0xf0,
	0x00, 0xfe}, {0x1e, 0xe0, 0x1e, 0xe0, 0x0e, 0xf0, 0x0e, 0xf0}, {0x1e,
	0xe0, 0xe0, 0x1e, 0x0e, 0xf0, 0xf0, 0x0e}, {0x1e, 0xe0, 0xfe, 0x00,
	0x0e, 0xf0, 0xfe, 0x00}, {0x1e, 0xfe, 0x00, 0xe0, 0x0e, 0xfe, 0x00,
	0xf0}, {0x1e, 0xfe, 0x1e, 0xfe, 0x0e, 0xfe, 0x0e, 0xfe}, {0x1e, 0xfe,
	0xe0, 0x00, 0x0e, 0xfe, 0xf0, 0x00}, {0x1e, 0xfe, 0xfe, 0x1e, 0x0e,
	0xfe, 0xfe, 0x0e}, {0xe0, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0xf0},
	{0xe0, 0x00, 0x1e, 0xfe, 0xf0, 0x00, 0x0e, 0xfe}, {0xe0, 0x00, 0xe0,
	0x00, 0xf0, 0x00, 0xf0, 0x00}, {0xe0, 0x00, 0xfe, 0x1e, 0xf0, 0x00,
	0xfe, 0x0e}, {0xe0, 0x1e, 0x00, 0xfe, 0xf0, 0x0e, 0x00, 0xfe}, {0xe0,
	0x1e, 0x1e, 0xe0, 0xf0, 0x0e, 0x0e, 0xf0}, {0xe0, 0x1e, 0xe0, 0x1e,
	0xf0, 0x0e, 0xf0, 0x0e}, {0xe0, 0x1e, 0xfe, 0x00, 0xf0, 0x0e, 0xfe,
	0x00}, {0xe0, 0xe0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00}, {0xe0, 0xe0,
	0x1e, 0x1e, 0xf0, 0xf0, 0x0e, 0x0e}, {0xe0, 0xe0, 0xfe, 0xfe, 0xf0,
	0xf0, 0xfe, 0xfe}, {0xe0, 0xfe, 0x00, 0x1e, 0xf0, 0xfe, 0x00, 0x0e},
	{0xe0, 0xfe, 0x1e, 0x00, 0xf0, 0xfe, 0x0e, 0x00}, {0xe0, 0xfe, 0xe0,
	0xfe, 0xf0, 0xfe, 0xf0, 0xfe}, {0xe0, 0xfe, 0xfe, 0xe0, 0xf0, 0xfe,
	0xfe, 0xf0}, {0xfe, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0xfe}, {0xfe,
	0x00, 0x1e, 0xe0, 0xfe, 0x00, 0x0e, 0xf0}, {0xfe, 0x00, 0xe0, 0x1e,
	0xfe, 0x00, 0xf0, 0x0e}, {0xfe, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0xfe,
	0x00}, {0xfe, 0x1e, 0x00, 0xe0, 0xfe, 0x0e, 0x00, 0xf0}, {0xfe, 0x1e,
	0x1e, 0xfe, 0xfe, 0x0e, 0x0e, 0xfe}, {0xfe, 0x1e, 0xe0, 0x00, 0xfe,
	0x0e, 0xf0, 0x00}, {0xfe, 0x1e, 0xfe, 0x1e, 0xfe, 0x0e, 0xfe, 0x0e},
	{0xfe, 0xe0, 0x00, 0x1e, 0xfe, 0xf0, 0x00, 0x0e}, {0xfe, 0xe0, 0x1e,
	0x00, 0xfe, 0xf0, 0x0e, 0x00}, {0xfe, 0xe0, 0xe0, 0xfe, 0xfe, 0xf0,
	0xf0, 0xfe}, {0xfe, 0xe0, 0xfe, 0xe0, 0xfe, 0xf0, 0xfe, 0xf0}, {0xfe,
	0xfe, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00}, {0xfe, 0xfe, 0x1e, 0x1e,
	0xfe, 0xfe, 0x0e, 0x0e}, {0xfe, 0xfe, 0xe0, 0xe0, 0xfe, 0xfe, 0xf0,
	0xf0}, {0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe}};

static void des_key_schedule(int  const *rawkey, int *subkey)
{
	int left, right, work;
	int round;
# 474 "originaux/des.c"
	printf("des_key_schedule deb\n");
# 476 "originaux/des.c"
	left = rawkey[0] << 24 | rawkey[1] << 16 | rawkey[2] << 8 | rawkey[3];
# 476 "originaux/des.c"
	right = rawkey[4] << 24 | rawkey[5] << 16 | rawkey[6] << 8 | rawkey[7];
# 478 "originaux/des.c"
	work = ((right >> 4 ^ left)) & 0x0f0f0f0f;
# 478 "originaux/des.c"
	left ^= work;
# 478 "originaux/des.c"
	right ^= work << 4;
# 479 "originaux/des.c"
	work = ((right >> 0 ^ left)) & 0x10101010;
# 479 "originaux/des.c"
	left ^= work;
# 479 "originaux/des.c"
	right ^= work << 0;
# 484 "originaux/des.c"
	left = leftkey_swap[left >> 0 & 0xf] << 3 | leftkey_swap[left >> 8 &
		0xf] << 2 | leftkey_swap[left >> 16 & 0xf] << 1 |
		leftkey_swap[left >> 24 & 0xf] | leftkey_swap[left >> 5 & 0xf]
		<< 7 | leftkey_swap[left >> 13 & 0xf] << 6 | leftkey_swap[left
		>> 21 & 0xf] << 5 | leftkey_swap[left >> 29 & 0xf] << 4;
# 486 "originaux/des.c"
	left &= 0x0fffffff;
# 491 "originaux/des.c"
	right = rightkey_swap[right >> 1 & 0xf] << 3 | rightkey_swap[right >> 9
		& 0xf] << 2 | rightkey_swap[right >> 17 & 0xf] << 1 |
		rightkey_swap[right >> 25 & 0xf] | rightkey_swap[right >> 4 &
		0xf] << 7 | rightkey_swap[right >> 12 & 0xf] << 6 |
		rightkey_swap[right >> 20 & 0xf] << 5 | rightkey_swap[right >>
		28 & 0xf] << 4;
# 493 "originaux/des.c"
	right &= 0x0fffffff;
# 495 "originaux/des.c"
	for(round = 0; round < 16; ++round)
# 496 "originaux/des.c"
	{
# 497 "originaux/des.c"
		left = ((left << encrypt_rotate_tab[round] | left >> 28 -
			encrypt_rotate_tab[round])) & 0x0fffffff;
# 498 "originaux/des.c"
		right = ((right << encrypt_rotate_tab[round] | right >> 28 -
			encrypt_rotate_tab[round])) & 0x0fffffff;
# 521 "originaux/des.c"
		*subkey++ = left << 4 & 0x24000000 | left << 28 & 0x10000000 |
			left << 14 & 0x08000000 | left << 18 & 0x02080000 | left
			<< 6 & 0x01000000 | left << 9 & 0x00200000 | left >> 1 &
			0x00100000 | left << 10 & 0x00040000 | left << 2 &
			0x00020000 | left >> 10 & 0x00010000 | right >> 13 &
			0x00002000 | right >> 4 & 0x00001000 | right << 6 &
			0x00000800 | right >> 1 & 0x00000400 | right >> 14 &
			0x00000200 | right & 0x00000100 | right >> 5 &
			0x00000020 | right >> 10 & 0x00000010 | right >> 3 &
			0x00000008 | right >> 18 & 0x00000004 | right >> 26 &
			0x00000002 | right >> 24 & 0x00000001;
# 544 "originaux/des.c"
		*subkey++ = left << 15 & 0x20000000 | left << 17 & 0x10000000 |
			left << 10 & 0x08000000 | left << 22 & 0x04000000 | left
			>> 2 & 0x02000000 | left << 1 & 0x01000000 | left << 16
			& 0x00200000 | left << 11 & 0x00100000 | left << 3 &
			0x00080000 | left >> 6 & 0x00040000 | left << 15 &
			0x00020000 | left >> 4 & 0x00010000 | right >> 2 &
			0x00002000 | right << 8 & 0x00001000 | right >> 14 &
			0x00000808 | right >> 9 & 0x00000400 | right &
			0x00000200 | right << 7 & 0x00000100 | right >> 7 &
			0x00000020 | right >> 3 & 0x00000011 | right << 2 &
			0x00000004 | right >> 21 & 0x00000002;
	}
# 545 "originaux/des.c"
	printf("boucle for 2 %d\n", round);
# 545 "originaux/des.c"
	printf("des_key_schedule fin\n");
}

static int des_setkey(struct _des_ctx *ctx, int  const *key)
{
	char __tmp_0__ = 0;
	int __return__;
	int i;
# 559 "originaux/des.c"
	printf("des_setkey deb\n");
# 560 "originaux/des.c"
	if(selftest_failed)
	{
# 561 "originaux/des.c"
		__return__ = 1;
		__tmp_0__ = 1 != 0;
	}
	if(!__tmp_0__)
	{
# 563 "originaux/des.c"
		des_key_schedule(key, ctx->encrypt_subkeys);
# 565 "originaux/des.c"
		for(i = 0; i < 32; i += 2)
# 566 "originaux/des.c"
		{
# 567 "originaux/des.c"
			(ctx->decrypt_subkeys)[i] = (ctx->encrypt_subkeys)[30 -
				i];
# 568 "originaux/des.c"
			(ctx->decrypt_subkeys)[i + 1] =
				(ctx->encrypt_subkeys)[31 - i];
		}
# 569 "originaux/des.c"
		printf("boucle for 3 %d\n", i);
# 569 "originaux/des.c"
		printf("des_setkey fin\n");
	}
# 571 "originaux/des.c"
	if(!__tmp_0__)
		__return__ = 0;
	__tmp_0__ = 0;
	return __return__;
}

static int des_ecb_crypt(struct _des_ctx *ctx, int  const *from, int *to, int
	mode)
{
	int left, right, work;
	int *keys;
# 585 "originaux/des.c"
	printf("des_ecb_crypt deb\n");
# 586 "originaux/des.c"
	keys = mode ? ctx->decrypt_subkeys : ctx->encrypt_subkeys;
# 588 "originaux/des.c"
	left = from[0] << 24 | from[1] << 16 | from[2] << 8 | from[3];
# 588 "originaux/des.c"
	right = from[4] << 24 | from[5] << 16 | from[6] << 8 | from[7];
# 589 "originaux/des.c"
	work = ((left >> 4 ^ right)) & 0x0f0f0f0f;
# 589 "originaux/des.c"
	right ^= work;
# 589 "originaux/des.c"
	left ^= work << 4;
# 589 "originaux/des.c"
	work = ((left >> 16 ^ right)) & 0x0000ffff;
# 589 "originaux/des.c"
	right ^= work;
# 589 "originaux/des.c"
	left ^= work << 16;
# 589 "originaux/des.c"
	work = ((right >> 2 ^ left)) & 0x33333333;
# 589 "originaux/des.c"
	left ^= work;
# 589 "originaux/des.c"
	right ^= work << 2;
# 589 "originaux/des.c"
	work = ((right >> 8 ^ left)) & 0x00ff00ff;
# 589 "originaux/des.c"
	left ^= work;
# 589 "originaux/des.c"
	right ^= work << 8;
# 589 "originaux/des.c"
	right = right << 1 | right >> 31;
# 589 "originaux/des.c"
	work = ((left ^ right)) & 0xaaaaaaaa;
# 589 "originaux/des.c"
	right ^= work;
# 589 "originaux/des.c"
	left ^= work;
# 589 "originaux/des.c"
	left = left << 1 | left >> 31;
# 591 "originaux/des.c"
	work = right ^ *keys++;
# 591 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 591 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 591 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 591 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 591 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 591 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 591 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 591 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 591 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 591 "originaux/des.c"
	work = left ^ *keys++;
# 591 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 591 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 591 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 591 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 591 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 591 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 591 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 591 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 591 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 592 "originaux/des.c"
	work = right ^ *keys++;
# 592 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 592 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 592 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 592 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 592 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 592 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 592 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 592 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 592 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 592 "originaux/des.c"
	work = left ^ *keys++;
# 592 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 592 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 592 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 592 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 592 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 592 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 592 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 592 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 592 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 593 "originaux/des.c"
	work = right ^ *keys++;
# 593 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 593 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 593 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 593 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 593 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 593 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 593 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 593 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 593 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 593 "originaux/des.c"
	work = left ^ *keys++;
# 593 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 593 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 593 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 593 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 593 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 593 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 593 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 593 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 593 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 594 "originaux/des.c"
	work = right ^ *keys++;
# 594 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 594 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 594 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 594 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 594 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 594 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 594 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 594 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 594 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 594 "originaux/des.c"
	work = left ^ *keys++;
# 594 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 594 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 594 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 594 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 594 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 594 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 594 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 594 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 594 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 595 "originaux/des.c"
	work = right ^ *keys++;
# 595 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 595 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 595 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 595 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 595 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 595 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 595 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 595 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 595 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 595 "originaux/des.c"
	work = left ^ *keys++;
# 595 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 595 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 595 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 595 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 595 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 595 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 595 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 595 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 595 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 596 "originaux/des.c"
	work = right ^ *keys++;
# 596 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 596 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 596 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 596 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 596 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 596 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 596 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 596 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 596 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 596 "originaux/des.c"
	work = left ^ *keys++;
# 596 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 596 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 596 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 596 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 596 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 596 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 596 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 596 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 596 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 597 "originaux/des.c"
	work = right ^ *keys++;
# 597 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 597 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 597 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 597 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 597 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 597 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 597 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 597 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 597 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 597 "originaux/des.c"
	work = left ^ *keys++;
# 597 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 597 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 597 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 597 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 597 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 597 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 597 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 597 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 597 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 598 "originaux/des.c"
	work = right ^ *keys++;
# 598 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 598 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 598 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 598 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 598 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 598 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 598 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 598 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 598 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 598 "originaux/des.c"
	work = left ^ *keys++;
# 598 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 598 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 598 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 598 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 598 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 598 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 598 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 598 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 598 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 600 "originaux/des.c"
	right = right << 31 | right >> 1;
# 600 "originaux/des.c"
	work = ((right ^ left)) & 0xaaaaaaaa;
# 600 "originaux/des.c"
	right ^= work;
# 600 "originaux/des.c"
	left ^= work;
# 600 "originaux/des.c"
	left = left << 31 | left >> 1;
# 600 "originaux/des.c"
	work = ((left >> 8 ^ right)) & 0x00ff00ff;
# 600 "originaux/des.c"
	right ^= work;
# 600 "originaux/des.c"
	left ^= work << 8;
# 600 "originaux/des.c"
	work = ((left >> 2 ^ right)) & 0x33333333;
# 600 "originaux/des.c"
	right ^= work;
# 600 "originaux/des.c"
	left ^= work << 2;
# 600 "originaux/des.c"
	work = ((right >> 16 ^ left)) & 0x0000ffff;
# 600 "originaux/des.c"
	left ^= work;
# 600 "originaux/des.c"
	right ^= work << 16;
# 600 "originaux/des.c"
	work = ((right >> 4 ^ left)) & 0x0f0f0f0f;
# 600 "originaux/des.c"
	left ^= work;
# 600 "originaux/des.c"
	right ^= work << 4;
# 601 "originaux/des.c"
	to[0] = right >> 24 & 0xff;
# 601 "originaux/des.c"
	to[1] = right >> 16 & 0xff;
# 601 "originaux/des.c"
	to[2] = right >> 8 & 0xff;
# 601 "originaux/des.c"
	to[3] = right & 0xff;
# 601 "originaux/des.c"
	to[4] = left >> 24 & 0xff;
# 601 "originaux/des.c"
	to[5] = left >> 16 & 0xff;
# 601 "originaux/des.c"
	to[6] = left >> 8 & 0xff;
# 601 "originaux/des.c"
	to[7] = left & 0xff;
# 602 "originaux/des.c"
	printf("des_ecb_crypt fin\n");
# 603 "originaux/des.c"
	return 0;
}

static int tripledes_set2keys(struct _tripledes_ctx *ctx, int  const *key1, int
	 const *key2)
{
	int i;
# 619 "originaux/des.c"
	printf("tripledes_set2keys deb\n");
# 620 "originaux/des.c"
	des_key_schedule(key1, ctx->encrypt_subkeys);
# 621 "originaux/des.c"
	des_key_schedule(key2, &(ctx->decrypt_subkeys)[32]);
# 623 "originaux/des.c"
	for(i = 0; i < 32; i += 2)
# 624 "originaux/des.c"
	{
# 625 "originaux/des.c"
		(ctx->decrypt_subkeys)[i] = (ctx->encrypt_subkeys)[30 - i];
# 626 "originaux/des.c"
		(ctx->decrypt_subkeys)[i + 1] = (ctx->encrypt_subkeys)[31 - i];
# 628 "originaux/des.c"
		(ctx->encrypt_subkeys)[i + 32] = (ctx->decrypt_subkeys)[62 - i];
# 629 "originaux/des.c"
		(ctx->encrypt_subkeys)[i + 33] = (ctx->decrypt_subkeys)[63 - i];
# 631 "originaux/des.c"
		(ctx->encrypt_subkeys)[i + 64] = (ctx->encrypt_subkeys)[i];
# 632 "originaux/des.c"
		(ctx->encrypt_subkeys)[i + 65] = (ctx->encrypt_subkeys)[i + 1];
# 634 "originaux/des.c"
		(ctx->decrypt_subkeys)[i + 64] = (ctx->decrypt_subkeys)[i];
# 635 "originaux/des.c"
		(ctx->decrypt_subkeys)[i + 65] = (ctx->decrypt_subkeys)[i + 1];
	}
# 636 "originaux/des.c"
	printf("boucle for 4 %d\n", i);
# 637 "originaux/des.c"
	printf("tripledes_set2keys fin\n");
# 638 "originaux/des.c"
	return 0;
}

static int tripledes_set3keys(struct _tripledes_ctx *ctx, int  const *key1, int
	 const *key2, int  const *key3)
{
	int i;
# 655 "originaux/des.c"
	printf("tripledes_set3keys  deb\n");
# 656 "originaux/des.c"
	des_key_schedule(key1, ctx->encrypt_subkeys);
# 657 "originaux/des.c"
	des_key_schedule(key2, &(ctx->decrypt_subkeys)[32]);
# 658 "originaux/des.c"
	des_key_schedule(key3, &(ctx->encrypt_subkeys)[64]);
# 660 "originaux/des.c"
	for(i = 0; i < 32; i += 2)
# 661 "originaux/des.c"
	{
# 662 "originaux/des.c"
		(ctx->decrypt_subkeys)[i] = (ctx->encrypt_subkeys)[94 - i];
# 663 "originaux/des.c"
		(ctx->decrypt_subkeys)[i + 1] = (ctx->encrypt_subkeys)[95 - i];
# 665 "originaux/des.c"
		(ctx->encrypt_subkeys)[i + 32] = (ctx->decrypt_subkeys)[62 - i];
# 666 "originaux/des.c"
		(ctx->encrypt_subkeys)[i + 33] = (ctx->decrypt_subkeys)[63 - i];
# 668 "originaux/des.c"
		(ctx->decrypt_subkeys)[i + 64] = (ctx->encrypt_subkeys)[30 - i];
# 669 "originaux/des.c"
		(ctx->decrypt_subkeys)[i + 65] = (ctx->encrypt_subkeys)[31 - i];
	}
# 670 "originaux/des.c"
	printf("boucle for 5 %d\n", i);
# 671 "originaux/des.c"
	printf("tripledes_set3keys  fin\n");
# 672 "originaux/des.c"
	return 0;
}

static int tripledes_ecb_crypt(struct _tripledes_ctx *ctx, int  const *from, int
	*to, int mode)
{
	int left, right, work;
	int *keys;
# 686 "originaux/des.c"
	printf("tripledes_ecb_crypt  deb\n");
# 687 "originaux/des.c"
	keys = mode ? ctx->decrypt_subkeys : ctx->encrypt_subkeys;
# 689 "originaux/des.c"
	left = from[0] << 24 | from[1] << 16 | from[2] << 8 | from[3];
# 689 "originaux/des.c"
	right = from[4] << 24 | from[5] << 16 | from[6] << 8 | from[7];
# 690 "originaux/des.c"
	work = ((left >> 4 ^ right)) & 0x0f0f0f0f;
# 690 "originaux/des.c"
	right ^= work;
# 690 "originaux/des.c"
	left ^= work << 4;
# 690 "originaux/des.c"
	work = ((left >> 16 ^ right)) & 0x0000ffff;
# 690 "originaux/des.c"
	right ^= work;
# 690 "originaux/des.c"
	left ^= work << 16;
# 690 "originaux/des.c"
	work = ((right >> 2 ^ left)) & 0x33333333;
# 690 "originaux/des.c"
	left ^= work;
# 690 "originaux/des.c"
	right ^= work << 2;
# 690 "originaux/des.c"
	work = ((right >> 8 ^ left)) & 0x00ff00ff;
# 690 "originaux/des.c"
	left ^= work;
# 690 "originaux/des.c"
	right ^= work << 8;
# 690 "originaux/des.c"
	right = right << 1 | right >> 31;
# 690 "originaux/des.c"
	work = ((left ^ right)) & 0xaaaaaaaa;
# 690 "originaux/des.c"
	right ^= work;
# 690 "originaux/des.c"
	left ^= work;
# 690 "originaux/des.c"
	left = left << 1 | left >> 31;
# 692 "originaux/des.c"
	work = right ^ *keys++;
# 692 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 692 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 692 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 692 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 692 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 692 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 692 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 692 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 692 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 692 "originaux/des.c"
	work = left ^ *keys++;
# 692 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 692 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 692 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 692 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 692 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 692 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 692 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 692 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 692 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 693 "originaux/des.c"
	work = right ^ *keys++;
# 693 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 693 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 693 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 693 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 693 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 693 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 693 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 693 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 693 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 693 "originaux/des.c"
	work = left ^ *keys++;
# 693 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 693 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 693 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 693 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 693 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 693 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 693 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 693 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 693 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 694 "originaux/des.c"
	work = right ^ *keys++;
# 694 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 694 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 694 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 694 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 694 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 694 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 694 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 694 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 694 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 694 "originaux/des.c"
	work = left ^ *keys++;
# 694 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 694 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 694 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 694 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 694 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 694 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 694 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 694 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 694 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 695 "originaux/des.c"
	work = right ^ *keys++;
# 695 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 695 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 695 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 695 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 695 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 695 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 695 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 695 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 695 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 695 "originaux/des.c"
	work = left ^ *keys++;
# 695 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 695 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 695 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 695 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 695 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 695 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 695 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 695 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 695 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 696 "originaux/des.c"
	work = right ^ *keys++;
# 696 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 696 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 696 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 696 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 696 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 696 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 696 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 696 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 696 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 696 "originaux/des.c"
	work = left ^ *keys++;
# 696 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 696 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 696 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 696 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 696 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 696 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 696 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 696 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 696 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 697 "originaux/des.c"
	work = right ^ *keys++;
# 697 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 697 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 697 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 697 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 697 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 697 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 697 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 697 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 697 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 697 "originaux/des.c"
	work = left ^ *keys++;
# 697 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 697 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 697 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 697 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 697 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 697 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 697 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 697 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 697 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 698 "originaux/des.c"
	work = right ^ *keys++;
# 698 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 698 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 698 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 698 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 698 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 698 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 698 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 698 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 698 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 698 "originaux/des.c"
	work = left ^ *keys++;
# 698 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 698 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 698 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 698 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 698 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 698 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 698 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 698 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 698 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 699 "originaux/des.c"
	work = right ^ *keys++;
# 699 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 699 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 699 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 699 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 699 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 699 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 699 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 699 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 699 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 699 "originaux/des.c"
	work = left ^ *keys++;
# 699 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 699 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 699 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 699 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 699 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 699 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 699 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 699 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 699 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 701 "originaux/des.c"
	work = left ^ *keys++;
# 701 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 701 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 701 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 701 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 701 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 701 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 701 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 701 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 701 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 701 "originaux/des.c"
	work = right ^ *keys++;
# 701 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 701 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 701 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 701 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 701 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 701 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 701 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 701 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 701 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 702 "originaux/des.c"
	work = left ^ *keys++;
# 702 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 702 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 702 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 702 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 702 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 702 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 702 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 702 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 702 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 702 "originaux/des.c"
	work = right ^ *keys++;
# 702 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 702 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 702 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 702 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 702 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 702 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 702 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 702 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 702 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 703 "originaux/des.c"
	work = left ^ *keys++;
# 703 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 703 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 703 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 703 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 703 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 703 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 703 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 703 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 703 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 703 "originaux/des.c"
	work = right ^ *keys++;
# 703 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 703 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 703 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 703 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 703 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 703 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 703 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 703 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 703 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 704 "originaux/des.c"
	work = left ^ *keys++;
# 704 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 704 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 704 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 704 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 704 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 704 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 704 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 704 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 704 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 704 "originaux/des.c"
	work = right ^ *keys++;
# 704 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 704 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 704 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 704 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 704 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 704 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 704 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 704 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 704 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 705 "originaux/des.c"
	work = left ^ *keys++;
# 705 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 705 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 705 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 705 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 705 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 705 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 705 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 705 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 705 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 705 "originaux/des.c"
	work = right ^ *keys++;
# 705 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 705 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 705 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 705 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 705 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 705 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 705 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 705 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 705 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 706 "originaux/des.c"
	work = left ^ *keys++;
# 706 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 706 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 706 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 706 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 706 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 706 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 706 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 706 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 706 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 706 "originaux/des.c"
	work = right ^ *keys++;
# 706 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 706 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 706 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 706 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 706 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 706 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 706 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 706 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 706 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 707 "originaux/des.c"
	work = left ^ *keys++;
# 707 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 707 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 707 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 707 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 707 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 707 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 707 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 707 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 707 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 707 "originaux/des.c"
	work = right ^ *keys++;
# 707 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 707 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 707 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 707 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 707 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 707 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 707 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 707 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 707 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 708 "originaux/des.c"
	work = left ^ *keys++;
# 708 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 708 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 708 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 708 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 708 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 708 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 708 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 708 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 708 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 708 "originaux/des.c"
	work = right ^ *keys++;
# 708 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 708 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 708 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 708 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 708 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 708 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 708 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 708 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 708 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 710 "originaux/des.c"
	work = right ^ *keys++;
# 710 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 710 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 710 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 710 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 710 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 710 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 710 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 710 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 710 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 710 "originaux/des.c"
	work = left ^ *keys++;
# 710 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 710 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 710 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 710 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 710 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 710 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 710 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 710 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 710 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 711 "originaux/des.c"
	work = right ^ *keys++;
# 711 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 711 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 711 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 711 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 711 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 711 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 711 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 711 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 711 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 711 "originaux/des.c"
	work = left ^ *keys++;
# 711 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 711 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 711 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 711 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 711 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 711 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 711 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 711 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 711 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 712 "originaux/des.c"
	work = right ^ *keys++;
# 712 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 712 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 712 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 712 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 712 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 712 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 712 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 712 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 712 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 712 "originaux/des.c"
	work = left ^ *keys++;
# 712 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 712 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 712 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 712 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 712 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 712 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 712 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 712 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 712 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 713 "originaux/des.c"
	work = right ^ *keys++;
# 713 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 713 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 713 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 713 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 713 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 713 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 713 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 713 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 713 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 713 "originaux/des.c"
	work = left ^ *keys++;
# 713 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 713 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 713 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 713 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 713 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 713 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 713 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 713 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 713 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 714 "originaux/des.c"
	work = right ^ *keys++;
# 714 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 714 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 714 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 714 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 714 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 714 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 714 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 714 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 714 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 714 "originaux/des.c"
	work = left ^ *keys++;
# 714 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 714 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 714 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 714 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 714 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 714 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 714 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 714 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 714 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 715 "originaux/des.c"
	work = right ^ *keys++;
# 715 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 715 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 715 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 715 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 715 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 715 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 715 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 715 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 715 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 715 "originaux/des.c"
	work = left ^ *keys++;
# 715 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 715 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 715 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 715 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 715 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 715 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 715 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 715 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 715 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 716 "originaux/des.c"
	work = right ^ *keys++;
# 716 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 716 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 716 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 716 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 716 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 716 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 716 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 716 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 716 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 716 "originaux/des.c"
	work = left ^ *keys++;
# 716 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 716 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 716 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 716 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 716 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 716 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 716 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 716 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 716 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 717 "originaux/des.c"
	work = right ^ *keys++;
# 717 "originaux/des.c"
	left ^= sbox8[work & 0x3f];
# 717 "originaux/des.c"
	left ^= sbox6[work >> 8 & 0x3f];
# 717 "originaux/des.c"
	left ^= sbox4[work >> 16 & 0x3f];
# 717 "originaux/des.c"
	left ^= sbox2[work >> 24 & 0x3f];
# 717 "originaux/des.c"
	work = ((right << 28 | right >> 4)) ^ *keys++;
# 717 "originaux/des.c"
	left ^= sbox7[work & 0x3f];
# 717 "originaux/des.c"
	left ^= sbox5[work >> 8 & 0x3f];
# 717 "originaux/des.c"
	left ^= sbox3[work >> 16 & 0x3f];
# 717 "originaux/des.c"
	left ^= sbox1[work >> 24 & 0x3f];
# 717 "originaux/des.c"
	work = left ^ *keys++;
# 717 "originaux/des.c"
	right ^= sbox8[work & 0x3f];
# 717 "originaux/des.c"
	right ^= sbox6[work >> 8 & 0x3f];
# 717 "originaux/des.c"
	right ^= sbox4[work >> 16 & 0x3f];
# 717 "originaux/des.c"
	right ^= sbox2[work >> 24 & 0x3f];
# 717 "originaux/des.c"
	work = ((left << 28 | left >> 4)) ^ *keys++;
# 717 "originaux/des.c"
	right ^= sbox7[work & 0x3f];
# 717 "originaux/des.c"
	right ^= sbox5[work >> 8 & 0x3f];
# 717 "originaux/des.c"
	right ^= sbox3[work >> 16 & 0x3f];
# 717 "originaux/des.c"
	right ^= sbox1[work >> 24 & 0x3f];
# 719 "originaux/des.c"
	right = right << 31 | right >> 1;
# 719 "originaux/des.c"
	work = ((right ^ left)) & 0xaaaaaaaa;
# 719 "originaux/des.c"
	right ^= work;
# 719 "originaux/des.c"
	left ^= work;
# 719 "originaux/des.c"
	left = left << 31 | left >> 1;
# 719 "originaux/des.c"
	work = ((left >> 8 ^ right)) & 0x00ff00ff;
# 719 "originaux/des.c"
	right ^= work;
# 719 "originaux/des.c"
	left ^= work << 8;
# 719 "originaux/des.c"
	work = ((left >> 2 ^ right)) & 0x33333333;
# 719 "originaux/des.c"
	right ^= work;
# 719 "originaux/des.c"
	left ^= work << 2;
# 719 "originaux/des.c"
	work = ((right >> 16 ^ left)) & 0x0000ffff;
# 719 "originaux/des.c"
	left ^= work;
# 719 "originaux/des.c"
	right ^= work << 16;
# 719 "originaux/des.c"
	work = ((right >> 4 ^ left)) & 0x0f0f0f0f;
# 719 "originaux/des.c"
	left ^= work;
# 719 "originaux/des.c"
	right ^= work << 4;
# 720 "originaux/des.c"
	to[0] = right >> 24 & 0xff;
# 720 "originaux/des.c"
	to[1] = right >> 16 & 0xff;
# 720 "originaux/des.c"
	to[2] = right >> 8 & 0xff;
# 720 "originaux/des.c"
	to[3] = right & 0xff;
# 720 "originaux/des.c"
	to[4] = left >> 24 & 0xff;
# 720 "originaux/des.c"
	to[5] = left >> 16 & 0xff;
# 720 "originaux/des.c"
	to[6] = left >> 8 & 0xff;
# 720 "originaux/des.c"
	to[7] = left & 0xff;
# 721 "originaux/des.c"
	printf("tripledes_ecb_crypt  fin\n");
# 722 "originaux/des.c"
	return 0;
}

static int is_weak_key(int  const *key)
{
	char __tmp_0__ = 0;
	int __return__;
	int work[8];
	int i, left, right, middle, cmp_result;
# 738 "originaux/des.c"
	printf("is_weak_key  deb\n");
# 740 "originaux/des.c"
	for(i = 0; i < 8; ++i)
# 741 "originaux/des.c"
		work[i] = key[i] & 0xfe;
# 742 "originaux/des.c"
	printf("boucle for 6 %d\n", i);
# 744 "originaux/des.c"
	left = 0;
# 745 "originaux/des.c"
	right = 63;
# 746 "originaux/des.c"
	while(!__tmp_0__ && left <= right)
# 747 "originaux/des.c"
	{
# 748 "originaux/des.c"
		middle = ((left + right)) / 2;
# 750 "originaux/des.c"
		if(!(((cmp_result = working_memcmp(work, weak_keys[middle],
			8)))))
		{
# 751 "originaux/des.c"
			__return__ = -1;
			__tmp_0__ = 1 != 0;
		}
		else /* if(!__tmp_0__)*/
		{
# 753 "originaux/des.c"
			if(cmp_result > 0)
# 754 "originaux/des.c"
				left = middle + 1;
			else
# 755 "originaux/des.c"
# 756 "originaux/des.c"
				right = middle - 1;
		}
	}
	if(!__tmp_0__)
	{
# 757 "originaux/des.c"
		printf("boucle while 6+1 %d\n", i);
# 758 "originaux/des.c"
		printf("is_weak_key  fin\n");
	}
# 759 "originaux/des.c"
	if(!__tmp_0__)
		__return__ = 0;
	__tmp_0__ = 0;
	return __return__;
}

static char  const *selftest(void )
{
	char __tmp_0__ = 0;
	char  const *__return__;
# 777 "originaux/des.c"
	printf("selftest deb\n");
# 778 "originaux/des.c"
	if(sizeof(int) != 4)
	{
# 779 "originaux/des.c"
		__return__ = "Wrong word size for DES configured.";
		__tmp_0__ = 1 != 0;
	}
	if(!__tmp_0__)
	{
# 784 "originaux/des.c"
		{
			int i;
			int key[8] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
				0x55};
			int input[8] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff};
			int result[8] = {0x24, 0x6e, 0x9d, 0xb9, 0xc5, 0x50,
				0x38, 0x1a};
			int temp1[8], temp2[8], temp3[8];
			des_ctx des;
# 795 "originaux/des.c"
			for(i = 0; i < 64; ++i)
# 796 "originaux/des.c"
			{
# 797 "originaux/des.c"
				des_setkey(des, key);
# 798 "originaux/des.c"
				des_ecb_crypt(des, input, temp1, 0);
# 799 "originaux/des.c"
				des_ecb_crypt(des, temp1, temp2, 0);
# 800 "originaux/des.c"
				des_setkey(des, temp2);
# 801 "originaux/des.c"
				des_ecb_crypt(des, temp1, temp3, 1);
# 802 "originaux/des.c"
				memcpy(key, temp3, 8);
# 803 "originaux/des.c"
				memcpy(input, temp1, 8);
			}
# 804 "originaux/des.c"
			printf("boucle for 7 %d\n", i);
# 805 "originaux/des.c"
			if(memcmp(temp3, result, 8))
			{
# 806 "originaux/des.c"
				__return__ = "DES maintenance test failed.";
				__tmp_0__ = 1 != 0;
			}
		}
		if(!__tmp_0__)
		{
# 813 "originaux/des.c"
			{
				int i;
				int input[8] = {0xfe, 0xdc, 0xba, 0x98, 0x76,
					0x54, 0x32, 0x10};
				int key1[8] = {0x12, 0x34, 0x56, 0x78, 0x9a,
					0xbc, 0xde, 0xf0};
				int key2[8] = {0x11, 0x22, 0x33, 0x44, 0xff,
					0xaa, 0xcc, 0xdd};
				int result[8] = {0x7b, 0x38, 0x3b, 0x23, 0xa2,
					0x7d, 0x26, 0xd3};
				tripledes_ctx des3;
# 826 "originaux/des.c"
				for(i = 0; i < 16; ++i)
# 827 "originaux/des.c"
				{
# 828 "originaux/des.c"
					tripledes_set2keys(des3, key1, key2);
# 829 "originaux/des.c"
					tripledes_ecb_crypt(des3, input, key1,
						0);
# 830 "originaux/des.c"
					tripledes_ecb_crypt(des3, input, key2,
						1);
# 831 "originaux/des.c"
					tripledes_set3keys(des3, key1, input,
						key2);
# 832 "originaux/des.c"
					tripledes_ecb_crypt(des3, input, input,
						0);
				}
# 833 "originaux/des.c"
				printf("boucle for 8 %d\n", i);
# 834 "originaux/des.c"
				if(memcmp(input, result, 8))
				{
# 835 "originaux/des.c"
					__return__ = "Triple-DES test failed.";
					__tmp_0__ = 1 != 0;
				}
			}
			if(!__tmp_0__)
			{
# 842 "originaux/des.c"
				{
					struct  {
						int key[24];
						int plain[8];
						int cipher[8];
					} testdata[] = {{{0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01}, {0x95, 0xF8, 0xA5, 0xE5,
						0xDD, 0x31, 0xD9, 0x00}, {0x80,
						0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00}}, {{0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01}, {0x9D, 0x64, 0x55,
						0x5A, 0x9A, 0x10, 0xB8, 0x52},
						{0x00, 0x00, 0x00, 0x10, 0x00,
						0x00, 0x00, 0x00}}, {{0x38,
						0x49, 0x67, 0x4C, 0x26, 0x02,
						0x31, 0x9E, 0x38, 0x49, 0x67,
						0x4C, 0x26, 0x02, 0x31, 0x9E,
						0x38, 0x49, 0x67, 0x4C, 0x26,
						0x02, 0x31, 0x9E}, {0x51, 0x45,
						0x4B, 0x58, 0x2D, 0xDF, 0x44,
						0x0A}, {0x71, 0x78, 0x87, 0x6E,
						0x01, 0xF1, 0x9B, 0x2A}},
						{{0x04, 0xB9, 0x15, 0xBA, 0x43,
						0xFE, 0xB5, 0xB6, 0x04, 0xB9,
						0x15, 0xBA, 0x43, 0xFE, 0xB5,
						0xB6, 0x04, 0xB9, 0x15, 0xBA,
						0x43, 0xFE, 0xB5, 0xB6}, {0x42,
						0xFD, 0x44, 0x30, 0x59, 0x57,
						0x7F, 0xA2}, {0xAF, 0x37, 0xFB,
						0x42, 0x1F, 0x8C, 0x40, 0x95}},
						{{0x01, 0x23, 0x45, 0x67, 0x89,
						0xAB, 0xCD, 0xEF, 0x01, 0x23,
						0x45, 0x67, 0x89, 0xAB, 0xCD,
						0xEF, 0x01, 0x23, 0x45, 0x67,
						0x89, 0xAB, 0xCD, 0xEF}, {0x73,
						0x6F, 0x6D, 0x65, 0x64, 0x61,
						0x74, 0x61}, {0x3D, 0x12, 0x4F,
						0xE2, 0x19, 0x8B, 0xA3, 0x18}},
						{{0x01, 0x23, 0x45, 0x67, 0x89,
						0xAB, 0xCD, 0xEF, 0x55, 0x55,
						0x55, 0x55, 0x55, 0x55, 0x55,
						0x55, 0x01, 0x23, 0x45, 0x67,
						0x89, 0xAB, 0xCD, 0xEF}, {0x73,
						0x6F, 0x6D, 0x65, 0x64, 0x61,
						0x74, 0x61}, {0xFB, 0xAB, 0xA1,
						0xFF, 0x9D, 0x05, 0xE9, 0xB1}},
						{{0x01, 0x23, 0x45, 0x67, 0x89,
						0xAB, 0xCD, 0xEF, 0x55, 0x55,
						0x55, 0x55, 0x55, 0x55, 0x55,
						0x55, 0xFE, 0xDC, 0xBA, 0x98,
						0x76, 0x54, 0x32, 0x10}, {0x73,
						0x6F, 0x6D, 0x65, 0x64, 0x61,
						0x74, 0x61}, {0x18, 0xd7, 0x48,
						0xe5, 0x63, 0x62, 0x05, 0x72}},
						{{0x03, 0x52, 0x02, 0x07, 0x67,
						0x20, 0x82, 0x17, 0x86, 0x02,
						0x87, 0x66, 0x59, 0x08, 0x21,
						0x98, 0x64, 0x05, 0x6A, 0xBD,
						0xFE, 0xA9, 0x34, 0x57}, {0x73,
						0x71, 0x75, 0x69, 0x67, 0x67,
						0x6C, 0x65}, {0xc0, 0x7d, 0x2a,
						0x0f, 0xa5, 0x66, 0xfa, 0x30}},
						{{0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x80, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x01, 0x01,
						0x01, 0x01, 0x01, 0x02}, {0x00,
						0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00}, {0xe6, 0xe6, 0xdd,
						0x5b, 0x7e, 0x72, 0x29, 0x74}},
						{{0x10, 0x46, 0x10, 0x34, 0x89,
						0x98, 0x80, 0x20, 0x91, 0x07,
						0xD0, 0x15, 0x89, 0x19, 0x01,
						0x01, 0x19, 0x07, 0x92, 0x10,
						0x98, 0x1A, 0x01, 0x01}, {0x00,
						0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00}, {0xe1, 0xef, 0x62,
						0xc3, 0x32, 0xfe, 0x82, 0x5b}}};
					int result[8];
					int i;
					static char error[80];
					tripledes_ctx des3;
# 911 "originaux/des.c"
					for(i = 0; !__tmp_0__ && i <
						sizeof(testdata) /
						sizeof(*testdata); __tmp_0__ ||
						++i)
# 911 "originaux/des.c"
					{
# 912 "originaux/des.c"
						tripledes_set3keys(des3,
							(testdata[i]).key,
							(testdata[i]).key + 8,
							(testdata[i]).key + 16);
# 914 "originaux/des.c"
						tripledes_ecb_crypt(des3,
							(testdata[i]).plain,
							result, 0);
# 915 "originaux/des.c"
						if(memcmp((testdata[i]).cipher,
							result, 8))
# 915 "originaux/des.c"
						{
# 916 "originaux/des.c"
							sprintf(error,
								"Triple-DES SSLeay test pattern no. %d failend on encryption.",
								i + 1);
# 917 "originaux/des.c"
							__return__ = error;
							__tmp_0__ = 1 != 0;
						}
						if(!__tmp_0__)
						{
# 920 "originaux/des.c"
							tripledes_ecb_crypt(des3
								,
								(testdata[i]).cipher,
								result, 1);
# 921 "originaux/des.c"
							if(memcmp((testdata[i]).plain
								, result, 8))
# 921 "originaux/des.c"
							{
# 922 "originaux/des.c"
	sprintf(error,
		"Triple-DES SSLeay test pattern no. %d failend on decryption.",
		i + 1);
# 923 "originaux/des.c"
	__return__ = error;
	__tmp_0__ = 1 != 0;
							}
							if(!__tmp_0__)
# 924 "originaux/des.c"
	printf("boucle for 9 %d\n", i);
						}
					}
				}
				if(!__tmp_0__)
# 933 "originaux/des.c"
				{
					int i;
# 936 "originaux/des.c"
					for(i = 0; !__tmp_0__ && i < 64;
						__tmp_0__ || ++i)
					{
# 937 "originaux/des.c"
						if(!is_weak_key(weak_keys[i]))
						{
# 938 "originaux/des.c"
							__return__ =
								"DES weak key detection failed";
							__tmp_0__ = 1 != 0;
						}
					}
					if(!__tmp_0__)
# 938 "originaux/des.c"
						printf("boucle for 10 %d\n", i);
				}
			}
		}
	}
# 941 "originaux/des.c"
	if(!__tmp_0__)
		__return__ = 0;
	__tmp_0__ = 0;
	return __return__;
}

static int do_tripledes_setkey(struct _tripledes_ctx *ctx, int *key,
	unsigned int keylen)
{
	char __tmp_0__ = 0;
	int __return__;
# 948 "originaux/des.c"
	if(selftest_failed)
	{
# 949 "originaux/des.c"
		__return__ = 1;
		__tmp_0__ = 1 != 0;
	}
	if(!__tmp_0__)
	{
# 950 "originaux/des.c"
		if(keylen != 24)
		{
# 951 "originaux/des.c"
			__return__ = 2;
			__tmp_0__ = 1 != 0;
		}
		if(!__tmp_0__)
		{
# 953 "originaux/des.c"
			tripledes_set3keys(ctx, key, key + 8, key + 16);
# 955 "originaux/des.c"
			if(is_weak_key(key) || is_weak_key(key + 8) ||
				is_weak_key(key + 16))
			{
# 956 "originaux/des.c"
				__return__ = 3;
				__tmp_0__ = 1 != 0;
			}
		}
	}
# 958 "originaux/des.c"
	if(!__tmp_0__)
		__return__ = 0;
	__tmp_0__ = 0;
	return __return__;
}

static void do_tripledes_encrypt(struct _tripledes_ctx *ctx, int *outbuf, int
	*inbuf)
{
# 965 "originaux/des.c"
	tripledes_ecb_crypt(ctx, inbuf, outbuf, 0);
}

static void do_tripledes_decrypt(struct _tripledes_ctx *ctx, int *outbuf, int
	*inbuf)
{
# 971 "originaux/des.c"
	tripledes_ecb_crypt(ctx, inbuf, outbuf, 1);
}

char  const *des_get_info(int algo, int *keylen, int *blocksize, int
	*contextsize, int (**r_setkey)(void *c, int *key, unsigned int keylen),
	void (**r_encrypt)(void *c, int *outbuf, int *inbuf), void
	(**r_decrypt)(void *c, int *outbuf, int *inbuf))
{
	char __tmp_0__ = 0;
	char  const *__return__;
	static int did_selftest = 0;
# 991 "originaux/des.c"
	if(!did_selftest)
# 991 "originaux/des.c"
	{
		char  const *s = selftest();
# 993 "originaux/des.c"
		did_selftest = 1;
# 994 "originaux/des.c"
		if(s)
# 994 "originaux/des.c"
		{
# 995 "originaux/des.c"
			fprintf(stderr, "%s\n", s);
# 996 "originaux/des.c"
			selftest_failed = s;
# 997 "originaux/des.c"
			__return__ = NULL;
			__tmp_0__ = 1 != 0;
		}
	}
	if(!__tmp_0__)
	{
# 1001 "originaux/des.c"
		if(algo == 2)
# 1001 "originaux/des.c"
		{
# 1002 "originaux/des.c"
			*keylen = 192;
# 1003 "originaux/des.c"
			*blocksize = 8;
# 1004 "originaux/des.c"
			*contextsize = sizeof(struct _tripledes_ctx);
# 1006 "originaux/des.c"
			*(int(**)(struct _tripledes_ctx *, int *, unsigned int
				))r_setkey = do_tripledes_setkey;
# 1008 "originaux/des.c"
			*(void(**)(struct _tripledes_ctx *, int *, int
				*))r_encrypt = do_tripledes_encrypt;
# 1010 "originaux/des.c"
			*(void(**)(struct _tripledes_ctx *, int *, int
				*))r_decrypt = do_tripledes_decrypt;
# 1011 "originaux/des.c"
			__return__ = "3DES";
			__tmp_0__ = 1 != 0;
		}
	}
# 1013 "originaux/des.c"
	if(!__tmp_0__)
		__return__ = NULL;
	__tmp_0__ = 0;
	return __return__;
}

void main()
{
# 1018 "originaux/des.c"
	selftest();
}

