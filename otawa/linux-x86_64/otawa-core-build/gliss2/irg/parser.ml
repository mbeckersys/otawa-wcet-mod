type token =
  | ID of (string)
  | BIN_CONST of (Int32.t * int)
  | BIN_CONST_64 of (Int64.t * int)
  | CARD_CONST of (Int32.t)
  | CARD_CONST_64 of (Int64.t)
  | FIXED_CONST of (float)
  | STRING_CONST of (string)
  | DOLLAR
  | ACTION
  | ALIAS
  | ATTR
  | BOOL
  | CANON
  | CARD
  | CASE
  | COERCE
  | DEFAULT
  | DO
  | ELSE
  | ENDDO
  | ENDIF
  | ENUM
  | ERROR
  | EXTEND
  | FIX
  | FLOAT
  | FOR
  | FORMAT
  | IF
  | IN
  | IMAGE
  | INITIALA
  | INT
  | LET of (int)
  | MEM of (int)
  | MODE of (int)
  | OP of (int)
  | REG of (int)
  | SWITCH
  | SYNTAX
  | THEN
  | TYPE of (int)
  | VAR of (int)
  | VOLATILE
  | PORTS
  | RESOURCE of (int)
  | USES
  | EXCEPTION of (int)
  | MACRO
  | EOF
  | NOT
  | OR
  | AND
  | LEQ
  | GEQ
  | EQU
  | NEQ
  | LEFT_SHIFT
  | RIGHT_SHIFT
  | DOUBLE_STAR
  | ROTATE_RIGHT
  | ROTATE_LEFT
  | DOUBLE_COLON
  | DOUBLE_DOT
  | BIT_LEFT
  | BIT_RIGHT
  | EQ
  | EXCLAM
  | PIPE
  | CIRC
  | AMPERS
  | GT
  | LT
  | SHARP
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | TILD
  | COLON
  | COMMA
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | LPAREN
  | RPAREN
  | SEMI
  | DOT
  | AROBAS

open Parsing;;
let _ = parse_error;;
# 24 "parser.mly"
let eline e = Irg.ELINE (!(Lexer.file), !(Lexer.line), e)
let line s = Irg.LINE (!(Lexer.file), !(Lexer.line), s)


(** Raise an error at the current parsing position.
	@param f	Function to display error. *)
let error f =
		raise (Irg.Error (fun out -> Printf.fprintf out "%s:%d: " !(Lexer.file) !(Lexer.line); f out))


(** Handle an expression in the parser, i.e. put source file/line information
	or add file/line information when an error is raised.
	@param f			Function to perform expression building. It is called with () argument.
	@return				Built expression.
	@raise Irg.Error	If there is an error. *)
let handle_expr f =
	try
		Irg.ELINE (!(Lexer.file), !(Lexer.line), f ())
	with Irg.PreError ef ->
		error ef


(** Handle an statement in the parser, i.e. put source file/line information
	or add file/line information when an error is raised.
	@param f			Function to perform statement building. It is called with () argument.
	@return				Built statement.
	@raise Irg.Error	If there is an error. *)
let handle_stat f =
	try
		Irg.LINE (!(Lexer.file), !(Lexer.line), f ())
	with Irg.PreError ef ->
		error ef


(** Raise a syntax error exception.
	@param msg	Error message.
	@raise Irg.SyntaxError	Syntax error. *)
let syntax_error msg =
	raise (Irg.SyntaxError msg)


(** Get information to extend the symbol x.
	@param x				Name of the symbol to extend (must an AND-op or an AND-mode).
	@return					(specification of the symbol, list of parameters, list of attributes)
	@raise Irg.Error		If the symbol is not extensible. *)
let get_spec_extend x =
	let sym = Irg.get_symbol x in
	match sym with
	| Irg.AND_MODE (_, pars, _, attrs)
	| Irg.AND_OP (_, pars, attrs) ->
		(sym, pars, attrs)
	| Irg.UNDEF ->
		Irg.error (Irg.asis (Printf.sprintf "symbol %s does not exists" x))
	| _ ->
		Irg.error (Irg.asis (Printf.sprintf "can not extend %s" x))


(** Intersect parameter declaration.
	@param pars1		First list of parameters.
	@param pars2		Second list of parameters.
	@return				Intersection of lists. *)
let intersect_params pars1 pars2 : (string * Irg.typ) list =
	List.fold_left
		(fun res par -> if List.mem par pars1 then par::res else res)
		[]
		pars2


(** Intersect two list of attributes to provide a common context for
	extending a list of symbols.
	@param attrs1		First list of symbols.
	@param attrs2		Second list of symbols.
	@return				Intersection of both lists. *)
let intersect_attrs attrs1 attrs2 =
	let equal attr1 attr2 =
		match (attr1, attr2) with
		| (Irg.ATTR_EXPR (n1, _), Irg.ATTR_EXPR (n2, _))
		| (Irg.ATTR_LOC (n1, _), Irg.ATTR_LOC (n2, _))
		| (Irg.ATTR_STAT (n1, _), Irg.ATTR_STAT (n2, _)) when n1 = n2 -> true
		| _ -> false in
	let member_of attr attrs = List.exists (fun item -> equal attr item) attrs in
	List.fold_left (fun res attr -> if member_of attr attrs2 then attr::res else res) [] attrs1

# 181 "parser.ml"
let yytransl_const = [|
  264 (* DOLLAR *);
  265 (* ACTION *);
  266 (* ALIAS *);
  267 (* ATTR *);
  268 (* BOOL *);
  269 (* CANON *);
  270 (* CARD *);
  271 (* CASE *);
  272 (* COERCE *);
  273 (* DEFAULT *);
  274 (* DO *);
  275 (* ELSE *);
  276 (* ENDDO *);
  277 (* ENDIF *);
  278 (* ENUM *);
  279 (* ERROR *);
  280 (* EXTEND *);
  281 (* FIX *);
  282 (* FLOAT *);
  283 (* FOR *);
  284 (* FORMAT *);
  285 (* IF *);
  286 (* IN *);
  287 (* IMAGE *);
  288 (* INITIALA *);
  289 (* INT *);
  295 (* SWITCH *);
  296 (* SYNTAX *);
  297 (* THEN *);
  300 (* VOLATILE *);
  301 (* PORTS *);
  303 (* USES *);
  305 (* MACRO *);
    0 (* EOF *);
  306 (* NOT *);
  307 (* OR *);
  308 (* AND *);
  309 (* LEQ *);
  310 (* GEQ *);
  311 (* EQU *);
  312 (* NEQ *);
  313 (* LEFT_SHIFT *);
  314 (* RIGHT_SHIFT *);
  315 (* DOUBLE_STAR *);
  316 (* ROTATE_RIGHT *);
  317 (* ROTATE_LEFT *);
  318 (* DOUBLE_COLON *);
  319 (* DOUBLE_DOT *);
  320 (* BIT_LEFT *);
  321 (* BIT_RIGHT *);
  322 (* EQ *);
  323 (* EXCLAM *);
  324 (* PIPE *);
  325 (* CIRC *);
  326 (* AMPERS *);
  327 (* GT *);
  328 (* LT *);
  329 (* SHARP *);
  330 (* PLUS *);
  331 (* MINUS *);
  332 (* STAR *);
  333 (* SLASH *);
  334 (* PERCENT *);
  335 (* TILD *);
  336 (* COLON *);
  337 (* COMMA *);
  338 (* LBRACE *);
  339 (* RBRACE *);
  340 (* LBRACK *);
  341 (* RBRACK *);
  342 (* LPAREN *);
  343 (* RPAREN *);
  344 (* SEMI *);
  345 (* DOT *);
  346 (* AROBAS *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* BIN_CONST *);
  259 (* BIN_CONST_64 *);
  260 (* CARD_CONST *);
  261 (* CARD_CONST_64 *);
  262 (* FIXED_CONST *);
  263 (* STRING_CONST *);
  290 (* LET *);
  291 (* MEM *);
  292 (* MODE *);
  293 (* OP *);
  294 (* REG *);
  298 (* TYPE *);
  299 (* VAR *);
  302 (* RESOURCE *);
  304 (* EXCEPTION *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\002\000\002\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\005\000\
\005\000\012\000\018\000\018\000\019\000\019\000\015\000\015\000\
\015\000\015\000\015\000\020\000\020\000\021\000\021\000\013\000\
\022\000\022\000\006\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\024\000\024\000\025\000\025\000\016\000\007\000\
\008\000\009\000\027\000\027\000\029\000\029\000\017\000\017\000\
\028\000\028\000\030\000\030\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\033\000\033\000\035\000\035\000\010\000\
\010\000\038\000\038\000\011\000\011\000\011\000\014\000\041\000\
\042\000\042\000\040\000\040\000\037\000\037\000\037\000\043\000\
\044\000\044\000\039\000\039\000\045\000\045\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\047\000\034\000\
\034\000\048\000\048\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\053\000\053\000\052\000\052\000\052\000\054\000\054\000\050\000\
\050\000\050\000\050\000\050\000\050\000\051\000\051\000\051\000\
\055\000\055\000\056\000\056\000\058\000\058\000\057\000\057\000\
\060\000\059\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\062\000\062\000\062\000\062\000\062\000\062\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\061\000\061\000\064\000\064\000\063\000\063\000\066\000\065\000\
\032\000\032\000\067\000\067\000\068\000\068\000\070\000\070\000\
\069\000\069\000\069\000\069\000\069\000\071\000\071\000\073\000\
\074\000\074\000\074\000\075\000\075\000\077\000\077\000\076\000\
\076\000\078\000\078\000\079\000\079\000\072\000\072\000\080\000\
\080\000\081\000\081\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\006\000\002\000\001\000\003\000\001\000\004\000\005\000\006\000\
\004\000\005\000\003\000\001\000\003\000\001\000\003\000\002\000\
\001\000\003\000\004\000\001\000\004\000\004\000\006\000\006\000\
\005\000\004\000\001\000\003\000\001\000\003\000\001\000\006\000\
\006\000\006\000\003\000\001\000\003\000\001\000\001\000\001\000\
\000\000\001\000\001\000\002\000\003\000\003\000\005\000\003\000\
\003\000\003\000\005\000\001\000\006\000\001\000\004\000\007\000\
\004\000\000\000\002\000\006\000\004\000\003\000\002\000\002\000\
\001\000\003\000\001\000\003\000\000\000\001\000\003\000\003\000\
\001\000\001\000\000\000\001\000\001\000\002\000\003\000\005\000\
\003\000\003\000\005\000\003\000\003\000\002\000\001\000\000\000\
\002\000\001\000\003\000\000\000\001\000\001\000\002\000\003\000\
\003\000\003\000\001\000\004\000\004\000\004\000\006\000\004\000\
\006\000\008\000\000\000\001\000\003\000\000\000\005\000\001\000\
\006\000\004\000\009\000\003\000\003\000\006\000\006\000\007\000\
\000\000\002\000\001\000\003\000\000\000\001\000\001\000\002\000\
\004\000\003\000\006\000\002\000\006\000\002\000\004\000\003\000\
\003\000\003\000\003\000\001\000\002\000\004\000\003\000\006\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\002\000\003\000\007\000\002\000\007\000\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\001\000\
\001\000\003\000\000\000\001\000\001\000\002\000\004\000\003\000\
\001\000\003\000\001\000\003\000\001\000\006\000\000\000\002\000\
\001\000\003\000\003\000\005\000\005\000\001\000\004\000\002\000\
\000\000\002\000\002\000\004\000\007\000\002\000\007\000\000\000\
\002\000\000\000\004\000\001\000\001\000\001\000\003\000\002\000\
\006\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\001\000\000\003\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\014\000\015\000\000\000\056\000\000\000\036\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\081\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\033\000\000\000\001\000\004\000\
\000\000\000\000\000\000\000\000\000\000\079\000\000\000\093\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\000\
\198\000\195\000\196\000\194\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\102\000\000\000\000\000\000\000\000\000\000\000\094\000\
\000\000\025\000\000\000\030\000\000\000\028\000\000\000\000\000\
\000\000\043\000\000\000\000\000\000\000\000\000\157\000\000\000\
\000\000\148\000\000\000\150\000\000\000\190\000\000\000\192\000\
\000\000\000\000\000\000\000\000\000\000\187\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\016\000\000\000\000\000\000\000\083\000\000\000\000\000\
\000\000\086\000\000\000\000\000\000\000\000\000\054\000\000\000\
\035\000\000\000\000\000\020\000\034\000\101\000\000\000\000\000\
\000\000\000\000\098\000\097\000\000\000\000\000\000\000\000\000\
\000\000\000\000\227\000\229\000\233\000\000\000\238\000\254\000\
\000\000\000\000\023\000\038\000\000\000\000\000\042\000\000\000\
\000\000\037\000\159\000\000\000\154\000\153\000\152\000\000\000\
\000\000\000\000\000\000\000\000\000\000\188\000\186\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\200\000\215\000\214\000\216\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\109\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\106\000\000\000\115\000\000\000\000\000\000\000\000\000\000\000\
\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\240\000\000\000\000\000\031\000\029\000\046\000\
\044\000\000\000\000\000\158\000\000\000\151\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\203\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\017\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\059\000\084\000\090\000\089\000\
\088\000\087\000\000\000\000\000\076\000\053\000\049\000\050\000\
\000\000\000\000\111\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\096\000\000\000\000\000\000\000\
\000\000\099\000\000\000\000\000\234\000\000\000\000\000\235\000\
\000\000\228\000\000\000\000\000\000\000\255\000\000\000\252\000\
\253\000\246\000\000\000\242\000\000\000\243\000\039\000\040\000\
\000\000\000\000\000\000\000\000\000\000\213\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\000\000\000\
\072\000\000\000\000\000\113\000\112\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\133\000\107\000\132\000\
\000\000\000\000\000\000\000\000\000\000\000\000\239\000\000\000\
\000\000\000\000\000\000\000\000\147\000\149\000\000\000\000\000\
\000\000\000\000\000\000\221\000\160\000\000\000\000\000\000\000\
\065\000\000\000\062\000\061\000\000\000\000\000\000\000\000\000\
\116\000\117\000\000\000\000\000\000\000\000\000\000\000\000\000\
\120\000\000\000\000\000\000\000\000\000\000\000\236\000\237\000\
\244\000\000\000\000\000\189\000\000\000\191\000\222\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\127\000\003\001\001\001\
\232\000\230\000\000\000\000\000\000\000\000\000\000\000\218\000\
\067\000\000\000\000\000\063\000\129\000\000\000\000\000\000\000\
\138\000\134\000\135\000\000\000\000\000\000\000\000\000\000\000\
\143\000\000\000\000\000\000\000\000\000\071\000\000\000\000\000\
\000\000\000\000\136\000\144\000\000\000\000\000\245\000\247\000\
\000\000\000\000\000\000\000\000\000\000\000\000\140\000\069\000\
\131\000\145\000\146\000"

let yydgoto = "\002\000\
\014\000\015\000\115\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\120\000\
\116\000\051\000\052\000\117\000\118\000\054\000\039\000\121\000\
\122\000\088\000\173\000\091\001\184\000\092\001\093\001\201\000\
\209\001\031\001\210\001\253\000\177\000\100\001\062\000\175\000\
\028\000\041\000\178\000\097\001\063\000\064\000\195\000\032\001\
\033\001\034\001\035\001\225\000\036\001\041\001\251\001\022\002\
\023\002\024\002\038\002\025\002\201\001\089\000\202\001\203\001\
\241\001\204\001\202\000\203\000\204\000\230\001\205\000\206\000\
\207\000\051\001\052\001\140\001\053\001\142\001\138\001\208\000\
\228\001"

let yysindex = "\057\000\
\145\008\000\000\160\255\031\255\058\255\058\255\058\255\058\255\
\058\255\058\255\058\255\058\255\058\255\000\000\153\010\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\092\255\000\000\094\255\
\104\255\111\255\116\255\139\255\191\015\164\255\000\000\000\000\
\147\255\000\000\188\255\167\255\213\254\035\255\193\255\213\255\
\202\255\223\255\227\255\000\000\000\000\231\255\000\000\000\000\
\062\255\007\000\041\000\043\000\053\000\000\000\027\000\000\000\
\030\255\191\015\191\015\191\015\191\015\191\015\139\000\000\000\
\000\000\000\000\000\000\000\000\236\255\034\255\037\255\166\014\
\038\255\191\015\191\015\191\015\191\015\255\014\048\000\085\018\
\000\000\037\000\144\000\191\015\187\255\191\015\160\000\161\000\
\000\000\160\000\161\000\102\015\058\000\102\015\130\000\058\255\
\058\255\000\000\149\014\094\000\191\015\191\015\059\255\000\000\
\000\000\000\000\121\000\000\000\142\255\000\000\096\000\163\000\
\244\255\000\000\143\000\150\000\115\000\016\015\000\000\137\255\
\191\015\000\000\187\255\000\000\230\000\000\000\227\015\000\000\
\191\015\143\014\183\000\183\000\183\000\000\000\070\014\191\015\
\191\015\191\015\191\015\191\015\191\015\191\015\191\015\191\015\
\191\015\191\015\191\015\191\015\159\255\191\015\191\015\191\015\
\191\015\191\015\191\015\191\015\191\015\191\015\191\015\121\255\
\000\000\000\000\182\000\184\000\178\000\000\000\196\000\191\000\
\014\000\000\000\196\000\031\000\139\000\199\000\000\000\192\000\
\000\000\197\000\204\000\000\000\000\000\000\000\130\255\085\018\
\130\255\085\018\000\000\000\000\163\255\191\015\191\015\059\255\
\203\000\222\000\000\000\000\000\000\000\103\255\000\000\000\000\
\187\255\210\255\000\000\000\000\191\015\191\015\000\000\191\015\
\191\015\000\000\000\000\209\016\000\000\000\000\000\000\085\018\
\045\000\210\000\211\000\191\015\063\016\000\000\000\000\208\000\
\140\018\143\014\172\004\172\004\027\009\027\009\239\000\239\000\
\085\255\239\000\239\000\113\018\000\000\000\000\000\000\000\000\
\159\255\159\255\159\255\159\255\017\008\166\018\192\018\218\018\
\172\004\172\004\001\000\001\000\085\255\085\255\085\255\000\000\
\065\000\191\015\187\255\112\000\037\001\248\255\161\000\229\000\
\027\000\187\255\112\000\112\000\000\000\177\255\215\000\000\000\
\221\000\052\001\191\015\053\001\226\000\039\255\237\000\238\000\
\000\000\184\255\000\000\062\001\254\000\159\255\191\015\049\001\
\000\000\003\016\093\017\066\000\059\255\059\255\040\255\096\001\
\016\001\084\000\000\000\024\001\040\001\000\000\000\000\000\000\
\000\000\023\001\028\001\000\000\191\015\000\000\191\015\191\015\
\239\010\035\001\000\000\241\255\241\255\000\000\118\000\159\255\
\159\255\159\255\159\255\159\255\159\255\159\255\159\255\159\255\
\159\255\000\000\000\000\000\000\058\001\063\001\067\001\069\001\
\071\001\075\001\000\000\112\000\000\000\000\000\000\000\000\000\
\000\000\000\000\191\015\027\000\000\000\000\000\000\000\000\000\
\159\255\191\015\000\000\099\000\191\015\116\001\023\255\035\016\
\189\255\191\015\217\254\100\255\000\000\130\255\039\255\191\015\
\130\255\000\000\194\008\244\016\000\000\059\255\096\001\000\000\
\222\000\000\000\054\001\059\255\194\255\000\000\191\015\000\000\
\000\000\000\000\084\000\000\000\064\001\000\000\000\000\000\000\
\085\018\100\016\077\000\191\015\132\001\000\000\089\001\115\014\
\100\009\012\000\249\003\241\255\241\255\089\001\089\001\089\001\
\143\015\148\001\191\015\191\015\146\001\059\255\000\000\085\018\
\000\000\161\012\023\017\000\000\000\000\079\000\073\001\191\015\
\187\255\130\255\191\015\187\255\137\016\000\000\000\000\000\000\
\085\018\131\001\159\255\070\001\151\001\237\254\000\000\124\001\
\103\000\126\017\112\001\191\015\000\000\000\000\185\015\191\015\
\103\001\132\001\170\001\000\000\000\000\130\255\085\018\104\001\
\000\000\130\001\000\000\000\000\119\001\203\000\159\255\139\001\
\000\000\000\000\029\018\175\001\188\001\085\018\147\001\133\001\
\000\000\229\018\127\001\150\001\059\255\195\001\000\000\000\000\
\000\000\135\001\159\017\000\000\225\017\000\000\000\000\138\001\
\132\001\141\001\191\015\159\255\218\001\242\018\159\255\191\015\
\191\015\130\255\012\255\191\015\211\001\000\000\000\000\000\000\
\000\000\000\000\191\015\152\001\191\015\191\015\132\001\000\000\
\000\000\058\017\200\012\000\000\000\000\006\019\085\018\057\018\
\000\000\000\000\000\000\085\018\191\015\153\001\211\001\213\001\
\000\000\192\017\084\000\085\018\085\018\000\000\159\255\159\255\
\191\015\255\017\000\000\000\000\155\001\211\001\000\000\000\000\
\018\019\031\019\085\018\130\255\130\255\211\001\000\000\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\011\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\237\011\000\000\000\000\186\013\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\212\013\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\198\000\000\000\
\000\000\000\000\000\000\000\000\031\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\012\
\000\000\227\013\000\000\000\000\000\000\000\000\000\000\104\000\
\000\000\000\000\104\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\119\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\009\121\001\210\001\043\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\154\001\000\000\000\000\002\014\000\000\
\000\000\000\000\017\014\000\000\174\016\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\255\051\013\
\009\255\099\013\000\000\000\000\173\010\000\000\000\000\000\000\
\119\013\093\000\000\000\000\000\000\000\238\010\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\209\009\120\009\254\005\087\006\098\007\187\007\154\004\243\004\
\132\002\076\005\165\005\011\010\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\198\008\109\008\020\008\
\176\006\009\007\232\003\065\004\221\002\054\003\143\003\000\000\
\000\000\000\000\000\000\043\014\000\000\000\000\000\000\139\013\
\089\011\000\000\043\014\043\014\000\000\138\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\011\109\011\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\000\
\000\000\000\000\000\000\080\000\088\007\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\014\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\011\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\131\000\000\000\000\000\000\000\
\000\000\000\000\144\255\000\000\000\000\022\000\000\000\000\000\
\016\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\012\000\000\000\000\000\000\173\010\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\000\000\000\000\000\000\216\001\000\000\117\009\000\000\
\196\255\102\000\057\001\102\007\177\007\001\010\143\011\228\014\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\171\013\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\131\255\000\000\000\000\000\000\000\000\000\000\000\000\
\149\001\000\000\000\000\092\010\217\001\238\010\000\000\000\000\
\000\000\000\000\157\011\000\000\000\000\000\000\000\000\000\000\
\000\000\022\255\000\000\000\000\000\000\009\255\160\012\112\012\
\000\000\208\012\000\000\000\000\000\000\247\012\000\000\155\255\
\000\000\000\000\000\000\000\000\075\255\161\001\000\000\000\000\
\000\000\000\000\000\000\173\010\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\157\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\106\255\000\000\000\000\226\001\000\000\000\000\000\000\
\000\000\000\000\000\000\222\011\000\000\000\000\176\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\242\001\000\000\
\000\000\000\000\000\000\186\001\000\000\000\000\047\255\000\000\
\000\000\000\000\000\000\033\255\032\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\192\001\000\000\000\000\
\000\000\000\000\002\002\011\255\087\255\194\001\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\008\000\012\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\254\255\000\000\185\002\124\002\084\002\000\000\165\255\000\000\
\082\002\176\255\000\000\013\000\199\002\000\000\212\001\064\255\
\000\000\070\255\000\000\038\014\203\002\000\000\007\255\205\002\
\000\000\000\000\034\002\000\000\000\000\243\002\197\002\000\000\
\193\001\248\254\000\000\072\255\000\000\085\001\000\000\000\000\
\021\001\025\001\000\000\172\254\000\000\000\000\080\001\081\001\
\000\000\144\254\023\002\219\254\000\000\000\000\000\000\198\001\
\199\001\000\000\000\000\000\000\000\000\000\000\129\254\024\002\
\000\000"

let yytablesize = 5229
let yytable = "\135\000\
\038\000\138\000\139\000\140\000\141\000\143\000\037\001\044\001\
\130\001\185\000\021\000\195\001\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\053\000\116\001\095\000\101\001\
\105\001\104\000\192\000\104\000\194\000\194\000\113\000\040\000\
\018\002\130\000\097\000\104\000\132\000\136\000\220\000\115\001\
\131\001\031\000\096\000\032\000\106\001\220\000\224\000\223\000\
\224\000\223\000\048\001\033\000\176\001\049\001\034\000\035\000\
\229\000\001\000\042\000\197\000\050\001\106\000\036\000\142\000\
\233\000\234\000\235\000\236\000\237\000\238\000\239\000\240\000\
\241\000\242\000\243\000\244\000\087\000\254\000\255\000\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\198\000\
\189\001\239\001\171\000\104\000\225\000\104\000\019\002\137\000\
\108\000\183\000\108\000\183\000\098\000\104\000\177\001\108\000\
\217\000\119\000\169\001\123\000\124\000\125\000\184\001\050\000\
\189\000\037\000\224\000\223\000\114\000\042\001\043\001\131\000\
\099\000\113\000\133\000\137\000\030\001\132\001\104\000\107\000\
\226\000\139\000\022\001\170\000\031\000\172\000\032\000\147\001\
\023\001\221\000\024\001\182\000\199\000\182\000\033\000\153\000\
\200\000\034\000\035\000\065\001\157\000\104\000\239\001\104\000\
\025\001\036\000\047\001\040\002\026\001\137\000\027\001\245\000\
\029\000\119\001\246\000\028\001\247\000\248\000\030\000\222\000\
\029\001\104\000\090\000\031\000\048\001\032\000\108\000\049\001\
\223\000\065\000\096\001\066\000\174\001\033\000\050\001\232\000\
\034\000\035\000\182\001\029\000\104\000\067\000\186\001\001\002\
\036\000\108\000\036\002\193\001\068\000\156\000\031\000\128\000\
\032\000\069\000\112\001\128\000\037\000\128\000\054\001\008\001\
\033\000\128\000\113\000\034\000\035\000\104\000\124\001\030\001\
\130\000\036\002\108\000\036\000\130\000\031\000\210\000\032\000\
\070\000\110\000\038\001\091\000\211\000\214\001\128\000\033\000\
\249\000\250\000\034\000\035\000\145\001\251\000\146\001\224\000\
\105\001\130\000\036\000\037\000\252\000\119\001\039\001\221\001\
\095\001\120\001\094\000\040\001\056\001\092\000\179\001\058\001\
\059\001\038\001\211\000\031\000\106\001\032\000\107\001\211\000\
\084\001\108\001\211\000\093\000\180\001\033\000\037\000\102\001\
\034\000\035\000\168\001\242\001\100\000\039\001\101\000\021\000\
\036\000\171\001\211\000\057\000\224\000\102\000\199\000\103\001\
\104\001\181\001\021\000\058\000\105\000\037\000\105\000\185\001\
\105\000\105\000\105\000\072\001\021\000\021\000\021\000\021\000\
\021\000\083\001\103\000\104\000\021\000\021\000\194\001\105\000\
\021\000\059\000\021\000\153\000\079\001\080\001\081\001\017\002\
\157\000\129\000\060\000\199\001\214\000\031\000\072\001\032\000\
\108\000\061\000\215\000\037\000\165\000\166\000\167\000\033\000\
\207\001\076\001\034\000\035\000\136\001\077\001\078\001\079\001\
\080\001\081\001\036\000\021\000\137\001\225\000\015\001\219\001\
\002\000\056\000\222\001\172\001\016\001\225\000\225\000\056\000\
\105\000\225\000\109\000\173\001\110\000\108\000\144\000\015\001\
\085\001\050\002\051\002\235\001\225\000\017\001\111\000\237\001\
\182\000\086\001\168\000\225\000\225\000\061\001\225\000\225\000\
\225\000\225\000\225\000\062\001\225\000\187\000\225\000\225\000\
\225\000\225\000\225\000\225\000\225\000\037\000\202\000\087\001\
\169\000\210\000\045\001\202\000\202\000\202\000\202\000\082\001\
\128\001\202\000\202\000\088\001\089\001\061\001\090\001\061\001\
\174\000\176\000\010\002\198\001\212\000\217\001\202\000\015\002\
\016\002\212\000\212\000\020\002\212\000\225\000\220\001\193\000\
\072\001\223\001\026\002\225\000\028\002\029\002\212\000\045\001\
\085\000\074\001\075\001\076\001\212\000\232\001\085\000\077\001\
\078\001\079\001\080\001\081\001\034\002\156\000\156\000\045\000\
\209\000\218\000\211\001\212\001\150\001\045\000\156\000\156\000\
\043\002\183\000\156\000\123\000\156\000\124\000\156\000\156\000\
\156\000\123\000\156\000\124\000\125\000\156\000\126\000\216\000\
\127\000\213\000\125\000\128\000\156\000\156\000\217\000\156\000\
\156\000\156\000\156\000\156\000\227\000\156\000\156\000\156\000\
\156\000\156\000\156\000\156\000\156\000\156\000\157\000\010\001\
\156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
\156\000\156\000\156\000\156\000\156\000\156\000\012\001\013\001\
\011\001\156\000\156\000\156\000\156\000\156\000\014\001\156\000\
\156\000\156\000\156\000\156\000\019\001\156\000\156\000\018\001\
\156\000\020\001\156\000\045\001\156\000\156\000\199\000\199\000\
\021\001\046\001\063\001\064\001\067\001\094\001\099\001\199\000\
\199\000\153\000\181\000\199\000\109\001\199\000\157\000\199\000\
\199\000\199\000\110\001\199\000\111\001\113\001\199\000\114\001\
\163\000\164\000\165\000\166\000\167\000\199\000\199\000\117\001\
\199\000\199\000\199\000\199\000\199\000\118\001\199\000\199\000\
\199\000\199\000\199\000\199\000\199\000\199\000\199\000\121\001\
\122\001\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
\199\000\199\000\199\000\199\000\199\000\199\000\199\000\125\001\
\133\001\135\001\199\000\199\000\199\000\199\000\199\000\139\001\
\199\000\199\000\199\000\199\000\199\000\143\001\199\000\199\000\
\141\001\199\000\144\001\199\000\149\001\199\000\199\000\210\000\
\182\000\182\000\175\001\161\001\210\000\210\000\210\000\210\000\
\162\001\182\000\182\000\166\000\163\001\182\000\164\001\182\000\
\165\001\182\000\182\000\182\000\166\001\182\000\192\001\210\000\
\182\000\196\001\200\001\072\001\208\001\213\001\225\001\182\000\
\182\000\227\001\182\000\182\000\182\000\182\000\182\000\218\001\
\182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
\182\000\229\001\231\001\182\000\182\000\182\000\182\000\182\000\
\182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
\234\001\238\001\240\001\243\001\182\000\182\000\182\000\182\000\
\182\000\244\001\182\000\182\000\182\000\182\000\182\000\245\001\
\182\000\182\000\247\001\182\000\249\001\182\000\250\001\182\000\
\182\000\183\000\183\000\255\001\252\001\038\001\253\001\002\002\
\003\002\006\002\183\000\183\000\163\000\012\002\183\000\009\002\
\183\000\021\002\183\000\183\000\183\000\037\002\183\000\027\002\
\219\000\183\000\045\002\035\002\114\000\231\000\052\000\219\000\
\183\000\183\000\141\000\183\000\183\000\183\000\183\000\183\000\
\118\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\220\000\121\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\119\000\141\000\122\000\142\000\183\000\183\000\183\000\
\183\000\183\000\056\000\183\000\183\000\183\000\183\000\183\000\
\188\000\183\000\183\000\009\001\183\000\055\001\183\000\057\001\
\183\000\183\000\181\000\181\000\186\000\180\000\179\000\167\001\
\098\001\112\000\196\000\181\000\181\000\164\000\183\001\181\000\
\000\002\181\000\046\002\181\000\181\000\181\000\047\002\181\000\
\007\002\008\002\181\000\129\001\190\001\191\001\000\000\134\001\
\000\000\181\000\181\000\000\000\181\000\181\000\181\000\181\000\
\181\000\000\000\181\000\181\000\181\000\181\000\181\000\181\000\
\181\000\181\000\181\000\000\000\000\000\181\000\181\000\181\000\
\181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
\181\000\181\000\000\000\000\000\000\000\000\000\181\000\181\000\
\181\000\181\000\181\000\000\000\181\000\181\000\181\000\181\000\
\181\000\000\000\181\000\181\000\000\000\181\000\000\000\181\000\
\000\000\181\000\181\000\166\000\166\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\166\000\166\000\165\000\000\000\
\166\000\000\000\166\000\000\000\166\000\166\000\166\000\000\000\
\166\000\000\000\000\000\166\000\000\000\000\000\000\000\000\000\
\000\000\000\000\166\000\166\000\000\000\166\000\166\000\166\000\
\166\000\166\000\000\000\166\000\166\000\166\000\166\000\166\000\
\166\000\166\000\166\000\166\000\000\000\000\000\166\000\166\000\
\166\000\166\000\166\000\166\000\166\000\166\000\000\000\166\000\
\166\000\166\000\166\000\000\000\000\000\000\000\000\000\166\000\
\166\000\166\000\166\000\166\000\000\000\166\000\166\000\166\000\
\166\000\166\000\000\000\166\000\166\000\000\000\166\000\000\000\
\166\000\000\000\166\000\166\000\163\000\163\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\163\000\163\000\161\000\
\000\000\163\000\000\000\163\000\000\000\163\000\163\000\163\000\
\000\000\163\000\000\000\000\000\163\000\000\000\000\000\000\000\
\000\000\000\000\000\000\163\000\163\000\000\000\163\000\163\000\
\163\000\163\000\163\000\000\000\163\000\163\000\163\000\163\000\
\163\000\163\000\163\000\163\000\163\000\000\000\000\000\163\000\
\163\000\163\000\163\000\163\000\163\000\163\000\163\000\000\000\
\163\000\163\000\163\000\163\000\000\000\000\000\000\000\000\000\
\163\000\163\000\163\000\163\000\163\000\000\000\163\000\163\000\
\163\000\163\000\163\000\000\000\163\000\163\000\000\000\163\000\
\000\000\163\000\000\000\163\000\163\000\164\000\164\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\164\000\164\000\
\162\000\000\000\164\000\000\000\164\000\000\000\164\000\164\000\
\164\000\000\000\164\000\000\000\000\000\164\000\000\000\000\000\
\000\000\000\000\000\000\000\000\164\000\164\000\000\000\164\000\
\164\000\164\000\164\000\164\000\000\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\000\000\000\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\000\000\164\000\164\000\164\000\164\000\000\000\000\000\000\000\
\000\000\164\000\164\000\164\000\164\000\164\000\000\000\164\000\
\164\000\164\000\164\000\164\000\000\000\164\000\164\000\000\000\
\164\000\000\000\164\000\000\000\164\000\164\000\165\000\165\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\165\000\
\165\000\167\000\000\000\165\000\000\000\165\000\000\000\165\000\
\165\000\165\000\000\000\165\000\000\000\000\000\165\000\000\000\
\000\000\000\000\000\000\000\000\000\000\165\000\165\000\000\000\
\165\000\165\000\165\000\165\000\165\000\000\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\165\000\165\000\000\000\
\000\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\000\000\165\000\165\000\165\000\165\000\000\000\000\000\
\000\000\000\000\165\000\165\000\165\000\165\000\165\000\000\000\
\165\000\165\000\165\000\165\000\165\000\000\000\165\000\165\000\
\000\000\165\000\000\000\165\000\000\000\165\000\165\000\161\000\
\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\161\000\161\000\168\000\000\000\161\000\000\000\161\000\000\000\
\161\000\161\000\161\000\000\000\161\000\000\000\000\000\161\000\
\000\000\000\000\000\000\000\000\000\000\000\000\161\000\161\000\
\000\000\161\000\161\000\161\000\161\000\161\000\000\000\161\000\
\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\
\000\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\
\161\000\161\000\000\000\161\000\161\000\161\000\161\000\000\000\
\000\000\000\000\000\000\161\000\161\000\161\000\161\000\161\000\
\000\000\161\000\161\000\072\001\000\000\000\000\000\000\161\000\
\161\000\000\000\161\000\000\000\161\000\000\000\161\000\161\000\
\162\000\162\000\077\001\078\001\079\001\080\001\081\001\000\000\
\000\000\162\000\162\000\170\000\000\000\162\000\000\000\162\000\
\000\000\162\000\162\000\162\000\000\000\162\000\000\000\000\000\
\162\000\000\000\000\000\000\000\000\000\000\000\000\000\162\000\
\162\000\000\000\162\000\162\000\162\000\162\000\162\000\000\000\
\162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
\162\000\000\000\000\000\162\000\162\000\162\000\162\000\162\000\
\162\000\162\000\162\000\000\000\162\000\162\000\162\000\162\000\
\000\000\000\000\000\000\000\000\162\000\162\000\162\000\162\000\
\162\000\000\000\162\000\162\000\000\000\000\000\000\000\000\000\
\162\000\162\000\000\000\162\000\000\000\162\000\000\000\162\000\
\162\000\167\000\167\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\167\000\167\000\169\000\000\000\167\000\000\000\
\167\000\000\000\167\000\167\000\167\000\000\000\167\000\000\000\
\000\000\167\000\000\000\000\000\000\000\000\000\000\000\000\000\
\167\000\167\000\000\000\167\000\167\000\167\000\167\000\167\000\
\000\000\167\000\167\000\167\000\167\000\167\000\167\000\167\000\
\167\000\167\000\000\000\000\000\167\000\167\000\167\000\167\000\
\167\000\167\000\167\000\167\000\000\000\167\000\167\000\167\000\
\167\000\000\000\000\000\000\000\000\000\167\000\167\000\167\000\
\167\000\167\000\000\000\000\000\151\000\152\000\153\000\154\000\
\155\000\167\000\167\000\157\000\167\000\000\000\167\000\000\000\
\167\000\167\000\168\000\168\000\000\000\163\000\164\000\165\000\
\166\000\167\000\000\000\168\000\168\000\173\000\000\000\168\000\
\000\000\168\000\000\000\168\000\168\000\168\000\000\000\168\000\
\000\000\000\000\168\000\000\000\000\000\000\000\000\000\000\000\
\000\000\168\000\168\000\000\000\168\000\168\000\168\000\168\000\
\168\000\000\000\168\000\168\000\168\000\168\000\168\000\168\000\
\168\000\168\000\168\000\000\000\000\000\168\000\168\000\168\000\
\168\000\168\000\168\000\168\000\168\000\000\000\168\000\168\000\
\168\000\168\000\000\000\000\000\000\000\000\000\168\000\168\000\
\168\000\168\000\168\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\168\000\168\000\000\000\168\000\000\000\168\000\
\000\000\168\000\168\000\170\000\170\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\170\000\170\000\174\000\000\000\
\170\000\000\000\170\000\000\000\170\000\170\000\170\000\000\000\
\170\000\000\000\000\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\170\000\170\000\000\000\170\000\170\000\170\000\
\170\000\170\000\000\000\170\000\170\000\170\000\170\000\170\000\
\170\000\170\000\170\000\170\000\000\000\000\000\170\000\170\000\
\170\000\170\000\170\000\170\000\170\000\170\000\000\000\170\000\
\170\000\170\000\170\000\000\000\000\000\000\000\000\000\170\000\
\170\000\170\000\170\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\170\000\170\000\000\000\170\000\000\000\
\170\000\000\000\170\000\170\000\169\000\169\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\169\000\169\000\172\000\
\000\000\169\000\000\000\169\000\000\000\169\000\169\000\169\000\
\000\000\169\000\000\000\000\000\169\000\000\000\000\000\000\000\
\000\000\000\000\000\000\169\000\169\000\000\000\169\000\169\000\
\169\000\169\000\169\000\000\000\169\000\169\000\169\000\169\000\
\169\000\169\000\169\000\169\000\169\000\000\000\000\000\169\000\
\169\000\169\000\169\000\169\000\169\000\169\000\169\000\000\000\
\169\000\169\000\169\000\169\000\000\000\000\000\000\000\000\000\
\169\000\169\000\169\000\169\000\169\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\169\000\169\000\000\000\169\000\
\000\000\169\000\000\000\169\000\169\000\173\000\173\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\173\000\173\000\
\171\000\000\000\173\000\000\000\173\000\000\000\173\000\173\000\
\173\000\000\000\173\000\000\000\000\000\173\000\000\000\000\000\
\000\000\000\000\000\000\000\000\173\000\173\000\000\000\173\000\
\173\000\173\000\173\000\173\000\000\000\173\000\173\000\173\000\
\173\000\173\000\173\000\173\000\173\000\173\000\000\000\000\000\
\173\000\173\000\173\000\173\000\173\000\173\000\000\000\000\000\
\000\000\000\000\000\000\173\000\173\000\000\000\000\000\000\000\
\000\000\173\000\173\000\173\000\173\000\173\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\173\000\173\000\000\000\
\173\000\000\000\173\000\000\000\173\000\173\000\174\000\174\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\000\
\174\000\175\000\000\000\174\000\000\000\174\000\000\000\174\000\
\174\000\174\000\000\000\174\000\000\000\000\000\174\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\000\174\000\000\000\
\174\000\174\000\174\000\174\000\174\000\000\000\174\000\174\000\
\174\000\174\000\174\000\174\000\174\000\174\000\174\000\000\000\
\000\000\174\000\174\000\174\000\174\000\174\000\174\000\000\000\
\000\000\000\000\000\000\000\000\174\000\174\000\000\000\000\000\
\000\000\000\000\174\000\174\000\174\000\174\000\174\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\174\000\174\000\
\000\000\174\000\000\000\174\000\000\000\174\000\174\000\172\000\
\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\172\000\172\000\176\000\000\000\172\000\000\000\172\000\000\000\
\172\000\172\000\172\000\000\000\172\000\000\000\000\000\172\000\
\000\000\000\000\000\000\000\000\000\000\000\000\172\000\172\000\
\000\000\172\000\172\000\172\000\172\000\172\000\000\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\000\000\000\000\172\000\172\000\172\000\172\000\172\000\172\000\
\000\000\000\000\000\000\000\000\000\000\172\000\172\000\000\000\
\000\000\000\000\000\000\172\000\172\000\172\000\172\000\172\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\172\000\
\172\000\000\000\172\000\000\000\172\000\000\000\172\000\172\000\
\171\000\171\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\171\000\171\000\177\000\000\000\171\000\000\000\171\000\
\000\000\171\000\171\000\171\000\000\000\171\000\000\000\000\000\
\171\000\000\000\000\000\000\000\000\000\000\000\000\000\171\000\
\171\000\000\000\171\000\171\000\171\000\171\000\171\000\000\000\
\171\000\171\000\171\000\171\000\171\000\171\000\171\000\171\000\
\171\000\000\000\000\000\171\000\171\000\171\000\171\000\171\000\
\171\000\000\000\000\000\000\000\000\000\000\000\171\000\171\000\
\000\000\000\000\000\000\000\000\171\000\171\000\171\000\171\000\
\171\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\171\000\171\000\000\000\171\000\000\000\171\000\000\000\171\000\
\171\000\175\000\175\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\175\000\175\000\178\000\000\000\175\000\000\000\
\175\000\000\000\175\000\175\000\175\000\000\000\175\000\000\000\
\000\000\175\000\000\000\000\000\000\000\000\000\000\000\000\000\
\175\000\175\000\000\000\175\000\175\000\175\000\175\000\175\000\
\000\000\175\000\175\000\175\000\175\000\175\000\175\000\175\000\
\175\000\175\000\000\000\000\000\175\000\175\000\201\000\000\000\
\175\000\175\000\000\000\201\000\201\000\201\000\201\000\175\000\
\175\000\201\000\201\000\000\000\204\000\175\000\175\000\175\000\
\000\000\204\000\204\000\204\000\204\000\000\000\201\000\204\000\
\204\000\175\000\175\000\000\000\175\000\000\000\175\000\000\000\
\175\000\175\000\176\000\176\000\204\000\000\000\000\000\000\000\
\000\000\000\000\000\000\176\000\176\000\179\000\000\000\176\000\
\000\000\176\000\000\000\176\000\176\000\176\000\000\000\176\000\
\000\000\000\000\176\000\000\000\000\000\000\000\000\000\000\000\
\000\000\176\000\176\000\000\000\176\000\176\000\176\000\176\000\
\176\000\000\000\176\000\176\000\176\000\176\000\176\000\176\000\
\176\000\176\000\176\000\000\000\000\000\176\000\176\000\205\000\
\000\000\176\000\176\000\000\000\205\000\205\000\205\000\205\000\
\176\000\176\000\205\000\205\000\000\000\000\000\176\000\176\000\
\176\000\000\000\000\000\000\000\000\000\000\000\000\000\205\000\
\000\000\000\000\176\000\176\000\000\000\176\000\000\000\176\000\
\000\000\176\000\176\000\177\000\177\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\177\000\177\000\180\000\000\000\
\177\000\000\000\177\000\000\000\177\000\177\000\177\000\000\000\
\177\000\000\000\000\000\177\000\000\000\000\000\000\000\000\000\
\000\000\000\000\177\000\177\000\000\000\177\000\177\000\177\000\
\177\000\177\000\000\000\177\000\177\000\177\000\177\000\177\000\
\177\000\177\000\177\000\177\000\000\000\000\000\177\000\177\000\
\000\000\000\000\000\000\072\001\000\000\000\000\000\000\073\001\
\000\000\177\000\177\000\000\000\074\001\075\001\076\001\177\000\
\177\000\177\000\077\001\078\001\079\001\080\001\081\001\000\000\
\000\000\000\000\000\000\177\000\177\000\000\000\177\000\000\000\
\177\000\000\000\177\000\177\000\178\000\178\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\178\000\178\000\184\000\
\000\000\178\000\000\000\178\000\000\000\178\000\178\000\178\000\
\000\000\178\000\000\000\000\000\178\000\000\000\000\000\000\000\
\000\000\000\000\000\000\178\000\178\000\000\000\178\000\178\000\
\178\000\178\000\178\000\000\000\178\000\178\000\178\000\178\000\
\178\000\178\000\178\000\178\000\178\000\003\000\000\000\178\000\
\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\178\000\178\000\000\000\000\000\000\000\000\000\
\178\000\178\000\005\000\006\000\007\000\008\000\009\000\000\000\
\000\000\000\000\010\000\011\000\178\000\178\000\012\000\178\000\
\013\000\178\000\000\000\178\000\178\000\179\000\179\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\179\000\179\000\
\185\000\000\000\179\000\000\000\179\000\000\000\179\000\179\000\
\179\000\000\000\179\000\000\000\000\000\179\000\000\000\000\000\
\000\000\000\000\000\000\000\000\179\000\179\000\000\000\179\000\
\179\000\179\000\179\000\179\000\000\000\179\000\179\000\179\000\
\179\000\179\000\179\000\179\000\179\000\179\000\000\000\000\000\
\179\000\179\000\000\000\000\000\072\001\000\000\000\000\000\000\
\187\001\000\000\000\000\179\000\179\000\074\001\075\001\076\001\
\000\000\179\000\155\000\077\001\078\001\079\001\080\001\081\001\
\000\000\000\000\000\000\000\000\000\000\179\000\179\000\000\000\
\179\000\000\000\179\000\000\000\179\000\179\000\180\000\180\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\180\000\
\180\000\000\000\000\000\180\000\000\000\180\000\000\000\180\000\
\180\000\180\000\000\000\180\000\000\000\000\000\180\000\000\000\
\000\000\000\000\000\000\000\000\000\000\180\000\180\000\000\000\
\180\000\180\000\180\000\180\000\180\000\000\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\147\000\
\148\000\180\000\180\000\151\000\152\000\153\000\154\000\155\000\
\000\000\000\000\157\000\002\001\180\000\180\000\000\000\000\000\
\000\000\161\000\162\000\000\000\163\000\164\000\165\000\166\000\
\167\000\000\000\000\000\000\000\000\000\000\000\180\000\180\000\
\000\000\180\000\000\000\180\000\000\000\180\000\180\000\184\000\
\184\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\184\000\184\000\000\000\000\000\184\000\000\000\184\000\000\000\
\184\000\184\000\184\000\000\000\184\000\000\000\000\000\184\000\
\000\000\000\000\000\000\000\000\000\000\000\000\184\000\184\000\
\055\000\184\000\184\000\184\000\184\000\184\000\072\001\184\000\
\184\000\184\000\184\000\184\000\184\000\184\000\184\000\184\000\
\075\001\076\001\184\000\184\000\126\000\077\001\078\001\079\001\
\080\001\081\001\000\000\209\000\000\000\184\000\184\000\000\000\
\209\000\209\000\209\000\209\000\000\000\000\000\209\000\209\000\
\209\000\209\000\209\000\000\000\000\000\000\000\000\000\184\000\
\184\000\000\000\184\000\209\000\184\000\000\000\184\000\184\000\
\185\000\185\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\185\000\185\000\000\000\000\000\185\000\000\000\185\000\
\000\000\185\000\185\000\185\000\000\000\185\000\000\000\000\000\
\185\000\000\000\000\000\000\000\000\000\241\000\000\000\185\000\
\185\000\000\000\185\000\185\000\185\000\185\000\185\000\000\000\
\185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
\185\000\000\000\000\000\185\000\000\000\000\000\000\000\000\000\
\000\000\000\000\155\000\155\000\000\000\000\000\185\000\185\000\
\000\000\000\000\000\000\155\000\155\000\000\000\000\000\155\000\
\000\000\155\000\000\000\155\000\155\000\155\000\000\000\155\000\
\185\000\185\000\155\000\185\000\000\000\185\000\000\000\185\000\
\185\000\155\000\155\000\000\000\155\000\155\000\155\000\155\000\
\155\000\000\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\000\000\248\000\000\000\000\000\206\000\
\000\000\000\000\000\000\000\000\206\000\206\000\206\000\206\000\
\155\000\155\000\206\000\206\000\206\000\206\000\206\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\000\
\091\000\000\000\155\000\155\000\002\001\155\000\000\000\155\000\
\000\000\155\000\155\000\000\000\002\001\002\001\000\000\000\000\
\002\001\000\000\000\000\000\000\250\000\000\000\002\001\000\000\
\002\001\000\000\000\000\002\001\000\000\000\000\000\000\000\000\
\000\000\000\000\002\001\002\001\000\000\002\001\002\001\002\001\
\002\001\002\001\000\000\002\001\000\000\002\001\002\001\002\001\
\002\001\002\001\002\001\002\001\000\000\000\000\000\000\002\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\001\249\000\000\000\000\000\002\001\
\000\000\002\001\000\000\000\000\002\001\003\000\000\000\000\000\
\000\000\000\000\000\000\002\001\002\001\126\000\000\000\000\000\
\004\000\000\000\002\001\000\000\000\000\126\000\126\000\000\000\
\000\000\126\000\005\000\006\000\007\000\008\000\009\000\126\000\
\000\000\126\000\010\000\011\000\126\000\000\000\012\000\000\000\
\013\000\000\000\000\000\126\000\126\000\000\000\126\000\126\000\
\126\000\126\000\126\000\000\000\126\000\000\000\126\000\126\000\
\126\000\126\000\126\000\126\000\126\000\251\000\000\000\000\000\
\126\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\241\000\000\000\
\126\000\000\000\126\000\000\000\000\000\126\000\241\000\241\000\
\000\000\000\000\241\000\000\000\126\000\126\000\000\000\000\000\
\241\000\148\001\241\000\126\000\000\000\241\000\000\000\000\000\
\000\000\000\000\000\000\000\000\241\000\241\000\000\000\241\000\
\241\000\241\000\241\000\241\000\000\000\241\000\000\000\241\000\
\241\000\241\000\241\000\241\000\241\000\241\000\226\000\000\000\
\000\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\000\000\157\000\047\000\
\000\000\241\000\158\000\159\000\160\000\161\000\162\000\000\000\
\163\000\164\000\165\000\166\000\167\000\248\000\241\000\000\000\
\000\000\000\000\000\000\000\000\241\000\248\000\248\000\000\000\
\000\000\248\000\000\000\000\000\000\000\000\000\000\000\248\000\
\000\000\248\000\000\000\000\000\248\000\000\000\000\000\000\000\
\000\000\000\000\000\000\248\000\248\000\000\000\248\000\248\000\
\248\000\248\000\248\000\000\000\248\000\091\000\248\000\248\000\
\248\000\248\000\248\000\248\000\248\000\250\000\000\000\070\000\
\091\000\000\000\000\000\000\000\000\000\250\000\250\000\000\000\
\000\000\250\000\091\000\091\000\091\000\091\000\091\000\250\000\
\248\000\250\000\091\000\091\000\250\000\000\000\091\000\000\000\
\091\000\000\000\000\000\250\000\250\000\248\000\250\000\250\000\
\250\000\250\000\250\000\248\000\250\000\000\000\250\000\250\000\
\250\000\250\000\250\000\250\000\250\000\249\000\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\249\000\249\000\000\000\
\000\000\249\000\000\000\000\000\000\000\000\000\000\000\249\000\
\250\000\249\000\000\000\000\000\249\000\000\000\000\000\000\000\
\000\000\000\000\000\000\249\000\249\000\250\000\249\000\249\000\
\249\000\249\000\249\000\250\000\249\000\000\000\249\000\249\000\
\249\000\249\000\249\000\249\000\249\000\207\000\000\000\068\000\
\000\000\000\000\207\000\207\000\207\000\207\000\000\000\000\000\
\207\000\207\000\207\000\207\000\207\000\000\000\251\000\000\000\
\249\000\000\000\000\000\000\000\000\000\207\000\251\000\251\000\
\000\000\000\000\251\000\000\000\000\000\249\000\000\000\000\000\
\251\000\000\000\251\000\249\000\000\000\251\000\064\000\000\000\
\000\000\018\000\000\000\000\000\251\000\251\000\000\000\251\000\
\251\000\251\000\251\000\251\000\018\000\251\000\000\000\251\000\
\251\000\251\000\251\000\251\000\251\000\251\000\018\000\018\000\
\018\000\018\000\018\000\000\000\000\000\000\000\018\000\018\000\
\000\000\000\000\018\000\000\000\018\000\000\000\080\000\226\000\
\000\000\251\000\000\000\000\000\000\000\000\000\000\000\226\000\
\226\000\000\000\000\000\226\000\000\000\000\000\251\000\000\000\
\047\000\000\000\095\000\000\000\251\000\000\000\226\000\000\000\
\000\000\047\000\000\000\000\000\047\000\226\000\226\000\000\000\
\226\000\226\000\226\000\226\000\226\000\000\000\226\000\047\000\
\226\000\226\000\226\000\226\000\226\000\226\000\226\000\047\000\
\000\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\000\000\000\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\226\000\
\070\000\000\000\000\000\000\000\000\000\226\000\100\000\000\000\
\000\000\070\000\000\000\000\000\070\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\047\000\000\000\047\000\070\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\070\000\
\000\000\070\000\070\000\070\000\070\000\070\000\000\000\000\000\
\000\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\075\000\000\000\066\000\000\000\000\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\000\000\032\000\000\000\000\000\000\000\000\000\000\000\066\000\
\000\000\066\000\066\000\066\000\066\000\066\000\000\000\000\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\068\000\000\000\000\000\092\000\000\000\000\000\000\000\000\000\
\000\000\068\000\000\000\072\001\068\000\000\000\000\000\215\001\
\000\000\000\000\027\000\000\000\074\001\075\001\076\001\068\000\
\000\000\000\000\077\001\078\001\079\001\080\001\081\001\068\000\
\000\000\068\000\068\000\068\000\068\000\068\000\000\000\064\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\064\000\073\000\072\001\064\000\000\000\000\000\031\002\000\000\
\000\000\000\000\000\000\074\001\075\001\076\001\064\000\000\000\
\077\000\077\001\078\001\079\001\080\001\081\001\064\000\000\000\
\064\000\064\000\064\000\064\000\064\000\000\000\000\000\080\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\080\000\
\000\000\000\000\057\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\095\000\000\000\000\000\080\000\000\000\
\000\000\058\000\000\000\095\000\000\000\080\000\000\000\095\000\
\080\000\080\000\080\000\080\000\080\000\000\000\080\000\000\000\
\080\000\080\000\095\000\000\000\080\000\080\000\080\000\000\000\
\000\000\095\000\000\000\000\000\095\000\095\000\095\000\095\000\
\095\000\000\000\095\000\000\000\095\000\095\000\000\000\000\000\
\095\000\095\000\095\000\103\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\103\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\
\000\000\000\000\103\000\000\000\000\000\000\000\000\000\100\000\
\000\000\103\000\000\000\100\000\103\000\103\000\103\000\103\000\
\103\000\000\000\103\000\074\000\103\000\103\000\100\000\000\000\
\103\000\103\000\103\000\074\000\000\000\100\000\000\000\074\000\
\100\000\100\000\100\000\100\000\100\000\000\000\100\000\000\000\
\100\000\100\000\074\000\000\000\100\000\100\000\100\000\000\000\
\000\000\074\000\000\000\075\000\074\000\074\000\074\000\074\000\
\074\000\000\000\074\000\075\000\074\000\074\000\000\000\075\000\
\074\000\074\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\000\000\000\000\000\000\032\000\000\000\
\000\000\075\000\000\000\000\000\075\000\075\000\075\000\075\000\
\075\000\032\000\075\000\000\000\075\000\075\000\000\000\000\000\
\075\000\075\000\075\000\032\000\032\000\032\000\032\000\032\000\
\092\000\000\000\000\000\032\000\032\000\000\000\000\000\032\000\
\000\000\032\000\000\000\092\000\000\000\000\000\000\000\027\000\
\000\000\000\000\000\000\000\000\000\000\092\000\092\000\092\000\
\092\000\092\000\027\000\000\000\000\000\092\000\092\000\000\000\
\000\000\092\000\000\000\092\000\027\000\027\000\027\000\027\000\
\027\000\000\000\000\000\000\000\027\000\027\000\073\000\000\000\
\027\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\000\000\000\000\000\000\077\000\068\001\069\001\
\070\001\071\001\000\000\073\000\073\000\073\000\073\000\073\000\
\077\000\000\000\000\000\073\000\073\000\000\000\000\000\073\000\
\000\000\073\000\077\000\077\000\077\000\077\000\077\000\057\000\
\000\000\000\000\077\000\077\000\000\000\000\000\077\000\000\000\
\077\000\000\000\057\000\000\000\000\000\230\000\058\000\000\000\
\000\000\000\000\000\000\123\001\057\000\057\000\057\000\057\000\
\057\000\058\000\000\000\000\000\057\000\057\000\000\000\000\000\
\057\000\000\000\057\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\000\000\058\000\058\000\000\000\000\000\058\000\
\000\000\058\000\000\000\000\000\000\000\151\001\152\001\153\001\
\154\001\155\001\156\001\157\001\158\001\159\001\160\001\000\000\
\145\000\146\000\147\000\148\000\149\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\000\000\157\000\000\000\000\000\
\000\000\158\000\159\000\160\000\161\000\162\000\170\001\163\000\
\164\000\165\000\166\000\167\000\190\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\231\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\134\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\072\001\000\000\000\000\
\079\000\080\000\000\000\000\000\000\000\078\000\074\001\075\001\
\076\001\205\001\000\000\081\000\077\001\078\001\079\001\080\001\
\081\001\079\000\080\000\147\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\081\000\000\000\157\000\000\000\
\000\000\000\000\158\000\159\000\160\000\161\000\162\000\082\000\
\163\000\164\000\165\000\166\000\167\000\000\000\083\000\084\000\
\226\001\000\000\000\000\085\000\000\000\000\000\191\000\000\000\
\082\000\000\000\086\000\000\000\000\000\000\000\000\000\083\000\
\084\000\000\000\000\000\000\000\085\000\000\000\000\000\000\000\
\000\000\000\000\000\000\086\000\246\001\000\000\142\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\219\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\000\000\011\002\079\000\080\000\014\002\000\000\000\000\078\000\
\000\000\000\000\208\000\000\000\000\000\081\000\000\000\208\000\
\208\000\208\000\208\000\079\000\080\000\208\000\208\000\208\000\
\208\000\208\000\000\000\000\000\000\000\000\000\081\000\000\000\
\000\000\000\000\208\000\000\000\000\000\000\000\000\000\000\000\
\000\000\082\000\000\000\000\000\041\002\042\002\000\000\000\000\
\083\000\084\000\000\000\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\082\000\000\000\086\000\000\000\000\000\000\000\
\000\000\083\000\084\000\000\000\000\000\000\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\000\181\000\072\000\
\073\000\074\000\075\000\076\000\077\000\000\000\000\000\000\000\
\000\000\031\000\000\000\032\000\000\000\078\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\034\000\035\000\
\000\000\079\000\080\000\000\000\000\000\000\000\036\000\000\000\
\000\000\000\000\000\000\000\000\081\000\000\000\000\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\000\000\079\000\080\000\000\000\000\000\000\000\083\000\
\084\000\000\000\000\000\000\000\085\000\081\000\000\000\000\000\
\000\000\037\000\000\000\086\000\000\000\000\000\000\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\236\001\078\000\000\000\
\000\000\082\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\084\000\079\000\080\000\000\000\085\000\000\000\000\000\
\206\001\000\000\000\000\000\000\086\000\081\000\000\000\000\000\
\000\000\000\000\000\000\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\152\000\153\000\154\000\155\000\156\000\000\000\
\157\000\000\000\000\000\000\000\158\000\159\000\160\000\161\000\
\162\000\082\000\163\000\164\000\165\000\166\000\167\000\000\000\
\083\000\084\000\000\000\228\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\086\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\152\000\153\000\154\000\155\000\
\156\000\000\000\157\000\000\000\000\000\000\000\158\000\159\000\
\160\000\161\000\162\000\126\001\163\000\164\000\165\000\166\000\
\167\000\000\000\000\000\000\000\000\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\152\000\153\000\154\000\155\000\
\156\000\000\000\157\000\000\000\000\000\000\000\158\000\159\000\
\160\000\161\000\162\000\178\001\163\000\164\000\165\000\166\000\
\167\000\000\000\000\000\000\000\000\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\152\000\153\000\154\000\155\000\
\156\000\000\000\157\000\000\000\000\000\000\000\158\000\159\000\
\160\000\161\000\162\000\000\000\163\000\164\000\165\000\166\000\
\167\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\000\000\157\000\000\000\
\000\000\000\000\158\000\159\000\160\000\161\000\162\000\000\000\
\163\000\164\000\165\000\166\000\167\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\001\145\000\146\000\
\147\000\148\000\149\000\150\000\151\000\152\000\153\000\154\000\
\155\000\156\000\000\000\157\000\000\000\000\000\000\000\158\000\
\159\000\160\000\161\000\162\000\000\000\163\000\164\000\165\000\
\166\000\167\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\197\001\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\152\000\153\000\154\000\155\000\156\000\000\000\
\157\000\000\000\000\000\000\000\158\000\159\000\160\000\161\000\
\162\000\000\000\163\000\164\000\165\000\166\000\167\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\001\
\156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
\156\000\156\000\156\000\156\000\000\000\156\000\000\000\000\000\
\000\000\156\000\156\000\156\000\156\000\156\000\000\000\156\000\
\156\000\156\000\156\000\156\000\000\000\000\000\156\000\000\000\
\000\000\000\000\056\000\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\152\000\153\000\154\000\155\000\156\000\000\000\
\157\000\000\000\000\000\000\000\158\000\159\000\160\000\161\000\
\162\000\000\000\163\000\164\000\165\000\166\000\167\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\001\145\000\146\000\
\147\000\148\000\149\000\150\000\151\000\152\000\153\000\154\000\
\155\000\156\000\000\000\157\000\000\000\000\000\000\000\158\000\
\159\000\160\000\161\000\162\000\000\000\163\000\164\000\165\000\
\166\000\167\000\000\000\000\000\000\000\000\000\000\000\000\000\
\188\001\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\000\000\157\000\000\000\
\000\000\000\000\158\000\159\000\160\000\161\000\162\000\000\000\
\163\000\164\000\165\000\166\000\167\000\000\000\000\000\000\000\
\000\000\000\000\000\000\216\001\145\000\146\000\147\000\148\000\
\149\000\150\000\151\000\152\000\153\000\154\000\155\000\156\000\
\000\000\157\000\000\000\000\000\000\000\158\000\159\000\160\000\
\161\000\162\000\000\000\163\000\164\000\165\000\166\000\167\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\002\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\152\000\153\000\
\154\000\155\000\156\000\000\000\157\000\000\000\000\000\000\000\
\158\000\159\000\160\000\161\000\162\000\000\000\163\000\164\000\
\165\000\166\000\167\000\000\000\000\000\000\000\000\000\127\001\
\145\000\146\000\147\000\148\000\149\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\000\000\157\000\000\000\000\000\
\000\000\158\000\159\000\160\000\161\000\162\000\000\000\163\000\
\164\000\165\000\166\000\167\000\000\000\000\000\000\000\000\000\
\233\001\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\000\000\157\000\000\000\
\000\000\000\000\158\000\159\000\160\000\161\000\162\000\000\000\
\163\000\164\000\165\000\166\000\167\000\000\000\000\000\000\000\
\000\000\004\002\145\000\146\000\147\000\148\000\149\000\150\000\
\151\000\152\000\153\000\154\000\155\000\156\000\000\000\157\000\
\000\000\000\000\000\000\158\000\159\000\160\000\161\000\162\000\
\000\000\163\000\164\000\165\000\166\000\167\000\000\000\000\000\
\000\000\000\000\039\002\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\152\000\153\000\154\000\155\000\156\000\000\000\
\157\000\000\000\000\000\000\000\158\000\159\000\160\000\161\000\
\162\000\000\000\163\000\164\000\165\000\166\000\167\000\000\000\
\005\002\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\000\000\157\000\000\000\
\000\000\000\000\158\000\159\000\160\000\161\000\162\000\000\000\
\163\000\164\000\165\000\166\000\167\000\000\000\044\002\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\152\000\153\000\
\154\000\155\000\156\000\248\001\157\000\000\000\000\000\000\000\
\158\000\159\000\160\000\161\000\162\000\000\000\163\000\164\000\
\165\000\166\000\167\000\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\152\000\153\000\154\000\155\000\156\000\033\002\
\157\000\000\000\000\000\000\000\158\000\159\000\160\000\161\000\
\162\000\000\000\163\000\164\000\165\000\166\000\167\000\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\152\000\153\000\
\154\000\155\000\156\000\000\000\157\000\000\000\000\000\000\000\
\158\000\159\000\160\000\161\000\162\000\000\000\163\000\164\000\
\165\000\166\000\167\000\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\152\000\153\000\154\000\155\000\000\000\000\000\
\157\000\000\000\000\000\000\000\158\000\159\000\160\000\161\000\
\162\000\000\000\163\000\164\000\165\000\166\000\167\000\146\000\
\147\000\148\000\149\000\150\000\151\000\152\000\153\000\154\000\
\155\000\000\000\000\000\157\000\000\000\000\000\000\000\158\000\
\159\000\160\000\161\000\162\000\000\000\163\000\164\000\165\000\
\166\000\167\000\147\000\148\000\149\000\150\000\151\000\152\000\
\153\000\154\000\155\000\000\000\000\000\157\000\000\000\000\000\
\000\000\000\000\159\000\160\000\161\000\162\000\000\000\163\000\
\164\000\165\000\166\000\167\000\147\000\148\000\149\000\150\000\
\151\000\152\000\153\000\154\000\155\000\000\000\000\000\157\000\
\000\000\000\000\000\000\000\000\000\000\160\000\161\000\162\000\
\000\000\163\000\164\000\165\000\166\000\167\000\147\000\148\000\
\149\000\150\000\151\000\152\000\153\000\154\000\155\000\000\000\
\000\000\157\000\000\000\000\000\000\000\000\000\000\000\072\001\
\161\000\162\000\000\000\163\000\164\000\165\000\166\000\167\000\
\074\001\075\001\076\001\254\001\072\001\000\000\077\001\078\001\
\079\001\080\001\081\001\000\000\000\000\074\001\075\001\076\001\
\013\002\000\000\000\000\077\001\078\001\079\001\080\001\081\001\
\072\001\000\000\000\000\000\000\032\002\000\000\000\000\000\000\
\000\000\074\001\075\001\076\001\072\001\000\000\000\000\077\001\
\078\001\079\001\080\001\081\001\000\000\074\001\075\001\076\001\
\048\002\072\001\000\000\077\001\078\001\079\001\080\001\081\001\
\000\000\000\000\074\001\075\001\076\001\049\002\000\000\000\000\
\077\001\078\001\079\001\080\001\081\001"

let yycheck = "\080\000\
\003\000\082\000\083\000\084\000\085\000\086\000\193\000\200\000\
\046\001\101\000\000\000\139\001\005\000\006\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\030\001\066\001\017\001\
\064\001\015\001\107\000\017\001\109\000\110\000\001\001\001\001\
\021\001\000\001\000\001\020\001\000\001\000\001\017\001\001\001\
\001\001\012\001\086\001\014\001\084\001\126\000\015\001\015\001\
\129\000\017\001\070\001\022\001\030\001\073\001\025\001\026\001\
\137\000\001\000\001\001\001\001\080\001\000\001\033\001\017\001\
\145\000\146\000\147\000\148\000\149\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\037\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\166\000\167\000\029\001\
\126\001\202\001\093\000\083\001\000\000\083\001\083\001\021\001\
\088\001\100\000\088\001\102\000\066\001\015\001\080\001\088\001\
\083\001\066\000\100\001\068\000\069\000\070\000\119\001\104\000\
\105\000\084\001\083\001\083\001\087\001\198\000\199\000\086\001\
\086\001\001\001\086\001\086\001\086\001\086\001\021\001\066\001\
\131\000\083\001\001\001\092\000\012\001\094\000\014\001\064\001\
\007\001\001\001\009\001\100\000\082\001\102\000\022\001\059\001\
\086\001\025\001\026\001\228\000\064\001\019\001\007\002\021\001\
\023\001\033\001\052\001\027\002\027\001\083\001\029\001\001\001\
\001\001\062\001\004\001\034\001\006\001\007\001\007\001\031\001\
\039\001\083\001\007\001\012\001\070\001\014\001\088\001\073\001\
\040\001\086\001\014\001\086\001\109\001\022\001\080\001\144\000\
\025\001\026\001\087\001\001\001\083\001\086\001\121\001\229\001\
\033\001\088\001\023\002\132\001\086\001\000\000\012\001\062\001\
\014\001\086\001\027\001\066\001\084\001\062\001\209\000\087\001\
\022\001\066\001\001\001\025\001\026\001\083\001\039\001\086\001\
\062\001\046\002\088\001\033\001\066\001\012\001\081\001\014\001\
\086\001\088\001\064\001\081\001\087\001\166\001\087\001\022\001\
\074\001\075\001\025\001\026\001\061\001\079\001\063\001\064\001\
\064\001\087\001\033\001\084\001\086\001\062\001\084\001\178\001\
\001\001\066\001\084\001\089\001\213\000\066\001\066\001\216\000\
\217\000\064\001\063\001\012\001\084\001\014\001\086\001\068\001\
\011\001\089\001\071\001\080\001\080\001\022\001\084\001\018\001\
\025\001\026\001\099\001\206\001\084\001\084\001\066\001\013\001\
\033\001\106\001\087\001\001\001\109\001\084\001\000\000\019\001\
\020\001\114\001\024\001\009\001\015\001\084\001\017\001\120\001\
\019\001\020\001\021\001\059\001\034\001\035\001\036\001\037\001\
\038\001\010\001\084\001\081\001\042\001\043\001\135\001\081\001\
\046\001\031\001\048\001\059\001\076\001\077\001\078\001\250\001\
\064\001\086\001\040\001\148\001\081\001\012\001\059\001\014\001\
\066\001\047\001\087\001\084\001\076\001\077\001\078\001\022\001\
\161\001\070\001\025\001\026\001\001\001\074\001\075\001\076\001\
\077\001\078\001\033\001\081\001\009\001\001\001\081\001\176\001\
\080\001\081\001\179\001\001\001\087\001\009\001\010\001\087\001\
\083\001\013\001\066\001\009\001\066\001\088\001\063\001\081\001\
\001\001\044\002\045\002\196\001\024\001\087\001\066\001\200\001\
\000\000\010\001\086\001\031\001\032\001\081\001\034\001\035\001\
\036\001\037\001\038\001\087\001\040\001\004\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\084\001\063\001\032\001\
\001\001\081\001\081\001\068\001\069\001\070\001\071\001\087\001\
\087\001\074\001\075\001\044\001\045\001\081\001\047\001\081\001\
\001\001\001\001\243\001\087\001\063\001\087\001\087\001\248\001\
\249\001\068\001\069\001\252\001\071\001\081\001\177\001\082\001\
\059\001\180\001\003\002\087\001\005\002\006\002\087\001\081\001\
\081\001\068\001\069\001\070\001\087\001\087\001\087\001\074\001\
\075\001\076\001\077\001\078\001\021\002\000\001\001\001\081\001\
\080\001\087\001\163\001\164\001\087\001\087\001\009\001\010\001\
\033\002\000\000\013\001\081\001\015\001\081\001\017\001\018\001\
\019\001\087\001\021\001\087\001\081\001\024\001\084\001\081\001\
\086\001\063\001\087\001\089\001\031\001\032\001\081\001\034\001\
\035\001\036\001\037\001\038\001\007\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\064\001\066\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\085\001\068\001\
\081\001\068\001\069\001\070\001\071\001\072\001\080\001\074\001\
\075\001\076\001\077\001\078\001\085\001\080\001\081\001\081\001\
\083\001\085\001\085\001\081\001\087\001\088\001\000\001\001\001\
\085\001\068\001\081\001\081\001\085\001\001\001\066\001\009\001\
\010\001\059\001\000\000\013\001\086\001\015\001\064\001\017\001\
\018\001\019\001\086\001\021\001\001\001\001\001\024\001\086\001\
\074\001\075\001\076\001\077\001\078\001\031\001\032\001\083\001\
\034\001\035\001\036\001\037\001\038\001\088\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\018\001\
\083\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\047\001\
\001\001\082\001\068\001\069\001\070\001\071\001\072\001\080\001\
\074\001\075\001\076\001\077\001\078\001\087\001\080\001\081\001\
\073\001\083\001\087\001\085\001\082\001\087\001\088\001\063\001\
\000\001\001\001\007\001\066\001\068\001\069\001\070\001\071\001\
\066\001\009\001\010\001\000\000\066\001\013\001\066\001\015\001\
\066\001\017\001\018\001\019\001\066\001\021\001\089\001\087\001\
\024\001\082\001\015\001\059\001\001\001\004\001\020\001\031\001\
\032\001\084\001\034\001\035\001\036\001\037\001\038\001\087\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\019\001\047\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\073\001\083\001\017\001\084\001\068\001\069\001\070\001\071\001\
\072\001\064\001\074\001\075\001\076\001\077\001\078\001\081\001\
\080\001\081\001\064\001\083\001\030\001\085\001\019\001\087\001\
\088\001\000\001\001\001\085\001\066\001\064\001\082\001\021\001\
\082\001\080\001\009\001\010\001\000\000\004\001\013\001\083\001\
\015\001\015\001\017\001\018\001\019\001\017\001\021\001\080\001\
\017\001\024\001\080\001\083\001\088\001\021\001\085\001\083\001\
\031\001\032\001\017\001\034\001\035\001\036\001\037\001\038\001\
\088\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\083\001\018\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\088\001\083\001\018\001\083\001\068\001\069\001\070\001\
\071\001\072\001\015\000\074\001\075\001\076\001\077\001\078\001\
\104\000\080\001\081\001\168\000\083\001\210\000\085\001\214\000\
\087\001\088\001\000\001\001\001\102\000\099\000\098\000\092\001\
\015\001\063\000\110\000\009\001\010\001\000\000\118\001\013\001\
\228\001\015\001\038\002\017\001\018\001\019\001\038\002\021\001\
\241\001\241\001\024\001\045\001\127\001\127\001\255\255\048\001\
\255\255\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\255\255\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\074\001\075\001\076\001\077\001\
\078\001\255\255\080\001\081\001\255\255\083\001\255\255\085\001\
\255\255\087\001\088\001\000\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\000\000\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\255\255\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\255\255\060\001\
\061\001\062\001\063\001\255\255\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\074\001\075\001\076\001\
\077\001\078\001\255\255\080\001\081\001\255\255\083\001\255\255\
\085\001\255\255\087\001\088\001\000\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\000\000\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\060\001\061\001\062\001\063\001\255\255\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\080\001\081\001\255\255\083\001\
\255\255\085\001\255\255\087\001\088\001\000\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\000\000\255\255\013\001\255\255\015\001\255\255\017\001\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\255\255\060\001\061\001\062\001\063\001\255\255\255\255\255\255\
\255\255\068\001\069\001\070\001\071\001\072\001\255\255\074\001\
\075\001\076\001\077\001\078\001\255\255\080\001\081\001\255\255\
\083\001\255\255\085\001\255\255\087\001\088\001\000\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\000\000\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\019\001\255\255\021\001\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\060\001\061\001\062\001\063\001\255\255\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\080\001\081\001\
\255\255\083\001\255\255\085\001\255\255\087\001\088\001\000\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\000\000\255\255\013\001\255\255\015\001\255\255\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\255\255\060\001\061\001\062\001\063\001\255\255\
\255\255\255\255\255\255\068\001\069\001\070\001\071\001\072\001\
\255\255\074\001\075\001\059\001\255\255\255\255\255\255\080\001\
\081\001\255\255\083\001\255\255\085\001\255\255\087\001\088\001\
\000\001\001\001\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\009\001\010\001\000\000\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\255\255\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\060\001\061\001\062\001\063\001\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\255\255\255\255\255\255\255\255\
\080\001\081\001\255\255\083\001\255\255\085\001\255\255\087\001\
\088\001\000\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\000\000\255\255\013\001\255\255\
\015\001\255\255\017\001\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\255\255\060\001\061\001\062\001\
\063\001\255\255\255\255\255\255\255\255\068\001\069\001\070\001\
\071\001\072\001\255\255\255\255\057\001\058\001\059\001\060\001\
\061\001\080\001\081\001\064\001\083\001\255\255\085\001\255\255\
\087\001\088\001\000\001\001\001\255\255\074\001\075\001\076\001\
\077\001\078\001\255\255\009\001\010\001\000\000\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\255\255\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\255\255\060\001\061\001\
\062\001\063\001\255\255\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\255\255\083\001\255\255\085\001\
\255\255\087\001\088\001\000\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\000\000\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\255\255\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\255\255\060\001\
\061\001\062\001\063\001\255\255\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\080\001\081\001\255\255\083\001\255\255\
\085\001\255\255\087\001\088\001\000\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\000\000\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\060\001\061\001\062\001\063\001\255\255\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\080\001\081\001\255\255\083\001\
\255\255\085\001\255\255\087\001\088\001\000\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\000\000\255\255\013\001\255\255\015\001\255\255\017\001\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\255\255\
\255\255\255\255\255\255\062\001\063\001\255\255\255\255\255\255\
\255\255\068\001\069\001\070\001\071\001\072\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\080\001\081\001\255\255\
\083\001\255\255\085\001\255\255\087\001\088\001\000\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\000\000\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\019\001\255\255\021\001\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\255\255\255\255\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\080\001\081\001\
\255\255\083\001\255\255\085\001\255\255\087\001\088\001\000\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\000\000\255\255\013\001\255\255\015\001\255\255\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\255\255\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\255\255\068\001\069\001\070\001\071\001\072\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\080\001\
\081\001\255\255\083\001\255\255\085\001\255\255\087\001\088\001\
\000\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\000\000\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\255\255\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\080\001\081\001\255\255\083\001\255\255\085\001\255\255\087\001\
\088\001\000\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\000\000\255\255\013\001\255\255\
\015\001\255\255\017\001\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\051\001\052\001\063\001\255\255\
\055\001\056\001\255\255\068\001\069\001\070\001\071\001\062\001\
\063\001\074\001\075\001\255\255\063\001\068\001\069\001\070\001\
\255\255\068\001\069\001\070\001\071\001\255\255\087\001\074\001\
\075\001\080\001\081\001\255\255\083\001\255\255\085\001\255\255\
\087\001\088\001\000\001\001\001\087\001\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\000\000\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\255\255\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\051\001\052\001\063\001\
\255\255\055\001\056\001\255\255\068\001\069\001\070\001\071\001\
\062\001\063\001\074\001\075\001\255\255\255\255\068\001\069\001\
\070\001\255\255\255\255\255\255\255\255\255\255\255\255\087\001\
\255\255\255\255\080\001\081\001\255\255\083\001\255\255\085\001\
\255\255\087\001\088\001\000\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\000\000\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\255\255\255\255\051\001\052\001\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\255\255\062\001\063\001\255\255\068\001\069\001\070\001\068\001\
\069\001\070\001\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\080\001\081\001\255\255\083\001\255\255\
\085\001\255\255\087\001\088\001\000\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\000\000\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\013\001\255\255\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\062\001\063\001\255\255\255\255\255\255\255\255\
\068\001\069\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\255\255\042\001\043\001\080\001\081\001\046\001\083\001\
\048\001\085\001\255\255\087\001\088\001\000\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\000\000\255\255\013\001\255\255\015\001\255\255\017\001\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\051\001\052\001\255\255\255\255\059\001\255\255\255\255\255\255\
\063\001\255\255\255\255\062\001\063\001\068\001\069\001\070\001\
\255\255\068\001\000\000\074\001\075\001\076\001\077\001\078\001\
\255\255\255\255\255\255\255\255\255\255\080\001\081\001\255\255\
\083\001\255\255\085\001\255\255\087\001\088\001\000\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\019\001\255\255\021\001\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\053\001\
\054\001\051\001\052\001\057\001\058\001\059\001\060\001\061\001\
\255\255\255\255\064\001\000\000\062\001\063\001\255\255\255\255\
\255\255\071\001\072\001\255\255\074\001\075\001\076\001\077\001\
\078\001\255\255\255\255\255\255\255\255\255\255\080\001\081\001\
\255\255\083\001\255\255\085\001\255\255\087\001\088\001\000\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\013\001\255\255\015\001\255\255\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\000\000\034\001\035\001\036\001\037\001\038\001\059\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\069\001\070\001\051\001\052\001\000\000\074\001\075\001\076\001\
\077\001\078\001\255\255\063\001\255\255\062\001\063\001\255\255\
\068\001\069\001\070\001\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\255\255\255\255\255\255\080\001\
\081\001\255\255\083\001\087\001\085\001\255\255\087\001\088\001\
\000\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\255\255\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\000\000\255\255\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\000\001\001\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\009\001\010\001\255\255\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\255\255\021\001\
\080\001\081\001\024\001\083\001\255\255\085\001\255\255\087\001\
\088\001\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\000\000\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\062\001\063\001\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\087\001\
\000\000\255\255\080\001\081\001\001\001\083\001\255\255\085\001\
\255\255\087\001\088\001\255\255\009\001\010\001\255\255\255\255\
\013\001\255\255\255\255\255\255\000\000\255\255\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\255\255\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\255\255\255\255\255\255\052\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\000\000\255\255\255\255\068\001\
\255\255\070\001\255\255\255\255\073\001\013\001\255\255\255\255\
\255\255\255\255\255\255\080\001\081\001\001\001\255\255\255\255\
\024\001\255\255\087\001\255\255\255\255\009\001\010\001\255\255\
\255\255\013\001\034\001\035\001\036\001\037\001\038\001\019\001\
\255\255\021\001\042\001\043\001\024\001\255\255\046\001\255\255\
\048\001\255\255\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\000\000\255\255\255\255\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\001\001\255\255\
\068\001\255\255\070\001\255\255\255\255\073\001\009\001\010\001\
\255\255\255\255\013\001\255\255\080\001\081\001\255\255\255\255\
\019\001\019\001\021\001\087\001\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\000\000\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\064\001\000\000\
\255\255\068\001\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\001\001\081\001\255\255\
\255\255\255\255\255\255\255\255\087\001\009\001\010\001\255\255\
\255\255\013\001\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\013\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\001\001\255\255\000\000\
\024\001\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\013\001\034\001\035\001\036\001\037\001\038\001\019\001\
\068\001\021\001\042\001\043\001\024\001\255\255\046\001\255\255\
\048\001\255\255\255\255\031\001\032\001\081\001\034\001\035\001\
\036\001\037\001\038\001\087\001\040\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\001\001\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\013\001\255\255\255\255\255\255\255\255\255\255\019\001\
\068\001\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\081\001\034\001\035\001\
\036\001\037\001\038\001\087\001\040\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\063\001\255\255\000\000\
\255\255\255\255\068\001\069\001\070\001\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\001\001\255\255\
\068\001\255\255\255\255\255\255\255\255\087\001\009\001\010\001\
\255\255\255\255\013\001\255\255\255\255\081\001\255\255\255\255\
\019\001\255\255\021\001\087\001\255\255\024\001\000\000\255\255\
\255\255\013\001\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\038\001\024\001\040\001\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\255\255\042\001\043\001\
\255\255\255\255\046\001\255\255\048\001\255\255\000\000\001\001\
\255\255\068\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\013\001\255\255\255\255\081\001\255\255\
\001\001\255\255\000\000\255\255\087\001\255\255\024\001\255\255\
\255\255\010\001\255\255\255\255\013\001\031\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\024\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\063\001\081\001\
\001\001\255\255\255\255\255\255\255\255\087\001\000\000\255\255\
\255\255\010\001\255\255\255\255\013\001\255\255\255\255\255\255\
\081\001\255\255\255\255\255\255\085\001\255\255\087\001\024\001\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\010\001\000\000\255\255\013\001\255\255\255\255\064\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\001\001\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\010\001\255\255\059\001\013\001\255\255\255\255\063\001\
\255\255\255\255\000\000\255\255\068\001\069\001\070\001\024\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\001\001\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\010\001\000\000\059\001\013\001\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\068\001\069\001\070\001\024\001\255\255\
\000\000\074\001\075\001\076\001\077\001\078\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\255\255\001\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\009\001\
\255\255\255\255\000\000\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\255\255\024\001\255\255\
\255\255\000\000\255\255\009\001\255\255\031\001\255\255\013\001\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\255\255\
\042\001\043\001\024\001\255\255\046\001\047\001\048\001\255\255\
\255\255\031\001\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\255\255\042\001\043\001\255\255\255\255\
\046\001\047\001\048\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\009\001\
\255\255\031\001\255\255\013\001\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\001\001\042\001\043\001\024\001\255\255\
\046\001\047\001\048\001\009\001\255\255\031\001\255\255\013\001\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\255\255\
\042\001\043\001\024\001\255\255\046\001\047\001\048\001\255\255\
\255\255\031\001\255\255\001\001\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\009\001\042\001\043\001\255\255\013\001\
\046\001\047\001\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\013\001\255\255\
\255\255\031\001\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\024\001\040\001\255\255\042\001\043\001\255\255\255\255\
\046\001\047\001\048\001\034\001\035\001\036\001\037\001\038\001\
\013\001\255\255\255\255\042\001\043\001\255\255\255\255\046\001\
\255\255\048\001\255\255\024\001\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\024\001\255\255\255\255\042\001\043\001\255\255\
\255\255\046\001\255\255\048\001\034\001\035\001\036\001\037\001\
\038\001\255\255\255\255\255\255\042\001\043\001\013\001\255\255\
\046\001\255\255\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\255\255\013\001\249\000\250\000\
\251\000\252\000\255\255\034\001\035\001\036\001\037\001\038\001\
\024\001\255\255\255\255\042\001\043\001\255\255\255\255\046\001\
\255\255\048\001\034\001\035\001\036\001\037\001\038\001\013\001\
\255\255\255\255\042\001\043\001\255\255\255\255\046\001\255\255\
\048\001\255\255\024\001\255\255\255\255\000\001\013\001\255\255\
\255\255\255\255\255\255\038\001\034\001\035\001\036\001\037\001\
\038\001\024\001\255\255\255\255\042\001\043\001\255\255\255\255\
\046\001\255\255\048\001\034\001\035\001\036\001\037\001\038\001\
\255\255\255\255\255\255\042\001\043\001\255\255\255\255\046\001\
\255\255\048\001\255\255\255\255\255\255\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\255\255\064\001\255\255\255\255\
\255\255\068\001\069\001\070\001\071\001\072\001\105\001\074\001\
\075\001\076\001\077\001\078\001\000\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\087\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\059\001\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\016\001\068\001\069\001\
\070\001\071\001\255\255\039\001\074\001\075\001\076\001\077\001\
\078\001\028\001\029\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\039\001\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\067\001\
\074\001\075\001\076\001\077\001\078\001\255\255\074\001\075\001\
\187\001\255\255\255\255\079\001\255\255\255\255\082\001\255\255\
\067\001\255\255\086\001\255\255\255\255\255\255\255\255\074\001\
\075\001\255\255\255\255\255\255\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\086\001\215\001\255\255\000\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\244\001\028\001\029\001\247\001\255\255\255\255\016\001\
\255\255\255\255\063\001\255\255\255\255\039\001\255\255\068\001\
\069\001\070\001\071\001\028\001\029\001\074\001\075\001\076\001\
\077\001\078\001\255\255\255\255\255\255\255\255\039\001\255\255\
\255\255\255\255\087\001\255\255\255\255\255\255\255\255\255\255\
\255\255\067\001\255\255\255\255\031\002\032\002\255\255\255\255\
\074\001\075\001\255\255\255\255\255\255\079\001\255\255\255\255\
\255\255\255\255\067\001\255\255\086\001\255\255\255\255\255\255\
\255\255\074\001\075\001\255\255\255\255\255\255\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\086\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\012\001\255\255\014\001\255\255\016\001\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\255\255\255\255\039\001\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\067\001\255\255\028\001\029\001\255\255\255\255\255\255\074\001\
\075\001\255\255\255\255\255\255\079\001\039\001\255\255\255\255\
\255\255\084\001\255\255\086\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\016\001\255\255\
\255\255\067\001\255\255\255\255\255\255\255\255\255\255\255\255\
\074\001\075\001\028\001\029\001\255\255\079\001\255\255\255\255\
\082\001\255\255\255\255\255\255\086\001\039\001\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\067\001\074\001\075\001\076\001\077\001\078\001\255\255\
\074\001\075\001\255\255\041\001\255\255\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\086\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\255\255\064\001\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\041\001\074\001\075\001\076\001\077\001\
\078\001\255\255\255\255\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\255\255\064\001\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\041\001\074\001\075\001\076\001\077\001\
\078\001\255\255\255\255\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\255\255\064\001\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\074\001\075\001\076\001\077\001\
\078\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\087\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\255\255\064\001\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\074\001\075\001\076\001\
\077\001\078\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\087\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\087\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\255\255\064\001\255\255\255\255\
\255\255\068\001\069\001\070\001\071\001\072\001\255\255\074\001\
\075\001\076\001\077\001\078\001\255\255\255\255\081\001\255\255\
\255\255\255\255\085\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\255\255\255\255\085\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\255\255\064\001\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\074\001\075\001\076\001\
\077\001\078\001\255\255\255\255\255\255\255\255\255\255\255\255\
\085\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\255\255\064\001\255\255\255\255\255\255\068\001\069\001\070\001\
\071\001\072\001\255\255\074\001\075\001\076\001\077\001\078\001\
\255\255\255\255\255\255\255\255\255\255\255\255\085\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\255\255\064\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\255\255\255\255\255\255\083\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\255\255\064\001\255\255\255\255\
\255\255\068\001\069\001\070\001\071\001\072\001\255\255\074\001\
\075\001\076\001\077\001\078\001\255\255\255\255\255\255\255\255\
\083\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\255\255\255\255\
\255\255\083\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\255\255\064\001\
\255\255\255\255\255\255\068\001\069\001\070\001\071\001\072\001\
\255\255\074\001\075\001\076\001\077\001\078\001\255\255\255\255\
\255\255\255\255\083\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\076\001\077\001\078\001\255\255\
\080\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\080\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\076\001\077\001\078\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\255\255\064\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\255\255\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\076\001\077\001\078\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\255\255\255\255\064\001\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\074\001\075\001\076\001\
\077\001\078\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\255\255\255\255\064\001\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\072\001\255\255\074\001\
\075\001\076\001\077\001\078\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\255\255\255\255\064\001\
\255\255\255\255\255\255\255\255\255\255\070\001\071\001\072\001\
\255\255\074\001\075\001\076\001\077\001\078\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\255\255\
\255\255\064\001\255\255\255\255\255\255\255\255\255\255\059\001\
\071\001\072\001\255\255\074\001\075\001\076\001\077\001\078\001\
\068\001\069\001\070\001\071\001\059\001\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\255\255\068\001\069\001\070\001\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\059\001\255\255\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\068\001\069\001\070\001\059\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\255\255\068\001\069\001\070\001\
\071\001\059\001\255\255\074\001\075\001\076\001\077\001\078\001\
\255\255\255\255\068\001\069\001\070\001\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001"

let yynames_const = "\
  DOLLAR\000\
  ACTION\000\
  ALIAS\000\
  ATTR\000\
  BOOL\000\
  CANON\000\
  CARD\000\
  CASE\000\
  COERCE\000\
  DEFAULT\000\
  DO\000\
  ELSE\000\
  ENDDO\000\
  ENDIF\000\
  ENUM\000\
  ERROR\000\
  EXTEND\000\
  FIX\000\
  FLOAT\000\
  FOR\000\
  FORMAT\000\
  IF\000\
  IN\000\
  IMAGE\000\
  INITIALA\000\
  INT\000\
  SWITCH\000\
  SYNTAX\000\
  THEN\000\
  VOLATILE\000\
  PORTS\000\
  USES\000\
  MACRO\000\
  EOF\000\
  NOT\000\
  OR\000\
  AND\000\
  LEQ\000\
  GEQ\000\
  EQU\000\
  NEQ\000\
  LEFT_SHIFT\000\
  RIGHT_SHIFT\000\
  DOUBLE_STAR\000\
  ROTATE_RIGHT\000\
  ROTATE_LEFT\000\
  DOUBLE_COLON\000\
  DOUBLE_DOT\000\
  BIT_LEFT\000\
  BIT_RIGHT\000\
  EQ\000\
  EXCLAM\000\
  PIPE\000\
  CIRC\000\
  AMPERS\000\
  GT\000\
  LT\000\
  SHARP\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  TILD\000\
  COLON\000\
  COMMA\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  LPAREN\000\
  RPAREN\000\
  SEMI\000\
  DOT\000\
  AROBAS\000\
  "

let yynames_block = "\
  ID\000\
  BIN_CONST\000\
  BIN_CONST_64\000\
  CARD_CONST\000\
  CARD_CONST_64\000\
  FIXED_CONST\000\
  STRING_CONST\000\
  LET\000\
  MEM\000\
  MODE\000\
  OP\000\
  REG\000\
  TYPE\000\
  VAR\000\
  RESOURCE\000\
  EXCEPTION\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    Obj.repr(
# 208 "parser.mly"
            ( )
# 2011 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 212 "parser.mly"
    ( Irg.add_pos _1 !Lexer.file !Lexer.line; _1 )
# 2018 "parser.ml"
               : 'LocatedID))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MachineSpec) in
    Obj.repr(
# 215 "parser.mly"
               (   )
# 2025 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'MachineSpec) in
    Obj.repr(
# 216 "parser.mly"
                     (   )
# 2033 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetDef) in
    Obj.repr(
# 220 "parser.mly"
             ( Irg.add_symbol (fst _1) (snd _1) )
# 2040 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeSpec) in
    Obj.repr(
# 221 "parser.mly"
               ( Sem.add_spec (fst _1) (snd _1) )
# 2047 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemorySpec) in
    Obj.repr(
# 222 "parser.mly"
                ( Sem.add_spec (fst _1) (snd _1) )
# 2054 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'RegisterSpec) in
    Obj.repr(
# 223 "parser.mly"
                 ( Sem.add_spec (fst _1) (snd _1) )
# 2061 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'VarSpec) in
    Obj.repr(
# 224 "parser.mly"
              ( Sem.add_spec (fst _1) (snd _1) )
# 2068 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ModeSpec) in
    Obj.repr(
# 225 "parser.mly"
              ( Sem.add_spec (fst _1) (snd _1); )
# 2075 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'OpSpec) in
    Obj.repr(
# 226 "parser.mly"
             ( Sem.add_spec (fst _1) (snd _1); )
# 2082 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ResourceSpec) in
    Obj.repr(
# 227 "parser.mly"
                 ( )
# 2089 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ExceptionSpec) in
    Obj.repr(
# 228 "parser.mly"
                  ( )
# 2096 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ExtendSpec) in
    Obj.repr(
# 229 "parser.mly"
              ( )
# 2103 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CanonSpec) in
    Obj.repr(
# 230 "parser.mly"
              ( Irg.add_symbol (fst _1) (snd _1); Irg.add_canon (fst _1) (snd _1) )
# 2110 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 235 "parser.mly"
                            (  (_2, Sem.make_let _2 Irg.NO_TYPE _4) )
# 2119 "parser.ml"
               : 'LetDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 236 "parser.mly"
                                      (  (_2, Sem.make_let _2 _4 _6) )
# 2129 "parser.ml"
               : 'LetDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ResourceList) in
    Obj.repr(
# 240 "parser.mly"
                       ( _2 )
# 2137 "parser.ml"
               : 'ResourceSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Resource) in
    Obj.repr(
# 244 "parser.mly"
            ( [_1] )
# 2144 "parser.ml"
               : 'ResourceList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ResourceList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Resource) in
    Obj.repr(
# 245 "parser.mly"
                              ( _3::_1 )
# 2152 "parser.ml"
               : 'ResourceList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 249 "parser.mly"
                 ( Irg.add_symbol _1 (Irg.RES _1); _1 )
# 2159 "parser.ml"
               : 'Resource))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'LocatedID) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Int32.t) in
    Obj.repr(
# 250 "parser.mly"
                                     ( Irg.add_symbol _1 (Irg.RES _1); _1 )
# 2167 "parser.ml"
               : 'Resource))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'CanonParamList) in
    Obj.repr(
# 255 "parser.mly"
  ( (_2, Irg.CANON_DEF(_2, Irg.CANON_FUNC, Irg.NO_TYPE, _4)) )
# 2175 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'CanonParamList) in
    Obj.repr(
# 257 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_FUNC, _2, _5)) )
# 2184 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 259 "parser.mly"
  ( (_2, Irg.CANON_DEF(_2, Irg.CANON_FUNC, Irg.NO_TYPE, [])) )
# 2191 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 261 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_FUNC, _2, [])) )
# 2199 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 263 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_CNST, _2, [])) )
# 2207 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CanonParam) in
    Obj.repr(
# 267 "parser.mly"
                 ( [_1] )
# 2214 "parser.ml"
               : 'CanonParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'CanonParamList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'CanonParam) in
    Obj.repr(
# 268 "parser.mly"
                                  ( _3::_1 )
# 2222 "parser.ml"
               : 'CanonParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 272 "parser.mly"
          ( _1 )
# 2229 "parser.ml"
               : 'CanonParam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 273 "parser.mly"
                       ( _3 )
# 2237 "parser.ml"
               : 'CanonParam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'IdentifierList) in
    Obj.repr(
# 277 "parser.mly"
                          ( _2 )
# 2245 "parser.ml"
               : 'ExceptionSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 281 "parser.mly"
                ( [_1] )
# 2252 "parser.ml"
               : 'IdentifierList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'IdentifierList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 282 "parser.mly"
                                 ( _3::_1 )
# 2260 "parser.ml"
               : 'IdentifierList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 287 "parser.mly"
  ( (_2, Irg.TYPE (_2, _4)) )
# 2269 "parser.ml"
               : 'TypeSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "parser.mly"
  ( Irg.BOOL )
# 2275 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 294 "parser.mly"
  ( Irg.INT (Sem.to_int (Sem.eval_const _3)) )
# 2282 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 296 "parser.mly"
  ( Irg.CARD (Sem.to_int (Sem.eval_const _3)) )
# 2289 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 298 "parser.mly"
  ( Irg.FIX (
			Sem.to_int (Sem.eval_const _3),
			Sem.to_int (Sem.eval_const _5)) )
# 2299 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 302 "parser.mly"
  ( Irg.FLOAT (
			Sem.to_int (Sem.eval_const _3),
			Sem.to_int (Sem.eval_const _5)) )
# 2309 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 306 "parser.mly"
  (
		let v1=Sem.to_int32 (Sem.eval_const _2)
		and v2=Sem.to_int32 (Sem.eval_const _4)
		in
		if ((Int32.compare v1 v2)<=0)
			then Irg.RANGE (v1,v2)
			else
				Irg.error (Irg.output [
					Irg.PTEXT "In a range type declaration, the first operand must be lesser than the second\n";
					Irg.PTEXT (Printf.sprintf "Value of the first operand : %d\n Value of the second operand : %d"
						(Int32.to_int v1) (Int32.to_int v2))])
		 )
# 2328 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ValueList) in
    Obj.repr(
# 319 "parser.mly"
  ( Irg.ENUM (Sem.uniq (List.sort Int32.compare _3)) )
# 2335 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Value) in
    Obj.repr(
# 322 "parser.mly"
                      ( _1 )
# 2342 "parser.ml"
               : 'ValueList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ValueList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Value) in
    Obj.repr(
# 323 "parser.mly"
                           ( _1 @ _3 )
# 2350 "parser.ml"
               : 'ValueList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 326 "parser.mly"
                     ( [Sem.to_int32 (Sem.eval_const _1)] )
# 2357 "parser.ml"
               : 'Value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 327 "parser.mly"
                               ( Sem.enum_values (Sem.to_int32 (Sem.eval_const _1)) (Sem.to_int32 (Sem.eval_const _3)) )
# 2365 "parser.ml"
               : 'Value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 331 "parser.mly"
       ( _1 )
# 2372 "parser.ml"
               : 'LetExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'MemPart) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 336 "parser.mly"
  ( (_2, Sem.check_alias (Irg.MEM (_2, fst _4, snd _4, _6))) )
# 2382 "parser.ml"
               : 'MemorySpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'RegPart) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 341 "parser.mly"
  ( (_2, Sem.check_alias (Irg.REG (_2, fst _4, snd _4, _6))) )
# 2392 "parser.ml"
               : 'RegisterSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'RegPart) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 346 "parser.mly"
  ( (_2, Irg.VAR (_2, fst _4, snd _4, _6)) )
# 2402 "parser.ml"
               : 'VarSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 350 "parser.mly"
                      ( Sem.to_int (Sem.eval_const _1), _3 )
# 2410 "parser.ml"
               : 'MemPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 351 "parser.mly"
            ( Sem.to_int (Sem.eval_const _1), Irg.INT 8 )
# 2417 "parser.ml"
               : 'MemPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 355 "parser.mly"
                      ( Sem.to_int (Sem.eval_const _1), _3 )
# 2425 "parser.ml"
               : 'RegPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 356 "parser.mly"
         ( 1, _1 )
# 2432 "parser.ml"
               : 'RegPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 360 "parser.mly"
           ( _1 )
# 2439 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 361 "parser.mly"
       ( Sem.type_from_id _1 )
# 2446 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    Obj.repr(
# 365 "parser.mly"
              ( [] )
# 2452 "parser.ml"
               : 'OptionalMemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDefList) in
    Obj.repr(
# 366 "parser.mly"
                  ( _1 )
# 2459 "parser.ml"
               : 'OptionalMemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDef) in
    Obj.repr(
# 370 "parser.mly"
              ( [_1] )
# 2466 "parser.ml"
               : 'MemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'MemAttrDefList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDef) in
    Obj.repr(
# 371 "parser.mly"
                            ( _2::_1 )
# 2474 "parser.ml"
               : 'MemAttrDefList))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 376 "parser.mly"
  ( Irg.ATTR_EXPR ("volatile", Irg.CONST (Irg.NO_TYPE, (Sem.eval_const _3))) )
# 2481 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 378 "parser.mly"
  ( Irg.ATTR_EXPR ("init", Irg.CONST (Irg.NO_TYPE, Sem.eval_const _3)) )
# 2488 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Int32.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 380 "parser.mly"
  ( Irg.ATTR_USES )
# 2496 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesDef) in
    Obj.repr(
# 382 "parser.mly"
  ( Irg.ATTR_USES )
# 2503 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'MemLocation) in
    Obj.repr(
# 384 "parser.mly"
  ( Irg.ATTR_LOC ("alias", _3) )
# 2510 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 386 "parser.mly"
  ( Irg.ATTR_EXPR (_1, _3) )
# 2518 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 388 "parser.mly"
  ( let r = Irg.ATTR_STAT (_1, _4) in Sem.reset_local(); r )
# 2526 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemLocBase) in
    Obj.repr(
# 393 "parser.mly"
  ( Irg.LOC_REF (Sem.get_loc_ref_type (fst _1), fst _1, snd _1, Irg.NONE, Irg.NONE) )
# 2533 "parser.ml"
               : 'MemLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'MemLocBase) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 395 "parser.mly"
  (  Irg.LOC_REF (Sem.get_loc_ref_type (fst _1), fst _1, snd _1, _3, _5) )
# 2542 "parser.ml"
               : 'MemLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 400 "parser.mly"
  ( (_1, Irg.NONE) )
# 2549 "parser.ml"
               : 'MemLocBase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 402 "parser.mly"
  ( (_1, Irg.CONST (Irg.CARD(32), Sem.eval_const _3)) )
# 2557 "parser.ml"
               : 'MemLocBase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ParamList) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalModeExpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 407 "parser.mly"
  (
			Sem.check_image _2 _4;
			Irg.param_unstack _4;
			Irg.attr_unstack _7;
			(_2, Irg.AND_MODE (_2, _4, _6, _7))
		)
# 2573 "parser.ml"
               : 'ModeSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Identifier_Or_List) in
    Obj.repr(
# 414 "parser.mly"
  ( _2, Irg.OR_MODE (_2, _4) )
# 2582 "parser.ml"
               : 'ModeSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 420 "parser.mly"
             ( Irg.NONE )
# 2588 "parser.ml"
               : 'OptionalModeExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 421 "parser.mly"
           ( _2 )
# 2595 "parser.ml"
               : 'OptionalModeExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ParamList) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 426 "parser.mly"
  (
			Sem.check_image _2 _4;
			Irg.param_unstack _4;
			Irg.attr_unstack _6;			
			(_2, Irg.AND_OP (_2, _4, _6))
		)
# 2610 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Identifier_Or_List) in
    Obj.repr(
# 433 "parser.mly"
  ( _2, Irg.OR_OP (_2, _4) )
# 2619 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LocatedID) in
    Obj.repr(
# 435 "parser.mly"
  ( raise (Irg.SyntaxError "missing '=' or '('") )
# 2627 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ExtendHeader) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 442 "parser.mly"
  (
			let (syms, pars, cattrs) = _1 in
			let extend_spec s =
				match s with
				| Irg.AND_MODE (id, pars, expr, attrs) ->
					Irg.rm_symbol id;
					Irg.add_symbol id (Irg.AND_MODE (id, pars, expr, attrs @ _2))
				| Irg.AND_OP (id, pars, attrs) ->
					Irg.rm_symbol id;
					Irg.add_symbol id (Irg.AND_OP (id, pars, attrs @ _2));
				| _ -> () in
			Irg.param_unstack pars;
			Irg.attr_unstack _2;
			Irg.attr_unstack cattrs;
			List.iter extend_spec syms
		)
# 2650 "parser.ml"
               : 'ExtendSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ExtendIDList) in
    Obj.repr(
# 462 "parser.mly"
                     ( let (_, pars, attrs) = _2 in Irg.attr_stack attrs; Irg.param_stack pars; _2 )
# 2657 "parser.ml"
               : 'ExtendHeader))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 468 "parser.mly"
  ( let (sym, pars, attrs) = get_spec_extend _1 in ([sym], pars, attrs) )
# 2664 "parser.ml"
               : 'ExtendIDList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ExtendIDList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 470 "parser.mly"
  (
			let (sym, spars, sattrs) = get_spec_extend _3 in
			let (syms, pars, attrs) = _1 in
			(sym::syms, intersect_params pars spars, intersect_attrs sattrs attrs)
		)
# 2676 "parser.ml"
               : 'ExtendIDList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 480 "parser.mly"
           ( [_1] )
# 2683 "parser.ml"
               : 'Identifier_Or_List))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Identifier_Or_List) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 481 "parser.mly"
                                ( _3::_1 )
# 2691 "parser.ml"
               : 'Identifier_Or_List))
; (fun __caml_parser_env ->
    Obj.repr(
# 485 "parser.mly"
                  ( [] )
# 2697 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ParamListPart) in
    Obj.repr(
# 486 "parser.mly"
                    ( Irg.add_param _1; [_1] )
# 2704 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ParamList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ParamListPart) in
    Obj.repr(
# 487 "parser.mly"
                                ( Irg.add_param _3; _3::_1 )
# 2712 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ParaType) in
    Obj.repr(
# 491 "parser.mly"
                       ( Sem.check_param_exists _1; (_1, _3) )
# 2720 "parser.ml"
               : 'ParamListPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 495 "parser.mly"
          ( Irg.TYPE_EXPR _1 )
# 2727 "parser.ml"
               : 'ParaType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 496 "parser.mly"
      ( Irg.TYPE_ID _1 )
# 2734 "parser.ml"
               : 'ParaType))
; (fun __caml_parser_env ->
    Obj.repr(
# 500 "parser.mly"
               ( [] )
# 2740 "parser.ml"
               : 'AttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NOAttrDefList) in
    Obj.repr(
# 501 "parser.mly"
                  ( _1 )
# 2747 "parser.ml"
               : 'AttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDef) in
    Obj.repr(
# 505 "parser.mly"
              ( Irg.add_attr _1; [_1] )
# 2754 "parser.ml"
               : 'NOAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'NOAttrDefList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDef) in
    Obj.repr(
# 506 "parser.mly"
                        ( Irg.add_attr _2; _2::_1 )
# 2762 "parser.ml"
               : 'NOAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 512 "parser.mly"
  ( Irg.ATTR_EXPR (_1, _3) )
# 2770 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 514 "parser.mly"
  ( let r = Irg.ATTR_STAT (_1, _4) in Sem.reset_local (); r )
# 2778 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AttrExpr) in
    Obj.repr(
# 516 "parser.mly"
  ( Irg.ATTR_EXPR  ("syntax", (Sem.change_string_dependences "syntax" _3)) )
# 2785 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AttrExpr) in
    Obj.repr(
# 518 "parser.mly"
  ( Irg.ATTR_EXPR  ("image", (Sem.change_string_dependences "image" _3)) )
# 2792 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 520 "parser.mly"
  ( let r = Irg.ATTR_STAT ("action", _4) in Sem.reset_local (); r )
# 2799 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesDef) in
    Obj.repr(
# 522 "parser.mly"
  ( Irg.ATTR_USES )
# 2806 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 524 "parser.mly"
  ( raise (Irg.SyntaxError "attributes only accept expressions, { } actions or use clauses.") )
# 2813 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 526 "parser.mly"
   ( raise (Irg.SyntaxError "missing '=' in attribute definition") )
# 2820 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 531 "parser.mly"
  ( eline _1 )
# 2827 "parser.ml"
               : 'AttrExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 587 "parser.mly"
             ( Irg.NOP )
# 2833 "parser.ml"
               : 'Sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'StatementList) in
    Obj.repr(
# 588 "parser.mly"
                     ( _1 )
# 2840 "parser.ml"
               : 'Sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Statement) in
    Obj.repr(
# 593 "parser.mly"
  ( line _1 )
# 2847 "parser.ml"
               : 'StatementList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'StatementList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Statement) in
    Obj.repr(
# 595 "parser.mly"
  ( handle_stat (fun _ -> Irg.SEQ (_1, line _3)) )
# 2855 "parser.ml"
               : 'StatementList))
; (fun __caml_parser_env ->
    Obj.repr(
# 600 "parser.mly"
  ( Irg.NOP )
# 2861 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 602 "parser.mly"
  ( Irg.EVAL ("", "action") )
# 2867 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 604 "parser.mly"
  ( Irg.EVAL ("", _1) )
# 2874 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 606 "parser.mly"
  ( raise (Irg.SyntaxError (Printf.sprintf "unreduced macro '%s'" _1)) )
# 2881 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 608 "parser.mly"
  ( Irg.EVAL (_1, "action")  )
# 2888 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 610 "parser.mly"
  ( Irg.EVAL (_1, _3) )
# 2896 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Location) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 612 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_set _1 _3) )
# 2904 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ConditionalStatement) in
    Obj.repr(
# 614 "parser.mly"
  ( _1 )
# 2911 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ArgList) in
    Obj.repr(
# 616 "parser.mly"
  ( Sem.test_canonical _1; Sem.build_canonical_stat _1 (List.rev _3) )
# 2919 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 618 "parser.mly"
  ( handle_stat (fun _ -> Irg.ERROR _3) )
# 2926 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 620 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_local _2 _4) )
# 2935 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 622 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_typed_local _2 _4 _6) )
# 2945 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ForHeader) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 624 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_for _1 _3) )
# 2953 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 629 "parser.mly"
  ( Sem.prepare_for _2 Irg.NO_TYPE _4 _6 )
# 2962 "parser.ml"
               : 'ForHeader))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 631 "parser.mly"
  ( Sem.prepare_for _2 _4 _6 _8 )
# 2972 "parser.ml"
               : 'ForHeader))
; (fun __caml_parser_env ->
    Obj.repr(
# 635 "parser.mly"
             ( [] )
# 2978 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 636 "parser.mly"
       ( [_1] )
# 2985 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ArgList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 637 "parser.mly"
                      ( _3::_1 )
# 2993 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    Obj.repr(
# 642 "parser.mly"
  ( None )
# 2999 "parser.ml"
               : 'Opt_Bit_Optr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 644 "parser.mly"
  ( None )
# 3007 "parser.ml"
               : 'Opt_Bit_Optr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 649 "parser.mly"
  ( Sem.make_access_loc _1 Irg.NONE Irg.NONE Irg.NONE )
# 3014 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 651 "parser.mly"
  ( Sem.make_access_loc _1 Irg.NONE _3 _5 )
# 3023 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 653 "parser.mly"
  ( Sem.make_access_loc _1 _3 Irg.NONE Irg.NONE )
# 3031 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 655 "parser.mly"
  ( Sem.make_access_loc _1 _3 _6 _8 )
# 3041 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Location) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Location) in
    Obj.repr(
# 657 "parser.mly"
  ( Sem.make_concat_loc _1 _3 )
# 3049 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Location) in
    Obj.repr(
# 659 "parser.mly"
   ( _2 )
# 3056 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElse) in
    Obj.repr(
# 665 "parser.mly"
  ( Irg.IF_STAT (_2, _4, _5) )
# 3065 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElse) in
    Obj.repr(
# 667 "parser.mly"
  ( raise (Irg.SyntaxError "missing endif") )
# 3074 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'CaseBody) in
    Obj.repr(
# 669 "parser.mly"
  (Irg.SWITCH_STAT (_3, fst _6, snd _6))
# 3082 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    Obj.repr(
# 672 "parser.mly"
             ( Irg.NOP )
# 3088 "parser.ml"
               : 'OptionalElse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 673 "parser.mly"
                ( _2 )
# 3095 "parser.ml"
               : 'OptionalElse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseList) in
    Obj.repr(
# 678 "parser.mly"
          ( (_1,Irg.NOP) )
# 3102 "parser.ml"
               : 'CaseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'OptCaseList) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Default) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'OptCaseList) in
    Obj.repr(
# 679 "parser.mly"
                                  ( (_1@_3,_2) )
# 3111 "parser.ml"
               : 'CaseBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 682 "parser.mly"
             ( [] )
# 3117 "parser.ml"
               : 'OptCaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseList) in
    Obj.repr(
# 683 "parser.mly"
           ( _1 )
# 3124 "parser.ml"
               : 'OptCaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseStat) in
    Obj.repr(
# 687 "parser.mly"
             ( [_1]	)
# 3131 "parser.ml"
               : 'CaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'CaseList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'CaseStat) in
    Obj.repr(
# 688 "parser.mly"
                     ( _2::_1 )
# 3139 "parser.ml"
               : 'CaseList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 691 "parser.mly"
                          ( (_2,_4) )
# 3147 "parser.ml"
               : 'CaseStat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 695 "parser.mly"
                        (_3)
# 3154 "parser.ml"
               : 'Default))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 701 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_coerce _3 _5) )
# 3162 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 703 "parser.mly"
  ( syntax_error "syntax error in coerce expression" )
# 3168 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'ArgList) in
    Obj.repr(
# 705 "parser.mly"
  ( eline (Sem.build_format _3 _5) )
# 3176 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 707 "parser.mly"
  ( syntax_error "syntax error in format expression" )
# 3182 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ArgList) in
    Obj.repr(
# 709 "parser.mly"
  ( Sem.test_canonical _1; eline (Sem.build_canonical_expr _1 (List.rev _3)) )
# 3190 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 711 "parser.mly"
  (	if Irg.is_defined _1
			then eline (Irg.FIELDOF (Irg.STRING, _1,"syntax"))
			else error (Irg.asis (Printf.sprintf "the keyword %s is undefined\n" _1)) )
# 3199 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 715 "parser.mly"
  (	if Irg.is_defined _1
			then eline (Irg.FIELDOF (Irg.STRING, _1,"image"))
			else error (Irg.asis (Printf.sprintf "the keyword %s is undefined\n" _1)) )
# 3208 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 719 "parser.mly"
  ( eline (Irg.FIELDOF(Sem.type_of_field _1 _3, _1, _3)) )
# 3216 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 721 "parser.mly"
  (
			eline (Sem.get_binop _1 _3 Irg.CONCAT)
		)
# 3226 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 725 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_ref (Sem.unalias_local _1)) )
# 3233 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 727 "parser.mly"
  ( raise (Irg.SyntaxError "unreduced macro here") )
# 3240 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 729 "parser.mly"
  (
		let id = Sem.unalias_local _1 in
		if Irg.is_defined id then
			if (Sem.is_location id) || (Sem.is_loc_spe id)  || (Sem.is_loc_mode id)
				then
					eline (Irg.ITEMOF ((Sem.get_type_ident id), id, _3))
				else
					Irg.error (Irg.output [Irg.PTEXT _1; Irg.PTEXT " is not a valid location: type is "])
		else Irg.error (Irg.asis (Printf.sprintf "the keyword %s is undefined\n" _1))
		)
# 3257 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 740 "parser.mly"
  ( syntax_error "unclosed bracket expression" )
# 3264 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 742 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_bitfield _1 _3 _5) )
# 3273 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 744 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.ADD) )
# 3281 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 746 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.SUB) )
# 3289 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 748 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.MUL) )
# 3297 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 750 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.DIV) )
# 3305 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 752 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.MOD) )
# 3313 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 754 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.EXP) )
# 3321 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 756 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LSHIFT) )
# 3329 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 758 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.RSHIFT) )
# 3337 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 760 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LROTATE) )
# 3345 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 762 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.RROTATE) )
# 3353 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 764 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LT) )
# 3361 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 766 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.GT) )
# 3369 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 768 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LE) )
# 3377 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 770 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.GE) )
# 3385 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 772 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.EQ) )
# 3393 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 774 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.NE) )
# 3401 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 776 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_AND) )
# 3409 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 778 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_XOR) )
# 3417 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 780 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_OR) )
# 3425 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 782 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.NOT) )
# 3432 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 784 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.BIN_NOT) )
# 3439 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 786 "parser.mly"
  ( _2 )
# 3446 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 788 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.NEG) )
# 3453 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 790 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.AND) )
# 3461 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 792 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.OR) )
# 3469 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 794 "parser.mly"
  ( _2 )
# 3476 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 796 "parser.mly"
  ( syntax_error "no expression after '('" )
# 3482 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 798 "parser.mly"
  ( syntax_error "unclosed '('" )
# 3489 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 800 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_if_expr _2 _4 _6) )
# 3498 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 802 "parser.mly"
  ( syntax_error "malformed if expression" )
# 3504 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'CaseExprBody) in
    Obj.repr(
# 804 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_switch_expr _3 (fst _6) (snd _6)) )
# 3512 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 806 "parser.mly"
  ( syntax_error "malformed switch expression" )
# 3518 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Constant) in
    Obj.repr(
# 808 "parser.mly"
  ( eline (Irg.CONST (fst _1, snd _1)) )
# 3525 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 814 "parser.mly"
  ( (Irg.FLOAT(23, 9), Irg.FIXED_CONST  _1) )
# 3532 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 817 "parser.mly"
  ( (Irg.CARD 32, Irg.CARD_CONST _1) )
# 3539 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int64.t) in
    Obj.repr(
# 819 "parser.mly"
  ( (Irg.CARD 64, Irg.CARD_CONST_64 _1) )
# 3546 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t * int) in
    Obj.repr(
# 821 "parser.mly"
  ( (Irg.CARD (snd _1), Irg.CARD_CONST (fst _1)) )
# 3553 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int64.t * int) in
    Obj.repr(
# 823 "parser.mly"
  ( (Irg.CARD (snd _1), Irg.CARD_CONST_64 (fst _1)) )
# 3560 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 825 "parser.mly"
  (
			if  (Irg.is_defined_canon _1) then
				(Sem.test_canonical _1;
				let e = Irg.get_canon _1 in
					(e.Irg.type_res, Irg.CANON(_1)))
			else
				(Irg.STRING, Irg.STRING_CONST(_1))
		)
# 3574 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 840 "parser.mly"
  ( Sem.make_ref _1 )
# 3581 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 842 "parser.mly"
  ( eline (Sem.get_unop _2 Irg.NEG) )
# 3588 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 844 "parser.mly"
  ( _2 )
# 3595 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 846 "parser.mly"
  ( eline (Sem.get_unop _2 Irg.BIN_NOT) )
# 3602 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 848 "parser.mly"
  ( eline (Sem.get_binop _1 _3 Irg.ADD) )
# 3610 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 850 "parser.mly"
  ( eline (Sem.get_binop _1 _3 Irg.SUB) )
# 3618 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 852 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.MUL) )
# 3626 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 854 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.DIV) )
# 3634 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 856 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.MOD) )
# 3642 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 858 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.EXP) )
# 3650 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 860 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_AND) )
# 3658 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 862 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_OR) )
# 3666 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 864 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_XOR) )
# 3674 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 866 "parser.mly"
  ( _2 )
# 3681 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 868 "parser.mly"
  ( eline (Irg.CONST (Irg.FIX(8,24),Irg.FIXED_CONST _1)) )
# 3688 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 870 "parser.mly"
  ( eline (Irg.CONST (Irg.CARD 32,Irg.CARD_CONST _1)) )
# 3695 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 872 "parser.mly"
  (
			if  (Irg.is_defined_canon _1) then
				(Sem.test_canonical _1;
				let e = Irg.get_canon _1 in
					eline (Irg.CONST (e.Irg.type_res, Irg.CANON(_1))))
			else
				eline (Irg.CONST (Irg.STRING, Irg.STRING_CONST(_1)))
		)
# 3709 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprList) in
    Obj.repr(
# 884 "parser.mly"
              ( (_1,Irg.NONE) )
# 3716 "parser.ml"
               : 'CaseExprBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'OptCaseExprList) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ExprDefault) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'OptCaseExprList) in
    Obj.repr(
# 885 "parser.mly"
                                              ( (_1@_3,_2) )
# 3725 "parser.ml"
               : 'CaseExprBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 889 "parser.mly"
            ( [] )
# 3731 "parser.ml"
               : 'OptCaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprList) in
    Obj.repr(
# 890 "parser.mly"
               ( _1 )
# 3738 "parser.ml"
               : 'OptCaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprStat) in
    Obj.repr(
# 894 "parser.mly"
              ( [_1] )
# 3745 "parser.ml"
               : 'CaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'CaseExprList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprStat) in
    Obj.repr(
# 895 "parser.mly"
                              ( _2::_1 )
# 3753 "parser.ml"
               : 'CaseExprList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 899 "parser.mly"
                      ( (_2,_4) )
# 3761 "parser.ml"
               : 'CaseExprStat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 903 "parser.mly"
                    ( _3 )
# 3768 "parser.ml"
               : 'ExprDefault))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesOrSequence) in
    Obj.repr(
# 918 "parser.mly"
                ( )
# 3775 "parser.ml"
               : 'UsesDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesDef) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesOrSequence) in
    Obj.repr(
# 919 "parser.mly"
                               ( )
# 3783 "parser.ml"
               : 'UsesDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 923 "parser.mly"
               ( )
# 3790 "parser.ml"
               : 'UsesOrSequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesOrSequence) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 924 "parser.mly"
                                 ( )
# 3798 "parser.ml"
               : 'UsesOrSequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIndirectAtom) in
    Obj.repr(
# 928 "parser.mly"
                  ( )
# 3805 "parser.ml"
               : 'UsesIfAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'UsesIfAtom) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElseAtom) in
    Obj.repr(
# 929 "parser.mly"
                                                 ( )
# 3814 "parser.ml"
               : 'UsesIfAtom))
; (fun __caml_parser_env ->
    Obj.repr(
# 933 "parser.mly"
             ( )
# 3820 "parser.ml"
               : 'OptionalElseAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 934 "parser.mly"
                  ( )
# 3827 "parser.ml"
               : 'OptionalElseAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesCondAtom) in
    Obj.repr(
# 938 "parser.mly"
              ( )
# 3834 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 939 "parser.mly"
                ( )
# 3841 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'UsesDef) in
    Obj.repr(
# 940 "parser.mly"
                        ( )
# 3848 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'UsesLocationList) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 941 "parser.mly"
                                      ( )
# 3856 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'UsesLocationList) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'UsesDef) in
    Obj.repr(
# 942 "parser.mly"
                                                ( )
# 3864 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesAndAtom) in
    Obj.repr(
# 946 "parser.mly"
             ( )
# 3871 "parser.ml"
               : 'UsesCondAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'UsesAndAtom) in
    Obj.repr(
# 947 "parser.mly"
                                 ( )
# 3879 "parser.ml"
               : 'UsesCondAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'UsesLocationList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionList) in
    Obj.repr(
# 951 "parser.mly"
                                   ( )
# 3887 "parser.ml"
               : 'UsesAndAtom))
; (fun __caml_parser_env ->
    Obj.repr(
# 955 "parser.mly"
              ( )
# 3893 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ActionTimeList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalAction) in
    Obj.repr(
# 956 "parser.mly"
                                ( )
# 3901 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'TimeActionList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalTime) in
    Obj.repr(
# 957 "parser.mly"
                               ( )
# 3909 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 961 "parser.mly"
                          ( )
# 3916 "parser.ml"
               : 'ActionTimeList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'ActionTimeList) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'UsesActionAttr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 962 "parser.mly"
                                                                ( )
# 3925 "parser.ml"
               : 'ActionTimeList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 966 "parser.mly"
                      ( )
# 3932 "parser.ml"
               : 'TimeActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'TimeActionList) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 967 "parser.mly"
                                                                ( )
# 3941 "parser.ml"
               : 'TimeActionList))
; (fun __caml_parser_env ->
    Obj.repr(
# 971 "parser.mly"
             ( )
# 3947 "parser.ml"
               : 'OptionalAction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 972 "parser.mly"
                       ( )
# 3954 "parser.ml"
               : 'OptionalAction))
; (fun __caml_parser_env ->
    Obj.repr(
# 976 "parser.mly"
             ( )
# 3960 "parser.ml"
               : 'OptionalTime))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 977 "parser.mly"
                           ( )
# 3967 "parser.ml"
               : 'OptionalTime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 981 "parser.mly"
      ( )
# 3974 "parser.ml"
               : 'UsesActionAttr))
; (fun __caml_parser_env ->
    Obj.repr(
# 982 "parser.mly"
            ( )
# 3980 "parser.ml"
               : 'UsesActionAttr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesLocation) in
    Obj.repr(
# 986 "parser.mly"
              ( )
# 3987 "parser.ml"
               : 'UsesLocationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesLocationList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesLocation) in
    Obj.repr(
# 987 "parser.mly"
                                         ( )
# 3995 "parser.ml"
               : 'UsesLocationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Opt_Bit_Optr) in
    Obj.repr(
# 991 "parser.mly"
                 ( )
# 4003 "parser.ml"
               : 'UsesLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Opt_SecDim) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Opt_Bit_Optr) in
    Obj.repr(
# 992 "parser.mly"
                                                ( )
# 4013 "parser.ml"
               : 'UsesLocation))
; (fun __caml_parser_env ->
    Obj.repr(
# 996 "parser.mly"
              ( )
# 4019 "parser.ml"
               : 'Opt_SecDim))
; (fun __caml_parser_env ->
    Obj.repr(
# 997 "parser.mly"
                ( )
# 4025 "parser.ml"
               : 'Opt_SecDim))
(* Entry top *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let top (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
