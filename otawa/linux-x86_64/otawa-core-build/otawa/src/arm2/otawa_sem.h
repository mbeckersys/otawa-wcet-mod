/* Generated by gliss-attr (119/02/20 18:20:02) copyright (c) 2009 IRIT - UPS */

extern "C" {
#include <arm/api.h>
#include <arm/id.h>
#include <arm/macros.h>
#include <arm/grt.h>
}

typedef void (*sem_fun_t)(arm_inst_t *inst, otawa::sem::Block& block);

/*** functions ***/

static void otawa_sem_UNKNOWN(arm_inst_t *inst, otawa::sem::Block& block) {
}

static void otawa_sem_MOV_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if((((uint32_t)(ARM_MOV_S__S_i_x_H)) == 1))
		__gtmp_0 = _GPR((((uint32_t)(ARM_MOV_S__S_i_x_rd_ro)) + 8));
	else
		__gtmp_0 = _GPR(((uint32_t)(ARM_MOV_S__S_i_x_rd_ro)));
	block.add(sem::set(__gtmp_0, _GPR(((uint32_t)(ARM_MOV_S__S_i_x_rm_r)))));

};

static void otawa_sem_MOVS_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(_GPR(((uint32_t)(ARM_MOVS_RD___ID_i_x_rd_ro))), ARM_MOVS_RD___ID_i_x_imm_n));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_TST_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBS_RD__RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUB_SP___ID__2A_4(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBS_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRH_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRH_RD___LT_RD___ID__2A_2_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRB_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRB_RD___LT_RD___ID_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STR_RD___LT_SP___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STR_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STR_RD___LT_RD___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STMIA_RD_21___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SBCS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SBCS_RD__RD_i_x_rd_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RORS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_RORS_RD__RD_i_x_rd_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_PUSH__LB_SS_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	block.add(sem::seti(0xfffffffeLU, 4));
	if((0 == 1)) {
		block.add(sem::sub(_GPR(13), _GPR(13), 0xfffffffeLU));
		block.add(sem::store(0xffffffffLU, _GPR(13), 4));
	}
	ii = ((int32_t)(8));
gliss_PUSH__LB_SS_RB__0_:
	if((ii > ((int32_t)(0)))) {
		ii = (ii - ((int32_t)(1)));
		if((((uint32_t)(arm_field8_generic(ARM_PUSH__LB_SS_RB__i_x_llist_r, ii, ii, 1 ))) == 1)) {
			block.add(sem::sub(_GPR(13), _GPR(13), 0xfffffffeLU));
			block.add(sem::store(_GPR(((uint32_t)(ii))), _GPR(13), 4));
		}
goto gliss_PUSH__LB_SS_RB__0_;
	}

};

static void otawa_sem_PUSH__LB_SS_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	block.add(sem::seti(0xfffffffeLU, 4));
	if((1 == 1)) {
		block.add(sem::sub(_GPR(13), _GPR(13), 0xfffffffeLU));
		block.add(sem::store(0xffffffffLU, _GPR(13), 4));
	}
	ii = ((int32_t)(8));
gliss_PUSH__LB_SS_RB__0_1_:
	if((ii > ((int32_t)(0)))) {
		ii = (ii - ((int32_t)(1)));
		if((((uint32_t)(arm_field8_generic(ARM_PUSH__LB_SS_RB__0_i_x_llist_r, ii, ii, 1 ))) == 1)) {
			block.add(sem::sub(_GPR(13), _GPR(13), 0xfffffffeLU));
			block.add(sem::store(_GPR(((uint32_t)(ii))), _GPR(13), 4));
		}
goto gliss_PUSH__LB_SS_RB__0_1_;
	}

};

static void otawa_sem_POP__LB_SS_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	ii = ((int32_t)(0));
	block.add(sem::seti(0xfffffffeLU, 4));
gliss_POP__LB_SS_RB__2_:
	if((ii < ((int32_t)(8)))) {
		if((((uint32_t)(arm_field8_generic(ARM_POP__LB_SS_RB__i_x_llist_r, ii, ii, 1 ))) == 1)) {
			block.add(sem::load(_GPR(((uint32_t)(ii))), _GPR(13), 7));
			block.add(sem::add(_GPR(13), _GPR(13), 0xfffffffeLU));
		}
		ii = (ii + ((int32_t)(1)));
goto gliss_POP__LB_SS_RB__2_;
	}
	if((0 == 1)) {
		block.add(sem::load(0xffffffffLU, _GPR(13), 7));
		block.add(sem::add(_GPR(13), _GPR(13), 0xfffffffeLU));
		block.add(sem::branch(0xffffffffLU));
	}

};

static void otawa_sem_POP__LB_SS_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	ii = ((int32_t)(0));
	block.add(sem::seti(0xfffffffeLU, 4));
gliss_POP__LB_SS_RB__0_3_:
	if((ii < ((int32_t)(8)))) {
		if((((uint32_t)(arm_field8_generic(ARM_POP__LB_SS_RB__0_i_x_llist_r, ii, ii, 1 ))) == 1)) {
			block.add(sem::load(_GPR(((uint32_t)(ii))), _GPR(13), 7));
			block.add(sem::add(_GPR(13), _GPR(13), 0xfffffffeLU));
		}
		ii = (ii + ((int32_t)(1)));
goto gliss_POP__LB_SS_RB__0_3_;
	}
	if((1 == 1)) {
		block.add(sem::load(0xffffffffLU, _GPR(13), 7));
		block.add(sem::add(_GPR(13), _GPR(13), 0xfffffffeLU));
		block.add(sem::branch(0xffffffffLU));
	}

};

static void otawa_sem_ORRS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_or(_GPR(((uint32_t)(ARM_ORRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ORRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ORRS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_NEGS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::neg(_GPR(((uint32_t)(ARM_NEGS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_NEGS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_MVNS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_not(_GPR(((uint32_t)(ARM_MVNS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_MVNS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_MULS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::mul(_GPR(((uint32_t)(ARM_MULS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_MULS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_MULS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LSRS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::shr(_GPR(((uint32_t)(ARM_LSRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSRS_RD__RD_i_x_rs_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LSRS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_LSRS_RD__RD___ID_i_x_imm5_n));
	block.add(sem::shr(_GPR(((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_rm_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LSLS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::shl(_GPR(((uint32_t)(ARM_LSLS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSLS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSLS_RD__RD_i_x_rs_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LSLS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_LSLS_RD__RD___ID_i_x_imm_n));
	block.add(sem::shl(_GPR(((uint32_t)(ARM_LSLS_RD__RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSLS_RD__RD___ID_i_x_rm_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LDRSH_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_RD___LT_RD__RD__RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRSH_RD___LT_RD__RD__RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSH_RD___LT_RD__RD__RT__i_x_rd_ro))), 0xffffffffLU, 2));

};

static void otawa_sem_LDRSB_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSB_RD___LT_RD__RD__RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRSB_RD___LT_RD__RD__RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSB_RD___LT_RD__RD__RT__i_x_rd_ro))), 0xffffffffLU, 1));

};

static void otawa_sem_LDRH_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRH_RD___LT_RD__RD__RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRH_RD___LT_RD__RD__RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRH_RD___LT_RD__RD__RT__i_x_rd_ro))), 0xffffffffLU, 6));

};

static void otawa_sem_LDRH_RD___LT_RD___ID__2A_2_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, (((uint32_t)(ARM_LDRH_RD___LT_RD___ID__2A_2_RT__i_x_imm_n)) * 2)));
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRH_RD___LT_RD___ID__2A_2_RT__i_x_rn_ro))), 0xffffffffLU));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRH_RD___LT_RD___ID__2A_2_RT__i_x_rd_ro))), 0xffffffffLU, 6));

};

static void otawa_sem_LDRB_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRB_RD___LT_RD__RD__RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRB_RD___LT_RD__RD__RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRB_RD___LT_RD__RD__RT__i_x_rd_ro))), 0xffffffffLU, 5));

};

static void otawa_sem_LDRB_RD___LT_RD___ID_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_LDRB_RD___LT_RD___ID_RT__i_x_imm_n));
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRB_RD___LT_RD___ID_RT__i_x_rn_ro))), 0xffffffffLU));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRB_RD___LT_RD___ID_RT__i_x_rd_ro))), 0xffffffffLU, 5));

};

static void otawa_sem_LDR_RD___LT_SP___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ((uint32_t)((((int32_t)(ARM_LDR_RD___LT_SP___ID__2A_4_RT__i_x_imm_n)) * ((int32_t)(4)))))));
	block.add(sem::add(0xffffffffLU, _GPR(13), 0xffffffffLU));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDR_RD___LT_SP___ID__2A_4_RT__i_x_rd_ro))), 0xffffffffLU, 7));

};

static void otawa_sem_LDR_RD___LT_PC___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ((ARM_LDR_RD___LT_PC___ID__2A_4_RT____IADDR + 8) + (((uint32_t)(ARM_LDR_RD___LT_PC___ID__2A_4_RT__i_x_imm_n)) * 4))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDR_RD___LT_PC___ID__2A_4_RT__i_x_rd_ro))), 0xffffffffLU, 7));

};

static void otawa_sem_LDR_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDR_RD___LT_RD__RD__RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDR_RD___LT_RD__RD__RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDR_RD___LT_RD__RD__RT__i_x_rd_ro))), 0xffffffffLU, 7));

};

static void otawa_sem_LDR_RD___LT_RD___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, (((uint32_t)(ARM_LDR_RD___LT_RD___ID__2A_4_RT__i_x_imm_n)) * 4)));
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDR_RD___LT_RD___ID__2A_4_RT__i_x_rn_ro))), 0xffffffffLU));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDR_RD___LT_RD___ID__2A_4_RT__i_x_rd_ro))), 0xffffffffLU, 7));

};

static void otawa_sem_LDMIA_RD_21___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t sem_rec_first;
	int32_t ii;
	block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMIA_RD_21___LB_S_RB__i_x_rn_ro)))));
	block.add(sem::seti(0xfffffffeLU, 4));
	ii = ((int32_t)(0));
	sem_rec_first = ((int32_t)(1));
gliss_LDMIA_RD_21___LB_S_RB__4_:
	if((ii < ((int32_t)(8)))) {
		if((((uint32_t)(arm_field8_generic(ARM_LDMIA_RD_21___LB_S_RB__i_x_llist_r, ii, ii, 1 ))) == 1)) {
			if((sem_rec_first == ((int32_t)(0))))
				block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
			block.add(sem::load(_GPR(((uint32_t)(ii))), 0xffffffffLU, 7));
			sem_rec_first = ((int32_t)(0));
		}
		ii = (ii + ((int32_t)(1)));
goto gliss_LDMIA_RD_21___LB_S_RB__4_;
	}
	block.add(sem::set(_GPR(((uint32_t)(ARM_LDMIA_RD_21___LB_S_RB__i_x_rn_ro))), 0xffffffffLU));

};

static void otawa_sem_EORS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_xor(_GPR(((uint32_t)(ARM_EORS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_EORS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_EORS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_CMP_RD__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_CMP_RD__S_i_x_H)) == 1))
		block.add(sem::cmp(_CPSR(), _GPR((((uint32_t)(ARM_CMP_RD__S_i_x_rn_ro)) + 8)), _GPR(((uint32_t)(ARM_CMP_RD__S_i_x_rm_r)))));
	else
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMP_RD__S_i_x_rn_ro))), _GPR(((uint32_t)(ARM_CMP_RD__S_i_x_rm_r)))));

};

static void otawa_sem_CMP_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMP_RD__RD_i_x_rn_ro))), _GPR(((uint32_t)(ARM_CMP_RD__RD_i_x_rm_ro)))));

};

static void otawa_sem_CMP_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_CMP_RD___ID_i_x_imm_n));
	block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMP_RD___ID_i_x_rn_ro))), 0xffffffffLU));

};

static void otawa_sem_CMN_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_CMN_RD__RD_i_x_rm_ro)))));
	block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMN_RD__RD_i_x_rn_ro))), 0xffffffffLU));

};

static void otawa_sem_BX_S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::branch(_GPR(((uint32_t)(ARM_BX_S_i_x_rm_r)))));

};

static void otawa_sem_BLX_S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(_GPR(14), (ARM_BLX_S___IADDR + 2)));
	block.add(sem::branch(_GPR(((uint32_t)(ARM_BLX_S_i_x_rm_r)))));

};

static void otawa_sem_BL_LR___I08X(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_BL_LR___I08X_i_x_H) {
	case 3:
		block.add(sem::seti(0xffffffffLU, (__ARM_EXTS16(21, ((int32_t)(ARM_BL_LR___I08X_i_x_offs_n))) << 1)));
		block.add(sem::add(0xffffffffLU, _GPR(14), 0xffffffffLU));
		block.add(sem::branch(0xffffffffLU));
		block.add(sem::seti(_GPR(14), (ARM_BL_LR___I08X___IADDR + 2)));
		break;
	case 2:
		block.add(sem::seti(_GPR(14), ((((int32_t)((ARM_BL_LR___I08X___IADDR + 4))) + __ARM_EXTS16(21, ((int32_t)(ARM_BL_LR___I08X_i_x_offs_n)))) << 12)));
		break;
	case 1:
		block.add(sem::seti(0xffffffffLU, (__ARM_EXTS16(21, ((int32_t)(ARM_BL_LR___I08X_i_x_offs_n))) << 1)));
		block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(14)));
		block.add(sem::branch(0xffffffffLU));
		block.add(sem::seti(_GPR(14), (ARM_BL_LR___I08X___IADDR + 2)));
		break;
	case 0:
		block.add(sem::branch(((((int32_t)((ARM_BL_LR___I08X___IADDR + 4))) + __ARM_EXTS16(21, ((int32_t)(ARM_BL_LR___I08X_i_x_offs_n)))) << 1)));
		break;
	}

};

static void otawa_sem_BICS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_not(0xffffffffLU, _GPR(((uint32_t)(ARM_BICS_RD__RD_i_x_rm_ro)))));
	block.add(sem::_and(_GPR(((uint32_t)(ARM_BICS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_BICS_RD__RD_i_x_rd_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_S_08X(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	block.add(sem::seti(0xffffffffLU, ((((int32_t)((ARM_S_08X___IADDR + 4))) + ((int32_t)(ARM_S_08X_i_x_simm_n))) << 1)));
	if((((uint32_t)(ARM_S_08X_i_x_cond)) == 14))
		block.add(sem::branch(0xffffffffLU));
	else {
		if((((uint32_t)(ARM_S_08X_i_x_cond)) == 15))
			block.add(sem::trap());
		else {
			switch(ARM_S_08X_i_x_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::branch(0xffffffffLU));
		}
	}

};

static void otawa_sem_ASRS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::asr(_GPR(((uint32_t)(ARM_ASRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ASRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ASRS_RD__RD_i_x_rs_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ASRS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_ASRS_RD__RD___ID_i_x_imm_n));
	block.add(sem::asr(_GPR(((uint32_t)(ARM_ASRS_RD__RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ASRS_RD__RD___ID_i_x_rm_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ANDS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_and(_GPR(((uint32_t)(ARM_ANDS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ANDS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ANDS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADD_RD__S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADD_RD__S_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ADD_RD__S_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ADD_RD__S_i_x_rm_r)))));

};

static void otawa_sem_ADDS_RD__RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADDS_RD__RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ADDS_RD__RD__RD_i_x_rm_ro))), _GPR(((uint32_t)(ARM_ADDS_RD__RD__RD_i_x_rn_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADD_SP__SP___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(_GPR(13), _GPR(13), (__ARM_EXTS8(25, ((int32_t)(ARM_ADD_SP__SP___ID_i_x_imm_n))) << 2)));

};

static void otawa_sem_ADD_RD__SP___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADD_RD__SP___ID_i_x_rd_ro))), _GPR(13), (((int32_t)(ARM_ADD_RD__SP___ID_i_x_imm_n)) << 2)));

};

static void otawa_sem_ADD_RD__PC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(_GPR(((uint32_t)(ARM_ADD_RD__PC___ID_i_x_rd_ro))), ((((int32_t)(((ARM_ADD_RD__PC___ID___IADDR + 4) & 0xfffffffcLU))) + ((int32_t)(ARM_ADD_RD__PC___ID_i_x_imm_n))) << 2)));

};

static void otawa_sem_ADDS_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_ADDS_RD___ID_i_x_imm_n));
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADDS_RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ADDS_RD___ID_i_x_rd_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADDS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_ADDS_RD__RD___ID_i_x_imm_n));
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADDS_RD__RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ADDS_RD__RD___ID_i_x_rn_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADCS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADCS_RD__RD_i_x_rd_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_MRCS_D__D__S__CRD__CRD__D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSS_D__D___LT_RD_RT___D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSS_D__D___LT_RD_RT____ISD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSS_D__D___LT_RD___ISD_RT__21(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSS_D__D___LT_RD___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSS_D__D___LT_RD_RT___D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSS_D__D___LT_RD_RT____ISD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSS_D__D___LT_RD___ISD_RT__21(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSS_D__D___LT_RD___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MRSS_S__CPSR(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MRSS_S__SPSR(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR___S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_XC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FS__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_C__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_X__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR___S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_XC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FS__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_C__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_X__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR____ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_XC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FS___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_C___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_X___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR____ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_XC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FS___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_C___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_X___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CDPS_D__D__D__D__D__D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BFIS_S___ID___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_BFIS_S___ID___ID_x_rd_r)))));

};

static void otawa_sem_CLZS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_CLZS_S__S_x_rd_r)))));

};

static void otawa_sem_SWPS_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_SWPS_S__S___LT_S_RT__x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_SWPS_S__S___LT_S_RT__x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SWPS_S__S___LT_S_RT__x_rd_r)))));
			block.add(sem::cont());
		}
		block.add(sem::scratch(0xffffffffLU));
		if((0 == 1))
			__gtmp_0 = 1;
		else
			__gtmp_0 = 4;
		block.add(sem::store(0xffffffffLU, _GPR(((uint32_t)(ARM_SWPS_S__S___LT_S_RT__x_rn_r))), __gtmp_0));
		block.add(sem::scratch(_GPR(((uint32_t)(ARM_SWPS_S__S___LT_S_RT__x_rd_r)))));
	}

};

static void otawa_sem_SWPSB_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_SWPSB_S__S___LT_S_RT__x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_SWPSB_S__S___LT_S_RT__x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SWPSB_S__S___LT_S_RT__x_rd_r)))));
			block.add(sem::cont());
		}
		block.add(sem::scratch(0xffffffffLU));
		if((1 == 1))
			__gtmp_0 = 1;
		else
			__gtmp_0 = 4;
		block.add(sem::store(0xffffffffLU, _GPR(((uint32_t)(ARM_SWPSB_S__S___LT_S_RT__x_rn_r))), __gtmp_0));
		block.add(sem::scratch(_GPR(((uint32_t)(ARM_SWPSB_S__S___LT_S_RT__x_rd_r)))));
	}

};

static void otawa_sem_UMLALSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_UMLALSS_S_S_S_S_x_rdlo_r)))));
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_UMLALSS_S_S_S_S_x_rdhi_r)))));
	if(ARM_UMLALSS_S_S_S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_SMLALSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SMLALSS_S_S_S_S_x_rdlo_r)))));
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SMLALSS_S_S_S_S_x_rdhi_r)))));
	if(ARM_SMLALSS_S_S_S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_UMULLSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_UMULLSS_S_S_S_S_x_rdlo_r)))));
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_UMULLSS_S_S_S_S_x_rdhi_r)))));
	if(ARM_UMULLSS_S_S_S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_SMULLSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rdlo_r)))));
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rdhi_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rs_r)) == 15) || (((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_SMULLSS_S_S_S_S___IADDR + 8)));
		block.add(sem::mul(_GPR(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rdlo_r))), _GPR(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rm_r))), _GPR(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rs_r)))));
		block.add(sem::mulh(_GPR(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rdhi_r))), _GPR(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rm_r))), _GPR(((uint32_t)(ARM_SMULLSS_S_S_S_S_x_rs_r)))));
		if(ARM_SMULLSS_S_S_S_S_x_sets_set)
			block.add(sem::scratch(_CPSR()));
	}

};

static void otawa_sem_MULSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_MULSS_S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_MULSS_S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_MULSS_S__S__S_x_rs_r)) == 15) || (((uint32_t)(ARM_MULSS_S__S__S_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_MULSS_S__S__S___IADDR + 8)));
		block.add(sem::mul(_GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rm_r))), _GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rs_r)))));
		if(ARM_MULSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MLASS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_MLASS_S__S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_MLASS_S__S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((((uint32_t)(ARM_MLASS_S__S__S__S_x_rn_r)) == 15) || (((uint32_t)(ARM_MLASS_S__S__S__S_x_rm_r)) == 15)) || (((uint32_t)(ARM_MLASS_S__S__S__S_x_rs_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_MLASS_S__S__S__S___IADDR + 8)));
		block.add(sem::mul(0xffffffffLU, _GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rm_r))), _GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rs_r)))));
		block.add(sem::add(_GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rd_r))), 0xffffffffLU, _GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rn_r)))));
		if(ARM_MLASS_S__S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_SWIS_D(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_SWIS_D_x_cond_cond)) == 15)) {
		block.add(sem::scratch(0xffffffffLU));
		if((((uint32_t)(ARM_SWIS_D_x_cond_cond)) == 14))
			block.add(sem::trap());
		else {
			switch(ARM_SWIS_D_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(_CPSR(), __gtmp_0, 1));
			block.add(sem::trap());
		}
	}

};

static void otawa_sem_LDMSS_SS___LB_S_RB_S(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t sem_rec_first;
	int32_t ii;
	uint32_t cnt;
	if(!(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_cond_cond)) == 14)) {
			ii = ((int32_t)(0));
gliss_LDMSS_SS___LB_S_RB_S_5_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1))
					block.add(sem::scratch(_GPR(((uint32_t)(ii)))));
				ii = (ii + ((int32_t)(1)));
goto gliss_LDMSS_SS___LB_S_RB_S_5_;
			}
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r)))));
		}
		else {
			if(((((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r)) == 15) || (((uint32_t)(arm_bit16(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, 15))) == 1)))
				block.add(sem::seti(_GPR(15), (ARM_LDMSS_SS___LB_S_RB_S___IADDR + 8)));
			cnt = 0;
			ii = ((int32_t)(0));
gliss_LDMSS_SS___LB_S_RB_S_6_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1))
					cnt = (cnt + 1);
				ii = (ii + ((int32_t)(1)));
goto gliss_LDMSS_SS___LB_S_RB_S_6_;
			}
			block.add(sem::seti(0xfffffffeLU, 4));
			switch(ARM_LDMSS_SS___LB_S_RB_S_x_adr_mode) {
			case 3:
				block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffeLU));
				block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffeLU));
				block.add(sem::seti(0xfffffffdLU, ((cnt * 4) - 4)));
				block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
				break;
			case 2:
				block.add(sem::seti(0xffffffffLU, (cnt * 4)));
				block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
				block.add(sem::set(0xfffffffdLU, 0xffffffffLU));
				break;
			case 1:
				block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r)))));
				block.add(sem::seti(0xfffffffdLU, (cnt * 4)));
				block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
				break;
			case 0:
				block.add(sem::seti(0xffffffffLU, ((cnt * 4) - 4)));
				block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
				block.add(sem::sub(0xfffffffdLU, 0xffffffffLU, 0xfffffffeLU));
				break;
			}
			ii = ((int32_t)(0));
			sem_rec_first = ((int32_t)(1));
gliss_LDMSS_SS___LB_S_RB_S_7_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1)) {
					if((sem_rec_first == ((int32_t)(0))))
						block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
					block.add(sem::load(_GPR(((uint32_t)(ii))), 0xffffffffLU, 7));
					sem_rec_first = ((int32_t)(0));
				}
				ii = (ii + ((int32_t)(1)));
goto gliss_LDMSS_SS___LB_S_RB_S_7_;
			}
			if((((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffdLU));
			if((((uint32_t)(arm_bit16(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, 15))) == 1))
				block.add(sem::branch(_GPR(15)));
		}
	}

};

static void otawa_sem_STMSS_SS___LB_S_RB_S(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t sem_rec_first;
	int32_t ii;
	uint32_t cnt;
	if(!(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(0xffffffffLU));
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
			block.add(sem::store(0xffffffffLU, 0xfffffffeLU, 7));
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r)))));
			block.add(sem::cont());
		}
		else {
			if(((((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r)) == 15) || (((uint32_t)(arm_bit16(ARM_STMSS_SS___LB_S_RB_S_x_reglist_r, 15))) == 1)))
				block.add(sem::seti(_GPR(15), (ARM_STMSS_SS___LB_S_RB_S___IADDR + 8)));
			cnt = 0;
			ii = ((int32_t)(0));
gliss_STMSS_SS___LB_S_RB_S_8_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_STMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1))
					cnt = (cnt + 1);
				ii = (ii + ((int32_t)(1)));
goto gliss_STMSS_SS___LB_S_RB_S_8_;
			}
			block.add(sem::seti(0xfffffffeLU, 4));
			switch(ARM_STMSS_SS___LB_S_RB_S_x_adr_mode) {
			case 3:
				block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffeLU));
				block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffeLU));
				block.add(sem::seti(0xfffffffdLU, ((cnt * 4) - 4)));
				block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
				break;
			case 2:
				block.add(sem::seti(0xffffffffLU, (cnt * 4)));
				block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
				block.add(sem::set(0xfffffffdLU, 0xffffffffLU));
				break;
			case 1:
				block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r)))));
				block.add(sem::seti(0xfffffffdLU, (cnt * 4)));
				block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
				break;
			case 0:
				block.add(sem::seti(0xffffffffLU, ((cnt * 4) - 4)));
				block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
				block.add(sem::sub(0xfffffffdLU, 0xffffffffLU, 0xfffffffeLU));
				break;
			}
			ii = ((int32_t)(0));
			sem_rec_first = ((int32_t)(1));
gliss_STMSS_SS___LB_S_RB_S_9_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_STMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1)) {
					if((sem_rec_first == ((int32_t)(0))))
						block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
					block.add(sem::store(_GPR(((uint32_t)(ii))), 0xffffffffLU, 7));
					sem_rec_first = ((int32_t)(0));
				}
				ii = (ii + ((int32_t)(1)));
goto gliss_STMSS_SS___LB_S_RB_S_9_;
			}
			if((((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffdLU));
		}
	}

};

static void otawa_sem_LDRSSH_S___LT_SS_SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rd_r)))));
			if(ARM_LDRSSH_S___LT_SS_SSSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rn_r)) == 15) || (((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSH_S___LT_SS_SSSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rm_r)))));
		else
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rm_r)))));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rn_r)))));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rd_r))), 0xfffffffeLU, 2));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_SSSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_LDRSSH_S___LT_SS_S_ILUSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint8_t __gtmp_0;
	if(!(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rd_r)))));
			if(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSH_S___LT_SS_S_ILUSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_setu)) == 0))
			__gtmp_0 = -arm_concat8(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_immh, ARM_LDRSSH_S___LT_SS_S_ILUSS_x_imml, 4, 4);
		else
			__gtmp_0 = arm_concat8(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_immh, ARM_LDRSSH_S___LT_SS_S_ILUSS_x_imml, 4, 4);
		block.add(sem::seti(0xfffffffeLU, ((uint32_t)(__gtmp_0))));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xfffffffeLU));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rd_r))), 0xffffffffLU, 2));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_LDRSSB_S___LT_SS_SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rd_r)))));
			if(ARM_LDRSSB_S___LT_SS_SSSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rn_r)) == 15) || (((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSB_S___LT_SS_SSSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rm_r)))));
		else
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rm_r)))));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rn_r)))));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rd_r))), 0xfffffffeLU, 1));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_SSSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_LDRSSB_S___LT_SS_S_ILUSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint8_t __gtmp_0;
	if(!(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rd_r)))));
			if(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSB_S___LT_SS_S_ILUSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_setu)) == 0))
			__gtmp_0 = -arm_concat8(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_immh, ARM_LDRSSB_S___LT_SS_S_ILUSS_x_imml, 4, 4);
		else
			__gtmp_0 = arm_concat8(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_immh, ARM_LDRSSB_S___LT_SS_S_ILUSS_x_imml, 4, 4);
		block.add(sem::seti(0xfffffffeLU, ((uint32_t)(__gtmp_0))));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rn_r))), 0xfffffffeLU));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rd_r))), 0xffffffffLU, 1));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rn_r))), 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS_S_ILUSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_LDRSH_S___LT_SS_SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rd_r)))));
			if(ARM_LDRSH_S___LT_SS_SSSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rn_r)) == 15) || (((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_LDRSH_S___LT_SS_SSSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rm_r)))));
		else
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rm_r)))));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rn_r)))));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rd_r))), 0xfffffffeLU, 6));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_SSSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_LDRSH_S___LT_SS_S_ILUSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint8_t __gtmp_0;
	if(!(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rd_r)))));
			if(ARM_LDRSH_S___LT_SS_S_ILUSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_LDRSH_S___LT_SS_S_ILUSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_setu)) == 0))
			__gtmp_0 = -arm_concat8(ARM_LDRSH_S___LT_SS_S_ILUSS_x_immh, ARM_LDRSH_S___LT_SS_S_ILUSS_x_imml, 4, 4);
		else
			__gtmp_0 = arm_concat8(ARM_LDRSH_S___LT_SS_S_ILUSS_x_immh, ARM_LDRSH_S___LT_SS_S_ILUSS_x_imml, 4, 4);
		block.add(sem::seti(0xfffffffeLU, ((uint32_t)(__gtmp_0))));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xfffffffeLU));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rd_r))), 0xffffffffLU, 6));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_STRSH_S___LT_SS_SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_cond_cond)) == 15)) {
		if((!(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_cond_cond)) == 14) && ARM_STRSH_S___LT_SS_SSSS_x_setw)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rn_r)) == 15) || (((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rd_r)) == 15)) || (((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_STRSH_S___LT_SS_SSSS___IADDR + 8)));
		if((((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rm_r)))));
		else
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rm_r)))));
		if((((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rn_r)))));
		block.add(sem::store(_GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rd_r))), 0xfffffffeLU, 6));
		if((((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rn_r))), _GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STRSH_S___LT_SS_SSSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_STRSH_S___LT_SS_S_ILUSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint8_t __gtmp_0;
	if(!(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_cond_cond)) == 15)) {
		if((!(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_cond_cond)) == 14) && ARM_STRSH_S___LT_SS_S_ILUSS_x_setw)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rn_r)) == 15) || (((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rd_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_STRSH_S___LT_SS_S_ILUSS___IADDR + 8)));
		if((((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_setu)) == 0))
			__gtmp_0 = -arm_concat8(ARM_STRSH_S___LT_SS_S_ILUSS_x_immh, ARM_STRSH_S___LT_SS_S_ILUSS_x_imml, 4, 4);
		else
			__gtmp_0 = arm_concat8(ARM_STRSH_S___LT_SS_S_ILUSS_x_immh, ARM_STRSH_S___LT_SS_S_ILUSS_x_imml, 4, 4);
		block.add(sem::seti(0xfffffffeLU, ((uint32_t)(__gtmp_0))));
		if((((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xfffffffeLU));
		block.add(sem::store(_GPR(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rd_r))), 0xffffffffLU, 6));
		if((((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rn_r))), _GPR(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STRSH_S___LT_SS_S_ILUSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_STRSSS_S___LT_SS__SS__S__IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond)) == 15)) {
		if((!(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond)) == 14) && ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setw)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)) == 15) || (((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rd_r)) == 15)) || (((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_STRSSS_S___LT_SS__SS__S__IDSS___IADDR + 8)));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt))));
			switch(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, 0xffffffffLU));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)))));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setb)) == 1))
			__gtmp_0 = 5;
		else
			__gtmp_0 = 7;
		block.add(sem::store(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rd_r))), 0xfffffffeLU, __gtmp_0));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_LDRSSS_S___LT_SS__SS__S__IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r)))));
			if(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)) == 15) || (((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSS_S___LT_SS__SS__S__IDSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt))));
			switch(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, 0xffffffffLU));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)))));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setb)) == 1))
			__gtmp_0 = 5;
		else
			__gtmp_0 = 7;
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r))), 0xfffffffeLU, __gtmp_0));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_STRSSS_S___LT_SS___ISDSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_1;
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_cond_cond)) == 15)) {
		if((!(((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_cond_cond)) == 14) && ARM_STRSSS_S___LT_SS___ISDSS_x_setw)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_rn_r)) == 15) || (((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_rd_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_STRSSS_S___LT_SS___ISDSS___IADDR + 8)));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_setu)) == 0))
			__gtmp_0 = -((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_offset12_n));
		else
			__gtmp_0 = ((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_offset12_n));
		block.add(sem::seti(0xfffffffeLU, __gtmp_0));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_rn_r))), 0xfffffffeLU));
		if(ARM_STRSSS_S___LT_SS___ISDSS_x_setb)
			__gtmp_1 = 5;
		else
			__gtmp_1 = 7;
		block.add(sem::store(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_rd_r))), 0xffffffffLU, __gtmp_1));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_rn_r))), 0xffffffffLU, 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS___ISDSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_LDRSSS_S___LT_SS___ISDSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_1;
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_rd_r)))));
			if(ARM_LDRSSS_S___LT_SS___ISDSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSS_S___LT_SS___ISDSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_setu)) == 0))
			__gtmp_0 = -((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_offset12_n));
		else
			__gtmp_0 = ((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_offset12_n));
		block.add(sem::seti(0xfffffffeLU, __gtmp_0));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_rn_r))), 0xfffffffeLU));
		if(ARM_LDRSSS_S___LT_SS___ISDSS_x_setb)
			__gtmp_1 = 5;
		else
			__gtmp_1 = 7;
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_rd_r))), 0xffffffffLU, __gtmp_1));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_rn_r))), 0xffffffffLU, 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS___ISDSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_BSS_X(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_BSS_X_x_cond_cond)) == 15)) {
		block.add(sem::seti(0xffffffffLU, ((ARM_BSS_X___IADDR + 8) + arm_concat32(((int32_t)(ARM_BSS_X_x_signed_immed_24_n)), 0, 30, 2))));
		if((((uint32_t)(ARM_BSS_X_x_setl)) == 1))
			block.add(sem::seti(_GPR(14), (ARM_BSS_X___IADDR + 4)));
		if((((uint32_t)(ARM_BSS_X_x_cond_cond)) == 14))
			block.add(sem::branch(0xffffffffLU));
		else {
			switch(ARM_BSS_X_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::branch(0xffffffffLU));
		}
	}

};

static void otawa_sem_BXS_S(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_1;
	uint32_t __gtmp_0;
	if((((uint32_t)(ARM_BXS_S_x_rd_r)) == 15))
		block.add(sem::seti(_GPR(15), (ARM_BXS_S___IADDR + 8)));
	if(!(((uint32_t)(ARM_BXS_S_x_cond_cond)) == 15)) {
		if((((uint32_t)(ARM_BXS_S_x_cond_cond)) == 14))
			block.add(sem::branch(_GPR(((uint32_t)(ARM_BXS_S_x_rd_r)))));
		else {
			switch(ARM_BXS_S_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			switch(ARM_BXS_S_x_cond_cond) {
			case 0:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::EQ;
				break;
			case 1:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::NE;
				break;
			case 2:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::UGE;
				break;
			case 3:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::ULT;
				break;
			case 8:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::UGT;
				break;
			case 9:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::ULE;
				break;
			case 10:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::GE;
				break;
			case 11:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::LT;
				break;
			case 12:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::GT;
				break;
			case 13:
				switch(ARM_BXS_S_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::LE;
				break;
			default:
				__gtmp_1 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, __gtmp_1, 1));
			block.add(sem::branch(_GPR(((uint32_t)(ARM_BXS_S_x_rd_r)))));
		}
	}

};

static void otawa_sem_TSTS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_TSTS_S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_TSTS_S___ID_x_cond_cond)) == 14))
			block.add(sem::cont());
		if((((uint32_t)(ARM_TSTS_S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_TSTS_S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_and(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S___ID_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TSTS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_TSTS_S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_TSTS_S__S__S_S_x_cond_cond)) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_TSTS_S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_TSTS_S__S__S_S___IADDR + 8)));
		switch(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_and(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TSTS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_TSTS_S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_TSTS_S__S_x_cond_cond)) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_TSTS_S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_TSTS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_TSTS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_and(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TEQS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_TEQS_S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_TEQS_S___ID_x_cond_cond)) == 14))
			block.add(sem::cont());
		if((((uint32_t)(ARM_TEQS_S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_TEQS_S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_xor(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S___ID_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TEQS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_TEQS_S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_TEQS_S__S__S_S_x_cond_cond)) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_TEQS_S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_TEQS_S__S__S_S___IADDR + 8)));
		switch(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_xor(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TEQS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_TEQS_S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_TEQS_S__S_x_cond_cond)) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_TEQS_S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_TEQS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_TEQS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_xor(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_SUBSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_SUBSS_S__S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_SUBSS_S__S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SUBSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_SUBSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_SUBSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::sub(_GPR(((uint32_t)(ARM_SUBSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_SUBSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_SUBSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_SUBSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_SUBSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::sub(_GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_SUBSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_SUBSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_SUBSS_S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_SUBSS_S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_SUBSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_SUBSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::sub(_GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_SUBSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_SBCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SBCSS_S__S___ID_x_rd_r)))));
	if(ARM_SBCSS_S__S___ID_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_SBCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(0xffffffffLU));
		break;
	case 2:
		block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 1:
		block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 0:
		block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_rd_r)))));
	if(ARM_SBCSS_S__S__S__S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_SBCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_r_r)))));
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt))));
		switch(ARM_SBCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		}
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_rd_r)))));
	if(ARM_SBCSS_S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSCSS_S__S___ID_x_rd_r)))));
	if(ARM_RSCSS_S__S___ID_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(0xffffffffLU));
		break;
	case 2:
		block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 1:
		block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 0:
		block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_rd_r)))));
	if(ARM_RSCSS_S__S__S__S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_r_r)))));
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt))));
		switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		}
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_rd_r)))));
	if(ARM_RSCSS_S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSBSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_RSBSS_S__S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_RSBSS_S__S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSBSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_RSBSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_RSBSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::sub(_GPR(((uint32_t)(ARM_RSBSS_S__S___ID_x_rd_r))), 0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S___ID_x_rn_r)))));
		if(ARM_RSBSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_RSBSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_RSBSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_RSBSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::sub(_GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rn_r)))));
		if(ARM_RSBSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_RSBSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_RSBSS_S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_RSBSS_S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_RSBSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_RSBSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::sub(_GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_rd_r))), 0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_rn_r)))));
		if(ARM_RSBSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ORRSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ORRSS_S__S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ORRSS_S__S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ORRSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_ORRSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_ORRSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_or(_GPR(((uint32_t)(ARM_ORRSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_ORRSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ORRSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ORRSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ORRSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_or(_GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_ORRSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ORRSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ORRSS_S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ORRSS_S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ORRSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ORRSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_ORRSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_or(_GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_ORRSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MVNSS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_MVNSS_S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_MVNSS_S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MVNSS_S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		block.add(sem::seti(_GPR(((uint32_t)(ARM_MVNSS_S___ID_x_rd_r))), ~arm_rotate_right32(32, ((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_rotate)) << 1))));
		if(ARM_MVNSS_S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MVNSS_S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MVNSS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_MVNSS_S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_MVNSS_S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_MVNSS_S__S__S_S___IADDR + 8)));
		switch(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_not(_GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_rd_r))), 0xffffffffLU));
		if(ARM_MVNSS_S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MVNSS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_MVNSS_S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_MVNSS_S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MVNSS_S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_MVNSS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_MVNSS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_not(_GPR(((uint32_t)(ARM_MVNSS_S__S_x_rd_r))), 0xffffffffLU));
		if(ARM_MVNSS_S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MVNSS_S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MOVSS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_MOVSS_S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_MOVSS_S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MOVSS_S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		block.add(sem::seti(_GPR(((uint32_t)(ARM_MOVSS_S___ID_x_rd_r))), arm_rotate_right32(32, ((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_rotate)) << 1))));
		if(ARM_MOVSS_S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MOVSS_S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MOVSS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_MOVSS_S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_MOVSS_S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_MOVSS_S__S__S_S___IADDR + 8)));
		switch(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::set(_GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_rd_r))), 0xffffffffLU));
		if(ARM_MOVSS_S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MOVSS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_MOVSS_S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_MOVSS_S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MOVSS_S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_MOVSS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_MOVSS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::set(_GPR(((uint32_t)(ARM_MOVSS_S__S_x_rd_r))), 0xffffffffLU));
		if(ARM_MOVSS_S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MOVSS_S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_EORSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_EORSS_S__S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_EORSS_S__S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_EORSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_EORSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_EORSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_xor(_GPR(((uint32_t)(ARM_EORSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_EORSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_EORSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_EORSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_EORSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_EORSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_xor(_GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_EORSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_EORSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_EORSS_S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_EORSS_S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_EORSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_EORSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_EORSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_EORSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_xor(_GPR(((uint32_t)(ARM_EORSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_EORSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_CMPS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_CMPS_S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_CMPS_S___ID_x_cond_cond)) == 14))
			block.add(sem::cont());
		if((((uint32_t)(ARM_CMPS_S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_CMPS_S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_S___ID_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMPS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_CMPS_S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_CMPS_S__S__S_S_x_cond_cond)) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_CMPS_S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_CMPS_S__S__S_S___IADDR + 8)));
		switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMPS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_CMPS_S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_CMPS_S__S_x_cond_cond)) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_CMPS_S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_CMPS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_S__S_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMNS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_CMNS_S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_CMNS_S___ID_x_cond_cond)) == 14))
			block.add(sem::cont());
		if((((uint32_t)(ARM_CMNS_S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_CMNS_S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, -arm_rotate_right32(32, ((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMNS_S___ID_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMNS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_CMNS_S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_CMNS_S__S__S_S_x_cond_cond)) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_CMNS_S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_CMNS_S__S__S_S___IADDR + 8)));
		switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::neg(0xffffffffLU, 0xffffffffLU));
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMNS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_CMNS_S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_CMNS_S__S_x_cond_cond)) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_CMNS_S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_CMNS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::neg(0xffffffffLU, 0xffffffffLU));
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMNS_S__S_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_BICSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_BICSS_S__S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_BICSS_S__S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_BICSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_BICSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_BICSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, ~arm_rotate_right32(32, ((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_and(_GPR(((uint32_t)(ARM_BICSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_BICSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_BICSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_BICSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_BICSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_BICSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_not(0xffffffffLU, 0xffffffffLU));
		block.add(sem::_and(_GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_BICSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_BICSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_BICSS_S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_BICSS_S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_BICSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_BICSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_BICSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_BICSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_not(0xffffffffLU, 0xffffffffLU));
		block.add(sem::_and(_GPR(((uint32_t)(ARM_BICSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_BICSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ANDSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ANDSS_S__S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ANDSS_S__S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ANDSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_ANDSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_ANDSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_and(_GPR(((uint32_t)(ARM_ANDSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_ANDSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ANDSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ANDSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ANDSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_and(_GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_ANDSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ANDSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ANDSS_S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ANDSS_S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ANDSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ANDSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_ANDSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_and(_GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_ANDSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ADDSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ADDSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::add(_GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_ADDSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ADDSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ADDSS_S__S__S_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ADDSS_S__S__S_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ADDSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ADDSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::add(_GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_ADDSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ADCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADCSS_S__S___ID_x_rd_r)))));
	if(ARM_ADCSS_S__S___ID_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(0xffffffffLU));
		break;
	case 2:
		block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 1:
		block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 0:
		block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_rd_r)))));
	if(ARM_ADCSS_S__S__S__S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_r_r)))));
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt))));
		switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		}
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_rd_r)))));
	if(ARM_ADCSS_S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADDSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(ARM_ADDSS_S__S___ID_x_cond_cond)) == 15)) {
		if(!(((uint32_t)(ARM_ADDSS_S__S___ID_x_cond_cond)) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADDSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_ADDSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_ADDSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::add(_GPR(((uint32_t)(ARM_ADDSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_ADDSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ADDSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};




/*** function table ***/
static sem_fun_t sem_funs[] = {
	otawa_sem_UNKNOWN,
	otawa_sem_MOV_S__S,
	otawa_sem_MOVS_RD___ID,
	otawa_sem_TST_RD__RD,
	otawa_sem_SUBS_RD__RD__RD,
	otawa_sem_SUB_SP___ID__2A_4,
	otawa_sem_SUBS_RD___ID,
	otawa_sem_SUBS_RD__RD___ID,
	otawa_sem_STRH_RD___LT_RD__RD__RT_,
	otawa_sem_STRH_RD___LT_RD___ID__2A_2_RT_,
	otawa_sem_STRB_RD___LT_RD__RD__RT_,
	otawa_sem_STRB_RD___LT_RD___ID_RT_,
	otawa_sem_STR_RD___LT_SP___ID__2A_4_RT_,
	otawa_sem_STR_RD___LT_RD__RD__RT_,
	otawa_sem_STR_RD___LT_RD___ID__2A_4_RT_,
	otawa_sem_STMIA_RD_21___LB_S_RB_,
	otawa_sem_SBCS_RD__RD,
	otawa_sem_RORS_RD__RD,
	otawa_sem_PUSH__LB_SS_RB_,
	otawa_sem_PUSH__LB_SS_RB__0,
	otawa_sem_POP__LB_SS_RB_,
	otawa_sem_POP__LB_SS_RB__0,
	otawa_sem_ORRS_RD__RD,
	otawa_sem_NEGS_RD__RD,
	otawa_sem_MVNS_RD__RD,
	otawa_sem_MULS_RD__RD,
	otawa_sem_LSRS_RD__RD,
	otawa_sem_LSRS_RD__RD___ID,
	otawa_sem_LSLS_RD__RD,
	otawa_sem_LSLS_RD__RD___ID,
	otawa_sem_LDRSH_RD___LT_RD__RD__RT_,
	otawa_sem_LDRSB_RD___LT_RD__RD__RT_,
	otawa_sem_LDRH_RD___LT_RD__RD__RT_,
	otawa_sem_LDRH_RD___LT_RD___ID__2A_2_RT_,
	otawa_sem_LDRB_RD___LT_RD__RD__RT_,
	otawa_sem_LDRB_RD___LT_RD___ID_RT_,
	otawa_sem_LDR_RD___LT_SP___ID__2A_4_RT_,
	otawa_sem_LDR_RD___LT_PC___ID__2A_4_RT_,
	otawa_sem_LDR_RD___LT_RD__RD__RT_,
	otawa_sem_LDR_RD___LT_RD___ID__2A_4_RT_,
	otawa_sem_LDMIA_RD_21___LB_S_RB_,
	otawa_sem_EORS_RD__RD,
	otawa_sem_CMP_RD__S,
	otawa_sem_CMP_RD__RD,
	otawa_sem_CMP_RD___ID,
	otawa_sem_CMN_RD__RD,
	otawa_sem_BX_S,
	otawa_sem_BLX_S,
	otawa_sem_BL_LR___I08X,
	otawa_sem_BICS_RD__RD,
	otawa_sem_S_08X,
	otawa_sem_ASRS_RD__RD,
	otawa_sem_ASRS_RD__RD___ID,
	otawa_sem_ANDS_RD__RD,
	otawa_sem_ADD_RD__S,
	otawa_sem_ADDS_RD__RD__RD,
	otawa_sem_ADD_SP__SP___ID,
	otawa_sem_ADD_RD__SP___ID,
	otawa_sem_ADD_RD__PC___ID,
	otawa_sem_ADDS_RD___ID,
	otawa_sem_ADDS_RD__RD___ID,
	otawa_sem_ADCS_RD__RD,
	otawa_sem_MRCS_D__D__S__CRD__CRD__D,
	otawa_sem_LDCSS_D__D___LT_RD_RT___D,
	otawa_sem_LDCSS_D__D___LT_RD_RT____ISD,
	otawa_sem_LDCSS_D__D___LT_RD___ISD_RT__21,
	otawa_sem_LDCSS_D__D___LT_RD___ISD_RT_,
	otawa_sem_STCSS_D__D___LT_RD_RT___D,
	otawa_sem_STCSS_D__D___LT_RD_RT____ISD,
	otawa_sem_STCSS_D__D___LT_RD___ISD_RT__21,
	otawa_sem_STCSS_D__D___LT_RD___ISD_RT_,
	otawa_sem_MRSS_S__CPSR,
	otawa_sem_MRSS_S__SPSR,
	otawa_sem_MSRS_CPSR___S,
	otawa_sem_MSRS_CPSR_FSXC__S,
	otawa_sem_MSRS_CPSR_SXC__S,
	otawa_sem_MSRS_CPSR_FXC__S,
	otawa_sem_MSRS_CPSR_FSX__S,
	otawa_sem_MSRS_CPSR_XC__S,
	otawa_sem_MSRS_CPSR_SC__S,
	otawa_sem_MSRS_CPSR_SX__S,
	otawa_sem_MSRS_CPSR_F__S,
	otawa_sem_MSRS_CPSR_FX__S,
	otawa_sem_MSRS_CPSR_FS__S,
	otawa_sem_MSRS_CPSR_C__S,
	otawa_sem_MSRS_CPSR_X__S,
	otawa_sem_MSRS_CPSR_S__S,
	otawa_sem_MSRS_CPSR_F__S_0,
	otawa_sem_MSRS_SPSR___S,
	otawa_sem_MSRS_SPSR_FSXC__S,
	otawa_sem_MSRS_SPSR_SXC__S,
	otawa_sem_MSRS_SPSR_FXC__S,
	otawa_sem_MSRS_SPSR_FSX__S,
	otawa_sem_MSRS_SPSR_XC__S,
	otawa_sem_MSRS_SPSR_SC__S,
	otawa_sem_MSRS_SPSR_SX__S,
	otawa_sem_MSRS_SPSR_F__S,
	otawa_sem_MSRS_SPSR_FX__S,
	otawa_sem_MSRS_SPSR_FS__S,
	otawa_sem_MSRS_SPSR_C__S,
	otawa_sem_MSRS_SPSR_X__S,
	otawa_sem_MSRS_SPSR_S__S,
	otawa_sem_MSRS_SPSR_F__S_0,
	otawa_sem_MSRS_CPSR____ID,
	otawa_sem_MSRS_CPSR_FSXC___ID,
	otawa_sem_MSRS_CPSR_SXC___ID,
	otawa_sem_MSRS_CPSR_FXC___ID,
	otawa_sem_MSRS_CPSR_FSX___ID,
	otawa_sem_MSRS_CPSR_XC___ID,
	otawa_sem_MSRS_CPSR_SC___ID,
	otawa_sem_MSRS_CPSR_SX___ID,
	otawa_sem_MSRS_CPSR_F___ID,
	otawa_sem_MSRS_CPSR_FX___ID,
	otawa_sem_MSRS_CPSR_FS___ID,
	otawa_sem_MSRS_CPSR_C___ID,
	otawa_sem_MSRS_CPSR_X___ID,
	otawa_sem_MSRS_CPSR_S___ID,
	otawa_sem_MSRS_CPSR_F___ID_0,
	otawa_sem_MSRS_SPSR____ID,
	otawa_sem_MSRS_SPSR_FSXC___ID,
	otawa_sem_MSRS_SPSR_SXC___ID,
	otawa_sem_MSRS_SPSR_FXC___ID,
	otawa_sem_MSRS_SPSR_FSX___ID,
	otawa_sem_MSRS_SPSR_XC___ID,
	otawa_sem_MSRS_SPSR_SC___ID,
	otawa_sem_MSRS_SPSR_SX___ID,
	otawa_sem_MSRS_SPSR_F___ID,
	otawa_sem_MSRS_SPSR_FX___ID,
	otawa_sem_MSRS_SPSR_FS___ID,
	otawa_sem_MSRS_SPSR_C___ID,
	otawa_sem_MSRS_SPSR_X___ID,
	otawa_sem_MSRS_SPSR_S___ID,
	otawa_sem_MSRS_SPSR_F___ID_0,
	otawa_sem_CDPS_D__D__D__D__D__D,
	otawa_sem_BFIS_S___ID___ID,
	otawa_sem_CLZS_S__S,
	otawa_sem_SWPS_S__S___LT_S_RT_,
	otawa_sem_SWPSB_S__S___LT_S_RT_,
	otawa_sem_UMLALSS_S_S_S_S,
	otawa_sem_SMLALSS_S_S_S_S,
	otawa_sem_UMULLSS_S_S_S_S,
	otawa_sem_SMULLSS_S_S_S_S,
	otawa_sem_MULSS_S__S__S,
	otawa_sem_MLASS_S__S__S__S,
	otawa_sem_SWIS_D,
	otawa_sem_LDMSS_SS___LB_S_RB_S,
	otawa_sem_STMSS_SS___LB_S_RB_S,
	otawa_sem_LDRSSH_S___LT_SS_SSSS,
	otawa_sem_LDRSSH_S___LT_SS_S_ILUSS,
	otawa_sem_LDRSSB_S___LT_SS_SSSS,
	otawa_sem_LDRSSB_S___LT_SS_S_ILUSS,
	otawa_sem_LDRSH_S___LT_SS_SSSS,
	otawa_sem_LDRSH_S___LT_SS_S_ILUSS,
	otawa_sem_STRSH_S___LT_SS_SSSS,
	otawa_sem_STRSH_S___LT_SS_S_ILUSS,
	otawa_sem_STRSSS_S___LT_SS__SS__S__IDSS,
	otawa_sem_LDRSSS_S___LT_SS__SS__S__IDSS,
	otawa_sem_STRSSS_S___LT_SS___ISDSS,
	otawa_sem_LDRSSS_S___LT_SS___ISDSS,
	otawa_sem_BSS_X,
	otawa_sem_BXS_S,
	otawa_sem_TSTS_S___ID,
	otawa_sem_TSTS_S__S__S_S,
	otawa_sem_TSTS_S__S,
	otawa_sem_TEQS_S___ID,
	otawa_sem_TEQS_S__S__S_S,
	otawa_sem_TEQS_S__S,
	otawa_sem_SUBSS_S__S___ID,
	otawa_sem_SUBSS_S__S__S__S_S,
	otawa_sem_SUBSS_S__S__S,
	otawa_sem_SBCSS_S__S___ID,
	otawa_sem_SBCSS_S__S__S__S_S,
	otawa_sem_SBCSS_S__S__S,
	otawa_sem_RSCSS_S__S___ID,
	otawa_sem_RSCSS_S__S__S__S_S,
	otawa_sem_RSCSS_S__S__S,
	otawa_sem_RSBSS_S__S___ID,
	otawa_sem_RSBSS_S__S__S__S_S,
	otawa_sem_RSBSS_S__S__S,
	otawa_sem_ORRSS_S__S___ID,
	otawa_sem_ORRSS_S__S__S__S_S,
	otawa_sem_ORRSS_S__S__S,
	otawa_sem_MVNSS_S___ID,
	otawa_sem_MVNSS_S__S__S_S,
	otawa_sem_MVNSS_S__S,
	otawa_sem_MOVSS_S___ID,
	otawa_sem_MOVSS_S__S__S_S,
	otawa_sem_MOVSS_S__S,
	otawa_sem_EORSS_S__S___ID,
	otawa_sem_EORSS_S__S__S__S_S,
	otawa_sem_EORSS_S__S__S,
	otawa_sem_CMPS_S___ID,
	otawa_sem_CMPS_S__S__S_S,
	otawa_sem_CMPS_S__S,
	otawa_sem_CMNS_S___ID,
	otawa_sem_CMNS_S__S__S_S,
	otawa_sem_CMNS_S__S,
	otawa_sem_BICSS_S__S___ID,
	otawa_sem_BICSS_S__S__S__S_S,
	otawa_sem_BICSS_S__S__S,
	otawa_sem_ANDSS_S__S___ID,
	otawa_sem_ANDSS_S__S__S__S_S,
	otawa_sem_ANDSS_S__S__S,
	otawa_sem_ADDSS_S__S__S__S_S,
	otawa_sem_ADDSS_S__S__S,
	otawa_sem_ADCSS_S__S___ID,
	otawa_sem_ADCSS_S__S__S__S_S,
	otawa_sem_ADCSS_S__S__S,
	otawa_sem_ADDSS_S__S___ID
};

/**
 * Get the OTAWA semantics of the instruction.
 * @param inst		Current GLISS instruction.
 * @param block		Block to write semantic instructions in.
 */
static void arm_sem(arm_inst_t *inst, otawa::sem::Block& block) {
	sem_funs[inst->ident](inst, block);
}
