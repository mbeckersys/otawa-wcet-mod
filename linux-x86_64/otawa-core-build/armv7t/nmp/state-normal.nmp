// Usual ARM state implementation

// activate only marked registers for debugging
let gliss_debug_only = 1

// No of user registers
let GPRNum = 32

// No of spsr registers
let SPSRNum = 5

// Dont switch to high Vector
let hivector = 0

// Mode of a ARM Processor
let mode_user       = 0b10000
let mode_FIQ        = 0b10001
let mode_fiq        = 0b10001
let mode_IRQ        = 0b10010
let mode_irq        = 0b10010
let mode_supervisor = 0b10011
let mode_svc		= 0b10011
let mode_abort      = 0b10111
let mode_abt      	= 0b10111
let mode_undefined  = 0b11011
let mode_und  		= 0b11011
let mode_system     = 0b11111
let mode_sys     	= 0b11111


// Current Program Status Register
reg APSR[1, u32]
	debug = 1
	fmt = "CPSR"
reg CPSR[1, u32] alias = APSR
reg Ucpsr[1, u32] alias = APSR				// deprecated


// Saved SR
reg SPSR [SPSRNum, u32]
reg Uspsr [SPSRNum, u32] alias = SPSR[0]	// deprecated
reg SPSR_usr[1, u32] alias = SPSR[0]
reg SPSR_svc[1, u32] alias = SPSR[0]
reg SPSR_abt[1, u32] alias = SPSR[1]
reg SPSR_und[1, u32] alias = SPSR[2]
reg SPSR_irq[1, u32] alias = SPSR[3]
reg SPSR_fiq[1, u32] alias = SPSR[4]

macro GetSPSR() = \
	switch (MBITS) { \
		case mode_user: 		Uspsr[0] \
		case mode_supervisor: 	Uspsr[0] \
		case mode_abort:      	Uspsr[1] \
		case mode_undefined:  	Uspsr[2] \
		case mode_IRQ:        	Uspsr[3] \
		case mode_FIQ:        	Uspsr[4] \
		default:              	0 \
	}

macro SetSPSR(x) = \
	switch (MBITS) { \
		case mode_user: 		Uspsr[0] = x; \
		case mode_supervisor: 	Uspsr[0] = x; \
		case mode_abort:      	Uspsr[1] = x; \
		case mode_undefined:  	Uspsr[2] = x; \
		case mode_IRQ:        	Uspsr[3] = x; \
		case mode_FIQ:        	Uspsr[4] = x; \
	}


// access to SR flags (deprecated)
reg NFLAG [1, u1] alias = Ucpsr<31..31>	// N=1 if the result is negative, N=0 if it is positive or zero
reg ZFLAG [1, u1] alias = Ucpsr<30..30>	// Z=1 if the result of the instruction is zero and to 0 otherwise
reg CFLAG [1, u1] alias = Ucpsr<29..29>
	//(*)For an addition C is set to 1 if the addition produced a carry and to 0 otherwise
	//(*)For a substraction C is set to 0 if the substraction produced a borrow and to 1 otherwise
	//(*)For an operation that incorporate a shift operation C is set to the last u1 shifted out of the value by the shifter
	//(*)Else C is normally unchanged.
reg VFLAG [1, u1] alias  = Ucpsr<28..28>
	//(*) For an addition V is set to 1 if signed overflow occured
	//(*) Else V is normally unchanged
reg QFLAG [1, u1] alias  = Ucpsr<27..27>	// Indicate if an overflow and/or saturation has occured in the DSP instruction
reg JFLAG [1, u1] alias = CPSR<24..24>	// ARM v6 Jazelle bit
reg EBIT  [1, u1] alias = CPSR<9..9>	// ARM v6, load/store endianness (1 big, 0 little)
reg ABIT  [1, u1] alias = CPSR<8..8>	// ARM v6,
reg IFLAG [1, u1] alias = Ucpsr<7..7>	// Disable IRQ interrupts when it is set
reg FFLAG [1, u1] alias = Ucpsr<6..6>	// Disable FIQ interrupts whenit is set
reg TFLAG [1, u1] alias	= Ucpsr<5..5>	// If T=0 Indicates ARM execution else if T=1 indicates Thumb execution
reg TBIT  [1, u1] alias	= Ucpsr<5..5>	// deprecated
reg MBITS [1, u5] alias = APSR<4..0>	// Determine the mode in which the processor operates
reg GEBITS[1, card(4)] alias = CPSR<19..16>

// ISETSTATE definitions
// TODO alias does not support concatenation?
let InstrSet_ARM     = 0b00
let InstrSet_Thumb   = 0b01
let InstrSet_Jazelle = 0b10
let InstrSet_ThumbEE = 0b11
macro ISETSTATE = (JFLAG :: TFLAG)
macro CurrentInstrSet() = ISETSTATE
macro SelectInstrSet(iset) = ISETSTATE = iset

// ITSTATE definitions
// TODO alias does not support concatenation?
//macro ITSTATE = (CPSR<15..10> :: CPSR<26..25>)
reg ITSTATE[1, u8]
macro ITSTATE_COND = ITSTATE<7..5>
macro ITSTATE_MASK = ITSTATE<4..0>

macro ITAdvance = if ITSTATE<2..0> == 0 then ITSTATE = 0; else ITSTATE<4..0> = ITSTATE<4..0> << 1; endif
macro InITBlock = (ITSTATE<3..0> != 0)
macro LastInITBlock = (ITSTATE<3..0> == 0b1000)

/* Taken from the work of Thomas Jerabek */
macro ConditionPassed_sub(tmp) = \
	switch (tmp) { \
		case 0b000: if (ZFLAG == 1) then 0b1 else 0b0 endif \
		case 0b001: if (CFLAG == 1) then 0b1 else 0b0 endif \
		case 0b010: if (NFLAG == 1) then 0b1 else 0b0 endif \
		case 0b011: if (VFLAG == 1) then 0b1 else 0b0 endif \
		case 0b100: if (CFLAG == 1) && (ZFLAG == 0) then 0b1 else 0b0 endif \
		case 0b101: if (NFLAG == VFLAG) then 0b1 else 0b0 endif \
		case 0b110: if (NFLAG == VFLAG) && (ZFLAG == 0) then 0b1 else 0b0 endif \
		case 0b111: 0b1 \
	}
macro ConditionPassed = \
	if ITSTATE<3..0> != 0b0000 then \
		if ((ITSTATE<4..4> == 0b1) && (ITSTATE<7..4> != 0b1111)) then \
			!ConditionPassed_sub(ITSTATE<7..5>) \
		else \
			ConditionPassed_sub(ITSTATE<7..5>) \
		endif \
	else 0b1 \
	endif

// ASPR aliases
reg APSR_C[1, card(1)] alias = CFLAG
reg APSR_N[1, card(1)] alias = NFLAG
reg APSR_Z[1, card(1)] alias = ZFLAG
reg APSR_V[1, card(1)] alias = VFLAG



// Memory
mem M 	[32, u8]  				// 8-bits word memory
mem M16 [32, u16] alias = M[0]	// 16-bits word memory alias
mem M32 [32, u32] alias = M[0]	// 32-bits word memory alias
mem M64 [64, u64] alias = M[0]	// 64-bits word memory alias

macro SetWord(BASE_ADDR,data) 	  =	M32[BASE_ADDR] = data
macro GetWord(BASE_ADDR) 	  	  = M32[BASE_ADDR]
macro SetHalfWord(BASE_ADDR,data) = M16[BASE_ADDR] = data
macro GetHalfWord(BASE_ADDR) 	  = M16[BASE_ADDR]


// temporaries (what?)
var Temp[1,u32]
reg SBIT[1,u1]
reg MSBIT[1,u1]
reg LBIT[1,u1]
reg HBIT[1,u1]
reg B15SET[1,u1]

// bits for Load/Store instructions
reg BBIT[1, u1]
reg IBIT[1, u1]
reg PBIT[1, u1]
reg UBIT[1, u1]
reg WBIT[1, u1]

// TODO	Comment it!
reg PSRFMODE[1, u1]
reg PSRSMODE[1, u1]
reg PSRXMODE[1, u1]
reg PSRCMODE[1, u1]

reg RBIT[1,u1]


// Generic Register File
reg GPR[GPRNum, u32]

reg PC[1, u32] 			alias = GPR[15] pc = 1
reg NPC[1, u32]

// for internal relativelt fast access
let offset_fiq	= 16
let offset_irq	= 23
let offset_svc 	= 25
let offset_abt	= 27
let offset_und	= 29

//macro reg_id(m, i) = coerce(card(8), (((m) << 4) | (i)))
macro reg_id(m, i) = (((m)<3..0>) :: ((i)<3..0>))

macro reg_offset_mode(i, m) = \
	switch(reg_id(m, i)) { \
	case reg_id(mode_fiq, 8): offset_fiq - 8 \
	case reg_id(mode_fiq, 9): offset_fiq - 8 \
	case reg_id(mode_fiq, 10): offset_fiq - 8 \
	case reg_id(mode_fiq, 11): offset_fiq - 8 \
	case reg_id(mode_fiq, 12): offset_fiq - 8 \
	case reg_id(mode_fiq, 13): offset_fiq - 8 \
	case reg_id(mode_fiq, 14): offset_fiq - 8 \
	case reg_id(mode_irq, 13): offset_irq - 13 \
	case reg_id(mode_irq, 14): offset_irq - 13 \
	case reg_id(mode_svc, 13): offset_svc - 13 \
	case reg_id(mode_svc, 14): offset_svc - 13 \
	case reg_id(mode_abt, 13): offset_abt - 13 \
	case reg_id(mode_abt, 14): offset_abt - 13 \
	case reg_id(mode_und, 13): offset_und - 13 \
	case reg_id(mode_und, 14): offset_und - 13 \
	default: 0 \
	}
macro reg_offset(i) = reg_offset_mode(i, MBITS)
macro LR = GPR[14 + reg_offset(14)]


// direct access to saved registers
macro getLR(m) = GPR[14 + reg_offset_mode(i, m)]
macro setLR(m, x) = GPR[14 + reg_offset_mode(i, m)] = (x)
reg LR_static[1, u32] alias = GPR[14 + reg_offset_mode(14, mode_svc)]


// mode for register access
macro reg_index(r) = (r) + reg_offset(r)
mode REG_INDEX(r: card(4)) = reg_index(r)
	syntax = if r < 10 then format("r%d", r) else
				switch(r) {
				case 10: "sl"
				case 11: "fp"
				case 12: "ip"
				case 13: "sp"
				case 14: "lr"
				case 15: "pc"
				default: ""
				}
			endif
	image  = format("%4b", r)
	number = r

macro Get_ARM_GPR(r) = GPR[r]
macro Set_ARM_GPR(r, v) = if (r) == 15 then NPC = (v); else GPR[(r)] = (v); endif


// R for debugging
reg R[16, u32]
	alias = GPR[0]
	debug = 1
	label = "Registers"
	fmt = "R%d"
	get = { "GLISS_GET_I"(Get_ARM_GPR("GLISS_IDX" + reg_offset("GLISS_IDX")));  }
	set = { Set_ARM_GPR("GLISS_IDX" + reg_offset("GLISS_IDX"), "GLISS_I");  }


// initialisation
op init ()
	action = {
		PC = 0x2000;
		GPR[14]=0x2000;
		GPR[13]=0x800;
		GPR[21]=0x600;
		GPR[23]=0x400;
		GPR[25]=0x200;
		GPR[27]=0x1000;
		GPR[29]=0x1200;

		Ucpsr = mode_supervisor;	//CPSR in SuperVisor mode
		TFLAG = 0;

		// sp init for validator (same value as gdb)
		GPR[13 + 10] = 0x800;

		// Jerabek IT init
		ITSTATE = 0;
	 }
