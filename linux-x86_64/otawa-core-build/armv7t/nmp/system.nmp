//
// GLISS V2 -- ARM branch instructions
// Copyright (c) 2010, IRIT - UPS <casse@irit.fr>
//
// This file is part of GLISS2.
//
// GLISS2 is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// GLISS2 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GLISS2; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// ****** used modes ******

//macro SetSPSR(reg) = \
//	if (MBITS == mode_supervisor) then\
//		    Uspsr[0]=reg; \
//	else\
//		if (MBITS == mode_abort) then\
//			    Uspsr[1]=reg; \
//		else\
//			if (MBITS == mode_undefined) then\
//				    Uspsr[2]=reg; \
//			else\
//				if (MBITS == mode_IRQ) then\
//					    Uspsr[3]=reg; \
//				else\
//					if (MBITS == mode_FIQ) then\
//						    Uspsr[4]=reg; \
//					endif;\
//				endif;\
//			endif;\
//		endif;\
//	endif


mode fm_f()
	syntax = "f" 
	image  = "1000"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 0;
		PSRXMODE = 0;
		PSRCMODE = 0;
		}

mode fm_s()
	syntax = "s" 
	image  = "0100"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 1;
		PSRXMODE = 0;
		PSRCMODE = 0;
		}

mode fm_x()
	syntax = "x" 
	image  = "0010"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 0;
		PSRXMODE = 1;
		PSRCMODE = 0;
		}

mode fm_c()
	syntax = "c" 
	image  = "0001"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 0;
		PSRXMODE = 0;
		PSRCMODE = 1;
		}


mode fm_fs()
	syntax = "fs" 
	image  = "1100"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 1;
		PSRXMODE = 0;
		PSRCMODE = 0;
		}

mode fm_fx()
	syntax = "fx" 
	image  = "1010"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 0;
		PSRXMODE = 1;
		PSRCMODE = 0;
		}

mode fm_fc()
	syntax = "f" 
	image  = "1001"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 0;
		PSRXMODE = 0;
		PSRCMODE = 1;
		}


mode fm_sx()
	syntax = "sx" 
	image  = "0110"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 1;
		PSRXMODE = 1;
		PSRCMODE = 0;
		}

mode fm_sc()
	syntax = "sc" 
	image  = "0101"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 1;
		PSRXMODE = 0;
		PSRCMODE = 1;
		}

mode fm_xc()
	syntax = "xc" 
	image  = "0011"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 0;
		PSRXMODE = 1;
		PSRCMODE = 1;
		}

mode fm_fsx()
	syntax = "fsx" 
	image  = "1110"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 1;
		PSRXMODE = 1;
		PSRCMODE = 0;
		}

mode fm_fxc()
	syntax = "fxc" 
	image  = "1011"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 0;
		PSRXMODE = 1;
		PSRCMODE = 1;
		}

mode fm_sxc()
	syntax = "sxc"
	image = "0111"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 1;
		PSRXMODE = 1;
		PSRCMODE = 1;
		}

mode fm_fsxc()
	syntax = "fsxc"
	image = "1111"
	action = {
		PSRFMODE = 1;
		PSRSMODE = 1;
		PSRXMODE = 1;
		PSRCMODE = 1;
		}

mode fm_nob()
	syntax = ""
	image = "0000"
	action = {
		PSRFMODE = 0;
		PSRSMODE = 0;
		PSRXMODE = 0;
		PSRCMODE = 0;
		}

mode field_mask = fm_f | fm_s | fm_x | fm_c | fm_fs | fm_fx | fm_fc | fm_sx | fm_sc | fm_xc | fm_fsx | fm_fxc | fm_sxc | fm_fsxc | fm_nob


op setR = setRon | setRoff

op setRon()
	syntax = "spsr"
	image = "1"
	action = {
		RBIT = 1;
	}

op setRoff()
	syntax = "cpsr"
	image = "0"
	action = {
		RBIT = 0;
	}

op setB = setBon | setBoff

op setSon()
	syntax = "s"
	image = "1"
	action = {
		SBIT = 1;
	}

op setSoff()
	syntax = ""
	image = "0"
	action = {
		SBIT = 0;
	}


// **** CPSR-move instructions ******

//op DBG(cond: condition, option: card(4))
//	syntax = format("dbg%s #%d", cond, option)
//	image = format("%s 00110 0 10 0000 1111 0000 1111 %4b", cond, option)
//	action = {
//		// Hint_Debug(option)
//	}



// MSR & DBG (ARM v6)
op MSR_imm(cond: condition,  setr: setR, fm: field_mask, shifter_operand: rotatedImmediate)
	syntax = format("msr%s %s_%s, %s", cond.syntax, setr.syntax,fm.syntax, shifter_operand.syntax)
	image = format("%s 00110 %s 10 %s 1111 %s", cond.image, setr.image, fm.image, shifter_operand.image)
	action = {
		if (cond) then
			setr.action;	
			fm.action;
			CFLAG = shifter_operand.carry_out;
			TMP_REG3 = GetSPSR();
			TMP_SWORD = shifter_operand;
			if (RBIT == 0) then
				if (PSRFMODE == 1) then 
					Ucpsr<7..0> = TMP_SWORD<7..0>;
				endif;
				if (PSRSMODE == 1) then 
					Ucpsr<15..8> = TMP_SWORD<15..8>;
				endif;
				if (PSRXMODE == 1) then 
					Ucpsr<23..16> = TMP_SWORD<23..16>;
				endif;
				if (PSRCMODE == 1) then 
					Ucpsr<31..24> = TMP_SWORD<31..24>;
				endif;
			else 
				if (PSRFMODE == 1) then 
					TMP_REG3<7..0> = TMP_SWORD<7..0>;
				endif;
				if (PSRSMODE == 1) then 
					TMP_REG3<15..8> = TMP_SWORD<15..8>;
				endif;
				if (PSRXMODE == 1) then 
					TMP_REG3<23..16> = TMP_SWORD<23..16>;
				endif;
				if (PSRCMODE == 1) then 
					TMP_REG3<31..24> = TMP_SWORD<31..24>;
				endif;
			endif;
		endif;			
	}

op MSR_shr(cond: condition,  setr: setR, fm : field_mask, rn: REG_INDEX)
	syntax = format("msr%s %s_%s, %s", cond.syntax, setr.syntax, fm.syntax, rn.syntax)
	
	image = format("%s00010%s10%s111100000000%s",cond.image, setr.image, fm.image, rn.image)
	
	action = {
		if (cond) then
			setr.action;	
			fm.action;
			TMP_REG3 = GetSPSR();
			TMP_SWORD = Get_ARM_GPR(rn);
			if (RBIT == 0) then
				if (PSRFMODE == 1) then 
					Ucpsr<31..24> = TMP_SWORD<31..24>;
				endif;
				if (PSRSMODE == 1) then 
					Ucpsr<23..16> = TMP_SWORD<23..16>;
				endif;
				if (PSRXMODE == 1) then 
					Ucpsr<15..8> = TMP_SWORD<15..8>;
				endif;
				if (PSRCMODE == 1) then 
					Ucpsr<7..0> = TMP_SWORD<7..0>;
				endif;
			else 
				if (PSRFMODE == 1) then 
					TMP_REG3<31..24> = TMP_SWORD<31..24>;
					SetSPSR(TMP_REG3);
				endif;
				if (PSRSMODE == 1) then 
					TMP_REG3<23..16> = TMP_SWORD<23..16>;
					SetSPSR(TMP_REG3);
				endif;
				if (PSRXMODE == 1) then 
					TMP_REG3<15..8> = TMP_SWORD<15..8>;
					SetSPSR(TMP_REG3);
				endif;
				if (PSRCMODE == 1) then 
					TMP_REG3<7..0> = TMP_SWORD<7..0>;
					SetSPSR(TMP_REG3);
				endif;
			endif;
		endif;			
		
	}

op MRS(cond : condition,  setr : setR, rn : REG_INDEX)
	syntax = format("mrs%s %s, %s", cond.syntax, rn.syntax ,setr.syntax)
	image = format("%s00010%s001111%s000000000000", cond.image, setr.image, rn.image)
	action = {
		if (cond) then
			setr.action;
			if (RBIT == 0) then
				Set_ARM_GPR(rn,Ucpsr);
			else
				TMP_REG3 = GetSPSR();
				Set_ARM_GPR(rn,TMP_REG3);
			endif;
		endif;
	}


// ARMv6
op CDP(cond: full_condition, opc1: card(4), CRn: card(4), CRd: card(4), 
		coproc: enum(0-9, 12-15), opc2: card(3), CRm: card(4))
	syntax = format("cdp%s%s %d, %d, %d, %d, %d, %d", if cond.value == 0b1111 then "2" else "" endif,
			cond, coproc, opc1, CRd, CRn, CRm, opc2)
	image = format("%s 1110 %4b %4b %4b %4b %3b 0 %4b", cond, opc1, CRn, CRd, coproc, opc2, CRm)
	action = {
		// unsupported action
	}


// ARMv7
op DMB(option: card(4))
	syntax = format("dmb %s", switch(option) {
			case 0b1111: "sy"
			case 0b1110: "st"
			case 0b1011: "ish"
			case 0b1010: "ishst"
			case 0b0111: "nsh"
			case 0b0110: "nshst"
			case 0b0011: "osh"
			case 0b0010: "oshst"
			default: ""
			})
	image = format("1111 01010111 1111 1111 0000 0101 %4b", option)
	action = {
		// unsupported action
	}
