
//////////////////////////////////////////
// Rotated Immediate value need to be computed 
// so we return the immediate part and the rotation part
// to compute the result later.
///////////////////////////////////////////

mode rotatedImmediate(rotate : u4, v : u8) = coerce(u32, v) >>> (coerce(u32, rotate) << 1)
	syntax = format("#%d",coerce(u32, v) >>> (coerce(u32, rotate) << 1) )
	image  = format("%4b%8b", rotate, v)  
	carry_out =
		if rotate == 0 then
			CFLAG
		else
			(coerce(u32, v) >>> (coerce(u32, rotate) << 1))<31..31>
		endif


mode setS(set: u1) = set
	syntax=format("%s", if set then 's' else '' endif)
	image = format("%1b", set)  
	action = {
		SBIT = set;
	}
	value = set


macro update_shift_CFLAG(shift_op) = \
	if SBIT then \
		CFLAG = shift_op.carry_out; \
	endif \


op ADD_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand	: shiftedRegister)
	syntax = format("add%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0000100%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			ADD(rd,rn,shifter_operand);
		endif;
	}

op ADD_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand	: rotatedImmediate)
	syntax = format("add%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0010100%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			ADD(rd,rn,shifter_operand);
		endif;
	}

op ADC_shr(cond : condition, sets : setS, rd : REG_INDEX, rn :REG_INDEX, shifter_operand	: shiftedRegister) 
	syntax = format("adc%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0000101%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			ADC(rd,rn,shifter_operand);
		endif;
	}
	

op ADC_imm(cond : condition, sets : setS, rd : REG_INDEX, rn :REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("adc%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0010101%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			ADC(rd,rn,shifter_operand);
		endif;
	}

op AND_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand	: shiftedRegister)
	syntax = format("and%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0000000%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			AND(rd,rn,shifter_operand);
		endif;
	}

op AND_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand	: rotatedImmediate)
	syntax = format("and%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0010000%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			AND(rd,rn,shifter_operand);
		endif;
	}

op BIC_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand	: shiftedRegister)
	syntax = format("bic%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0001110%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			BIC(rd,rn,shifter_operand);
		endif;
	}

op BIC_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand	: rotatedImmediate)
	syntax = format("bic%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0011110%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			BIC(rd,rn,shifter_operand);
		endif;
	}

op CMN_shr(cond : condition, rn : REG_INDEX, shifter_operand : shiftedRegister)
	syntax = format("cmn%s %s, %s", cond.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s00010111%s0000%s", cond.image, rn.image, shifter_operand.image)
	action = {
		if (cond) then
			update_shift_CFLAG(shifter_operand);
			CMN(rn,shifter_operand);
		endif;
	}
op CMN_imm(cond : condition, rn : REG_INDEX, shifter_operand	: rotatedImmediate)
	syntax = format("cmn%s %s, %s", cond.syntax,  rn.syntax, shifter_operand.syntax)
	image = format("%s00110111%s0000%s", cond.image, rn.image, shifter_operand.image)
	action = {
		if (cond) then
			update_shift_CFLAG(shifter_operand);
			CMN(rn,shifter_operand);
		endif;
	}

op CMP_imm(cond : condition, rn : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("cmp%s %s, %s", cond.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s00110101%s0000%s", cond.image, rn.image, shifter_operand.image)
	action = {
		if (cond) then
			update_shift_CFLAG(shifter_operand);
			CMP(rn,shifter_operand);
		endif;
	}

op CMP_shr(cond : condition, rn : REG_INDEX, shifter_operand	: shiftedRegister)
	syntax = format("cmp%s %s, %s", cond.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s00010101%s0000%s", cond.image,  rn.image, shifter_operand.image)
	action = {
		if (cond) then
			update_shift_CFLAG(shifter_operand);
			CMP(rn,shifter_operand);
		endif;
	}

op EOR_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("eor%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0010001%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			EOR(rd,rn,shifter_operand);
		endif;
	}

op EOR_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : shiftedRegister)
	syntax = format("eor%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0000001%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			EOR(rd,rn,shifter_operand);
		endif;
	}

op MOV_shr(cond : condition, sets : setS, rd : REG_INDEX, shifter_operand	: shiftedRegister)
	syntax = format("mov%s%s %s, %s", cond.syntax, sets.syntax, rd.syntax, shifter_operand.syntax)
	image = format("%s0001101%s0000%s%s", cond.image, sets.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			MOV(rd,shifter_operand);
		endif;
	}

op MOV_imm(cond : condition, sets : setS, rd : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("mov%s%s %s, %s", cond.syntax, sets.syntax, rd.syntax, shifter_operand.syntax)
	image = format("%s0011101%s0000%s%s", cond.image, sets.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			MOV(rd,shifter_operand);
		endif;
	}

op MOVW_imm(cond : condition, imm4 : card(4), rd : REG_INDEX, imm12 : card(12))
	syntax = format("mov%s %s, #%d", cond.syntax, rd.syntax, imm4::imm12)
	image = format("%s00110000%4b%s%12b", cond.image, imm4, rd.image, imm12)
	action = {
		if (cond) then
			MOV(rd,imm4::imm12);
		endif;
	}

op MOVT(cond : condition, imm4 : u4, rd : REG_INDEX, imm12 : u12)
	syntax = format("movt%s %s, #%d", cond.syntax, rd.syntax, imm4::imm12)
	image = format("%s 0011 0100 %4b %s %12b", cond.image, imm4, rd.image, imm12)
	action = {
		if (cond) then
			TMP_SWORD = imm4::imm12::Get_ARM_GPR(rd)<15..0>;
			Set_ARM_GPR(rd,TMP_SWORD);
		endif;
	}

op MVN_shr(cond : condition, sets : setS, rd : REG_INDEX, shifter_operand : shiftedRegister)
	syntax = format("mvn%s%s %s, %s", cond.syntax, sets.syntax, rd.syntax, shifter_operand.syntax)
	image = format("%s0001111%s0000%s%s", cond.image, sets.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			MVN(rd,shifter_operand);
		endif;
	}

op MVN_imm(cond : condition, sets : setS, rd : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("mvn%s%s %s, %s", cond.syntax, sets.syntax, rd.syntax, shifter_operand.syntax)
	image = format("%s0011111%s0000%s%s", cond.image, sets.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			MVN(rd,shifter_operand);
		endif;
	}

op ORR_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("orr%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0011100%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			ORR(rd,rn,shifter_operand);
		endif;
	}

op ORR_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : shiftedRegister)
	syntax = format("orr%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0001100%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			ORR(rd,rn,shifter_operand);
		endif;
	}

op RSB_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("rsb%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0010011%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			RSB(rd,rn,shifter_operand);
		endif;
	}

op RSB_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : shiftedRegister)
	syntax = format("rsb%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0000011%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			RSB(rd,rn,shifter_operand);
		endif;
	}

op RSC_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("rsc%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0010111%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			RSC(rd,rn,shifter_operand);
		endif;
	}

op RSC_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : shiftedRegister)
	syntax = format("rsc%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0000111%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			RSC(rd,rn,shifter_operand);
		endif;
	}

op SBC_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("sbc%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0010110%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			SBC(rd,rn,shifter_operand);
		endif;
	}
op SBC_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand : shiftedRegister)
	syntax = format("sbc%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0000110%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			//SBC(rd,rn,shifter_operand);
		endif;
	}
op SUB_imm(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand	: rotatedImmediate)
	syntax = format("sub%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0010010%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			SUB(rd,rn,shifter_operand);
		endif;
	}
op SUB_shr(cond : condition, sets : setS, rd : REG_INDEX, rn : REG_INDEX, shifter_operand	: shiftedRegister)
	syntax = format("sub%s%s %s, %s, %s", cond.syntax, sets.syntax, rd.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s0000010%s%s%s%s", cond.image, sets.image, rn.image, rd.image, shifter_operand.image)
	action = {
		if (cond) then
			sets.action;
			update_shift_CFLAG(shifter_operand);
			SUB(rd,rn,shifter_operand);
		endif;
	}
op TEQ_imm(cond : condition,  rn : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("teq%s %s, %s", cond.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s00110011%s0000%s", cond.image, rn.image, shifter_operand.image)
	action = {
		if (cond) then
			update_shift_CFLAG(shifter_operand);
			TEQ(rn,shifter_operand);
		endif;
	}
op TEQ_shr(cond : condition, rn : REG_INDEX, shifter_operand	: shiftedRegister)
	syntax = format("teq%s %s, %s", cond.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s00010011%s0000%s", cond.image,  rn.image, shifter_operand.image)
	action = {
		if (cond) then
			update_shift_CFLAG(shifter_operand);
			TEQ(rn,shifter_operand);
		endif;
	}
op TST_imm(cond : condition,  rn : REG_INDEX, shifter_operand : rotatedImmediate)
	syntax = format("tst%s %s, %s", cond.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s00110001%s0000%s", cond.image, rn.image, shifter_operand.image)
	action = {
		if (cond) then
			update_shift_CFLAG(shifter_operand);
			TST(rn,shifter_operand);
		endif;
	}

op TST_shr(cond : condition, rn : REG_INDEX, shifter_operand: shiftedRegister)
	syntax = format("tst%s %s, %s", cond.syntax, rn.syntax, shifter_operand.syntax)
	image = format("%s00010001%s0000%s", cond.image,  rn.image, shifter_operand.image)
	action = {
		if (cond) then
			update_shift_CFLAG(shifter_operand);
			TST(rn,shifter_operand);
		endif;
	}

op CLZ(cond: condition, rd: REG_INDEX, rm: REG_INDEX)
	syntax = format("clz%s %s, %s", cond.syntax, rd.syntax, rm.syntax)
	image = format("%s000101101111%s11110001%s",cond.image,rd.image,rm.image)
	action = {
		if (cond) then	
			if (GPR[rm] == 0) then 
				GPR[rd] = 0;
			else
				TMP_BYTE = 32;
				TMP_SWORD = GPR[rm];
				most_sign_bit;
				GPR[rd] = 31 - TMP_INC;
			endif;
		endif;
	}

	most_sign_bit = {	
		if (TMP_BYTE != 0) then       	       
			if (TMP_SWORD & 0x80000000 == 1) then
				TMP_INC = TMP_BYTE-1;			
			else
				TMP_SWORD = TMP_SWORD << 1;
				//Decrease the register counter
				TMP_BYTE = TMP_BYTE - 1;
				most_sign_bit;
			endif;
		endif;
	}

// ARMv6
//op BFC(cond: condition, rd: REG_INDEX, msb: card(5), lsb: card(5))
//	syntax = 
//	image = format("%s 0111 110 %5b %s %5b 001 1111", cond, msb, rd, lsb)
//	action = {
//		if cond then
//			if rd.number == 15 then error("UNPREDICTABLE"); endif;
//			if msb >= lsb then
//				rd<msb..lsb> = 0;
//			else
//				error("UNPREDICTABLE");
//			endif;
//		endif;
//	}

op BFIC(cond: condition, rd: REG_INDEX, rn: REG_INDEX, msb: card(5), lsb: card(5))
	syntax =
		if rn.number == 15
		then format("bfc%s %s, #%d, #%d", cond, rd, lsb, msb - lsb + 1)
		else format("bfi%s %s, #%d, #%d", cond, rd, lsb, msb - lsb + 1)
		endif
	image = format("%s 0111 110 %5b %s %5b 001 %s", cond, msb, rd, lsb, rn)
	action = {
		if cond then
			if msb >= lsb then
				if rn.number == 15 then
					GPR[rd]<msb..lsb> = 0;
				else
					GPR[rd]<msb..lsb> = rn;
				endif;
			else
				error("UNPREDICTABLE");
			endif;
		endif;
	}


