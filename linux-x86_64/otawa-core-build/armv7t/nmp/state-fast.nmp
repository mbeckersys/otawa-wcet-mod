// ARM state implementation for Fast ISS

// activate only marked registers for debugging
let gliss_debug_only = 1

// mode of a ARM Processor
let mode_user       = 0b10000
let mode_FIQ        = 0b10001
let mode_fiq        = 0b10001
let mode_IRQ        = 0b10010
let mode_irq        = 0b10010
let mode_supervisor = 0b10011
let mode_svc		= 0b10011
let mode_abort      = 0b10111
let mode_abt      	= 0b10111
let mode_undefined  = 0b11011
let mode_und  		= 0b11011
let mode_system     = 0b11111
let mode_sys     	= 0b11111

// register file
reg GPR[16, u32]

reg LR[1, u32]	alias = GPR[14]
reg PC[1, u32] 	alias = GPR[15] pc = 1
reg NPC[1, u32]


// Current Program Status Register
reg APSR [1, u32]
	debug = 1
	label = "CPSR"
	fmt = "CPSR"
reg CPSR [1, u32] alias = APSR


// Saved SR
reg SPSR [1, u32]
reg SPSR_svc [1, u32] alias = SPSR[0]

macro GetSPSR() = SPSR
macro SetSPSR(x) = SPSR = x


// access to SR flags
reg NFLAG [1, u1] 		alias  = APSR<31..31>
reg ZFLAG [1, u1] 		alias  = APSR<30..30>	// zero
reg CFLAG [1, u1] 		alias  = APSR<29..29>	// carry
reg VFLAG [1, u1] 		alias  = APSR<28..28>
reg QFLAG [1, u1] 		alias  = APSR<27..27>
reg JFLAG [1, card(1)]	alias = CPSR<24..24>	// ARM v6 Jazelle bit
reg EBIT [1, u1]  		alias = APSR<9..9>		// ARM v6, load/store endianness (1 big, 0 little)
reg ABIT [1, u1]  		alias = APSR<8..8>		// ARM v6,
reg IFLAG [1, u1] 		alias = APSR<7..7>		// disable IRQ
reg FFLAG [1, u1] 		alias = APSR<6..6>		// disable FIQ
reg TFLAG [1, u1] 		alias = APSR<5..5>		// thumb mode
reg TBIT [1, u1]  		alias = APSR<5..5>
reg MBITS [1, u5] 		alias = APSR<4..0>		// mode bits
reg GEBITS[1, card(4)]	alias = APSR<19..16>

// ISETSTATE definitions
// TODO alias does not support concatenation?
let InstrSet_ARM     = 0b00
let InstrSet_Thumb   = 0b01
let InstrSet_Jazelle = 0b10
let InstrSet_ThumbEE = 0b11
macro ISETSTATE = (JFLAG :: TFLAG)
macro CurrentInstrSet() = ISETSTATE
macro SelectInstrSet(iset) = ISETSTATE = iset

// ITSTATE definitions
// TODO alias does not support concatenation?
//macro ITSTATE = (CPSR<15..10> :: CPSR<26..25>)
reg ITSTATE[1, u8]
macro ITSTATE_COND = ITSTATE<7..5>
macro ITSTATE_MASK = ITSTATE<4..0>

macro ITAdvance = if ITSTATE<2..0> == 0 then ITSTATE = 0; else ITSTATE<4..0> = ITSTATE<4..0> << 1; endif
macro InITBlock = (ITSTATE<3..0> != 0)
macro LastInITBlock = (ITSTATE<3..0> == 0b1000)

// test if condition passed (work of Thomas Jerabek)
macro ConditionPassed_sub(tmp) = \
	switch (tmp) { \
		case 0b000: if (ZFLAG == 1) then 0b1 else 0b0 endif \
		case 0b001: if (CFLAG == 1) then 0b1 else 0b0 endif \
		case 0b010: if (NFLAG == 1) then 0b1 else 0b0 endif \
		case 0b011: if (VFLAG == 1) then 0b1 else 0b0 endif \
		case 0b100: if (CFLAG == 1) && (ZFLAG == 0) then 0b1 else 0b0 endif \
		case 0b101: if (NFLAG == VFLAG) then 0b1 else 0b0 endif \
		case 0b110: if (NFLAG == VFLAG) && (ZFLAG == 0) then 0b1 else 0b0 endif \
		case 0b111: 0b1 \
	}
macro ConditionPassed = \
	if ITSTATE<3..0> != 0b0000 then \
		if ((ITSTATE<4..4> == 0b1) && (ITSTATE<7..4> != 0b1111)) then \
			!ConditionPassed_sub(ITSTATE<7..5>) \
		else \
			ConditionPassed_sub(ITSTATE<7..5>) \
		endif \
	else 0b1 \
	endif


// ASPR aliases (deprecated)
reg APSR_C[1, card(1)] alias = CFLAG
reg APSR_N[1, card(1)] alias = NFLAG
reg APSR_Z[1, card(1)] alias = ZFLAG
reg APSR_V[1, card(1)] alias = VFLAG


// Memory
mem M 	[32, u8]  				// 8-bits word memory
mem M16 [32, u16] alias = M[0]	// 16-bits word memory alias
mem M32 [32, u32] alias = M[0]	// 32-bits word memory alias
mem M64 [64, u64] alias = M[0]	// 64-bits word memory alias

macro SetWord(BASE_ADDR,data) = M32[BASE_ADDR] = data
macro GetWord(BASE_ADDR) = M32[BASE_ADDR]
macro SetHalfWord(BASE_ADDR,data) = M16[BASE_ADDR] = data
macro GetHalfWord(BASE_ADDR) = M16[BASE_ADDR]


// temporaries
var Temp[1,u32]
reg SBIT[1,u1]
reg MSBIT[1,u1]
reg LBIT[1,u1]
reg HBIT[1,u1]
reg B15SET[1,u1]

//Bits for Load/Store instructions
reg BBIT[1,u1]
reg IBIT[1,u1]
reg PBIT[1,u1]
reg UBIT[1,u1]
reg WBIT[1,u1]

reg PSRFMODE[1,u1]
reg PSRSMODE[1,u1]
reg PSRXMODE[1,u1]
reg PSRCMODE[1,u1]

reg RBIT[1,u1]

// mode switching
macro mode_index(m) = m<3..0>
reg SPSR_saved[16, u32]
reg SP_saved[16, u32]
reg LR_saved[16, u32]
reg R_saved[5, u32]

macro enter_mode(m) = \
	if m == mode_fiq then \
		GPR[8]  = R_saved[0]; \
		GPR[9]  = R_saved[1]; \
		GPR[10] = R_saved[2]; \
		GPR[11] = R_saved[3]; \
		GPR[12] = R_saved[4]; \
	endif; \
	SPSR = SPSR_saved[mode_index(m)]; \
	SP = SP_saved[mode_index(m)]; \
	LR = LR_saved[mode_index(m)]

macro leave_mode(m) = \
	if m == mode_fiq then \
		R_saved[0] = GPR[8];  \
		R_saved[1] = GPR[9];  \
		R_saved[2] = GPR[10]; \
		R_saved[3] = GPR[11]; \
		R_saved[4] = GPR[12]; \
	endif; \
	SPSR_saved[mode_index(m)] = SPSR; \
	SP_saved[mode_index(m)] = SP; \
	LR_saved[mode_index(m)] = LR

macro change_mode(m) = \
	enter_mode(MBITS); \
	MBITS = m; \
	enter_mode(MBITS)


// direct access to mode registers
macro setLR(m, x) = \
	if MBITS == m \
	then GPR[14] = (x); \
	else LR_saved[mode_index(m)] = (x); \
	endif

macro getLR(m) = \
	if MBITS == m \
	then GPR[14] \
	else LR_saved[mode_index(m)] \
	endif

reg LR_static[1, u32] alias = GPR[14]

// register access
macro reg_index(r) = (r)

mode REG_INDEX(r: card(4)) = r
	syntax = if r < 10 then format("r%d", r) else
				switch(r) {
				case 10: "sl"
				case 11: "fp"
				case 12: "ip"
				case 13: "sp"
				case 14: "lr"
				case 15: "pc"
				default: ""
				}
			endif
	image  = format("%4b", r)
	number = r

macro Get_ARM_GPR(r) = GPR[r]
macro Set_ARM_GPR(r, v) = if r == 15 then NPC = v; else GPR[r] = v; endif


// R for debugging
reg R[16, u32]
	alias = GPR[0]
	debug = 1
	label = "Registers"
	fmt = "R%d"
	get = { "GLISS_GET_I"(Get_ARM_GPR("GLISS_IDX"));  }
	set = { Set_ARM_GPR("GLISS_IDX", "GLISS_I");  }

// initialisation
op init ()
	action = {
		PC = 0x2000;
		GPR[14]=0x2000;
		GPR[13]=0x800;
		GPR[21]=0x600;
		GPR[23]=0x400;
		GPR[25]=0x200;
		GPR[27]=0x1000;
		GPR[29]=0x1200;

		APSR = mode_svc;
		TFLAG = 0;

		// sp init for validator (same value as gdb)
		GPR[13 + 10] = 0x800;
	 }

// deprecated (only for compatiblity)
reg Ucpsr[1, u32] alias = APSR

