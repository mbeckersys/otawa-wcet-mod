/* Generated by gep (118/02/19 18:37:53) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_ARM_INCLUDE_ARM_CODE_TABLE_H
#define GLISS_ARM_INCLUDE_ARM_CODE_TABLE_H


#if defined(__cplusplus)
extern  "C"
{
#endif

#include <arm/api.h>
#include <arm/macros.h>

/* module headers */


#include <arm/mem.h>
#include <arm/grt.h>
#include <arm/error.h>
#include <arm/gen_int.h>
#include <arm/loader.h>
#include <arm/code.h>
#include <arm/env.h>
#include <arm/sys_call.h>
#include <arm/shift.h>


/* switch optimisation tables */


/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, "%s\n", (e))

#define ARM__SIZE	16
static void arm_instr_UNKNOWN_code(arm_state_t *state, arm_inst_t *inst) {
	/* must not be executed ! */
	arm_execute_unknown(state, ARM_UNKNOWN___IADDR);
}

static void arm_instr_UXTAHS_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UXTAHS_S__S__SS_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UXTAHS_S__S__SS_i_x_rn_r];
		TMP_UREG1 = (TMP_UREG1 >> arm_concat8(ARM_UXTAHS_S__S__SS_i_x_rotate, 0, 2, 3));
		if((ARM_UXTAHS_S__S__SS_i_x_rn_r == 15))
			TMP_UREG3 = ((uint32_t)(arm_field32(TMP_UREG1, 15, 0)));
		else
			TMP_UREG3 = (TMP_UREG2 + ((uint32_t)(arm_field32(TMP_UREG1, 15, 0))));
		if((ARM_UXTAHS_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_UXTAHS_S__S__SS_i_x_rd_r] = TMP_UREG3;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UXTAB16S_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UXTAB16S_S__S__SS_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UXTAB16S_S__S__SS_i_x_rn_r];
		TMP_UREG1 = (TMP_UREG1 >> arm_concat8(ARM_UXTAB16S_S__S__SS_i_x_rotate, 0, 2, 3));
		if((ARM_UXTAB16S_S__S__SS_i_x_rn_r == 15)) {
			TMP_UREG3 = arm_set_field32(TMP_UREG3, ((uint32_t)(((uint16_t)(arm_field32(TMP_UREG1, 7, 0))))), 15, 0);
			TMP_UREG3 = arm_set_field32(TMP_UREG3, ((uint32_t)(((uint16_t)(arm_field32(TMP_UREG1, 23, 16))))), 31, 16);
		}
		else {
			TMP_UREG3 = arm_set_field32(TMP_UREG3, ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) + ((uint16_t)(arm_field32(TMP_UREG1, 7, 0)))))), 15, 0);
			TMP_UREG3 = arm_set_field32(TMP_UREG3, ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) + ((uint16_t)(arm_field32(TMP_UREG1, 23, 16)))))), 31, 16);
		}
		if((ARM_UXTAB16S_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_UXTAB16S_S__S__SS_i_x_rd_r] = TMP_UREG3;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UXTABS_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UXTABS_S__S__SS_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UXTABS_S__S__SS_i_x_rn_r];
		TMP_UREG1 = (TMP_UREG1 >> arm_concat8(ARM_UXTABS_S__S__SS_i_x_rotate, 0, 2, 3));
		if((ARM_UXTABS_S__S__SS_i_x_rn_r == 15))
			TMP_UREG3 = ((uint32_t)(arm_field32(TMP_UREG1, 7, 0)));
		else
			TMP_UREG3 = (TMP_UREG2 + ((uint32_t)(arm_field32(TMP_UREG1, 7, 0))));
		if((ARM_UXTABS_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_UXTABS_S__S__SS_i_x_rd_r] = TMP_UREG3;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_USUB8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_USUB8S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_USUB8S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 7, 0) - arm_field32(TMP_UREG1, 7, 0))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 7, 0))), 7, 0);
		if((TMP_UREG3 >= 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (0 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (0 + 16), (0 + 16));
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 8) - arm_field32(TMP_UREG1, 15, 8))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 15, 8))), 15, 8);
		if((TMP_UREG3 >= 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (1 + 16), (1 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (1 + 16));
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 23, 16) - arm_field32(TMP_UREG1, 23, 16))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 23, 16))), 23, 16);
		if((TMP_UREG3 >= 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (2 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (2 + 16), (2 + 16));
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 24) - arm_field32(TMP_UREG1, 31, 24))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 31, 24))), 31, 24);
		if((TMP_UREG3 >= 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (3 + 16), (3 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (3 + 16));
		if((ARM_USUB8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_USUB8S_S__S__S_i_x_rd_r] = TMP_UREG4;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_USUB16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_USUB16S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_USUB16S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) - arm_field32(TMP_UREG1, 15, 0))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) - arm_field32(TMP_UREG1, 31, 16))));
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG3, 15, 0))), 15, 0);
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG4, 15, 0))), 31, 16);
		if((ARM_USUB16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_USUB16S_S__S__S_i_x_rd_r] = TMP_UREG5;
		if((TMP_UREG3 >= 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (1 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (0 + 16));
		if((TMP_UREG4 >= 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (3 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (2 + 16));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_USAXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_USAXS_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_USAXS_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) + arm_field32(TMP_UREG1, 31, 16))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) - arm_field32(TMP_UREG1, 15, 0))));
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG3, 15, 0))), 15, 0);
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG4, 15, 0))), 31, 16);
		if((ARM_USAXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_USAXS_S__S__S_i_x_rd_r] = TMP_UREG5;
		if((TMP_UREG3 >= 65536LU))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (1 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (0 + 16));
		if((TMP_UREG4 >= 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (3 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (2 + 16));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_USATS_S___ID__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint8_t TMP_IMM;
	uint32_t TMP_UREG2;
	uint32_t TMP_USHIFTED1;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_USATS_S___ID__SS_i_x_rn_r];
		if(((arm_concat8(ARM_USATS_S___ID__SS_i_x_imm3, ARM_USATS_S___ID__SS_i_x_imm2, 3, 2) == 0) && (ARM_USATS_S___ID__SS_i_x_sh == 1))) {
			if((((uint32_t)(arm_field32(TMP_UREG1, 15, 0))) > ((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1)))
				__gtmp_23 = arm_field32_generic(((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1), ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
			else {
				if((((uint32_t)(arm_field32(TMP_UREG1, 15, 0))) < 0))
					__gtmp_22 = arm_field32_generic(0, ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
				else
					__gtmp_22 = ((uint32_t)(arm_field16_generic(arm_field32(TMP_UREG1, 15, 0), ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 )));
				__gtmp_23 = __gtmp_22;
			}
			TMP_UREG2 = __gtmp_23;
			TMP_UREG3 = ((uint32_t)(((TMP_UREG2) &  ((1 << 16) - 1))));
			if((((uint32_t)(arm_field32(TMP_UREG1, 31, 16))) > ((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1)))
				__gtmp_25 = arm_field32_generic(((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1), ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
			else {
				if((((uint32_t)(arm_field32(TMP_UREG1, 31, 16))) < 0))
					__gtmp_24 = arm_field32_generic(0, ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
				else
					__gtmp_24 = ((uint32_t)(arm_field16_generic(arm_field32(TMP_UREG1, 31, 16), ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 )));
				__gtmp_25 = __gtmp_24;
			}
			TMP_UREG4 = __gtmp_25;
			TMP_UREG5 = ((uint32_t)(((TMP_UREG4) &  ((1 << 16) - 1))));
			if((ARM_USATS_S___ID__SS_i_x_rd_r == 15))
				ARM_NPC = ((uint32_t)((arm_field32(TMP_UREG5, 31, 16) + arm_field32(TMP_UREG3, 15, 0))));
			else
				ARM_GPR[ARM_USATS_S___ID__SS_i_x_rd_r] = ((uint32_t)((arm_field32(TMP_UREG5, 31, 16) + arm_field32(TMP_UREG3, 15, 0))));
			if((((uint32_t)(arm_field32(TMP_UREG1, 15, 0))) > ((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1)))
				__gtmp_27 = 1;
			else {
				if((((uint32_t)(arm_field32(TMP_UREG1, 15, 0))) < 0))
					__gtmp_26 = 1;
				else
					__gtmp_26 = 0;
				__gtmp_27 = __gtmp_26;
			}
			TMP_IMM = ((uint8_t)(__gtmp_27));
			if((((uint32_t)(arm_field32(TMP_UREG1, 31, 16))) > ((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1)))
				__gtmp_29 = 1;
			else {
				if((((uint32_t)(arm_field32(TMP_UREG1, 31, 16))) < 0))
					__gtmp_28 = 1;
				else
					__gtmp_28 = 0;
				__gtmp_29 = __gtmp_28;
			}
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + __gtmp_29)));
			if((((uint32_t)(TMP_IMM)) != 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
		}
		else {
			TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(arm_concat8(ARM_USATS_S___ID__SS_i_x_sh, 0, 1, 1))), ((uint32_t)(arm_concat8(ARM_USATS_S___ID__SS_i_x_imm3, ARM_USATS_S___ID__SS_i_x_imm2, 3, 2))), ((TMP_UREG1) &  ((1 << 8) - 1)), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
			if((TMP_USHIFTED1 > ((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1)))
				__gtmp_19 = arm_field32_generic(((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1), ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
			else {
				if((TMP_USHIFTED1 < 0))
					__gtmp_18 = arm_field32_generic(0, ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
				else
					__gtmp_18 = arm_field32_generic(TMP_USHIFTED1, ((((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
				__gtmp_19 = __gtmp_18;
			}
			TMP_UREG2 = __gtmp_19;
			if((ARM_USATS_S___ID__SS_i_x_rd_r == 15))
				ARM_NPC = TMP_UREG2;
			else
				ARM_GPR[ARM_USATS_S___ID__SS_i_x_rd_r] = TMP_UREG2;
			if((TMP_USHIFTED1 > ((2 ^ (((uint32_t)(ARM_USATS_S___ID__SS_i_x_sat_imm)) + 1)) - 1)))
				__gtmp_21 = 1;
			else {
				if((TMP_USHIFTED1 < 0))
					__gtmp_20 = 1;
				else
					__gtmp_20 = 0;
				__gtmp_21 = __gtmp_20;
			}
			TMP_IMM = ((uint8_t)(__gtmp_21));
			if((((uint32_t)(TMP_IMM)) != 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_USADA8S_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_USADA8S_S__S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_USADA8S_S__S__S__S_i_x_rn_r];
		TMP_UREG3 = ARM_GPR[ARM_USADA8S_S__S__S__S_i_x_ra_r];
		if((((uint32_t)((arm_field32(TMP_UREG2, 7, 0) - arm_field32(TMP_UREG1, 7, 0)))) < 0))
			__gtmp_18 = (-arm_field32(TMP_UREG2, 7, 0) - arm_field32(TMP_UREG1, 7, 0));
		else
			__gtmp_18 = (arm_field32(TMP_UREG2, 7, 0) - arm_field32(TMP_UREG1, 7, 0));
		TMP_UREG4 = ((uint32_t)(__gtmp_18));
		if((((uint32_t)((arm_field32(TMP_UREG2, 15, 8) - arm_field32(TMP_UREG1, 15, 8)))) < 0))
			__gtmp_19 = (-arm_field32(TMP_UREG2, 15, 8) - arm_field32(TMP_UREG1, 15, 8));
		else
			__gtmp_19 = (arm_field32(TMP_UREG2, 15, 8) - arm_field32(TMP_UREG1, 15, 8));
		TMP_UREG4 = (TMP_UREG4 + ((uint32_t)(__gtmp_19)));
		if((((uint32_t)((arm_field32(TMP_UREG2, 23, 16) - arm_field32(TMP_UREG1, 23, 16)))) < 0))
			__gtmp_20 = (-arm_field32(TMP_UREG2, 23, 16) - arm_field32(TMP_UREG1, 23, 16));
		else
			__gtmp_20 = (arm_field32(TMP_UREG2, 23, 16) - arm_field32(TMP_UREG1, 23, 16));
		TMP_UREG4 = (TMP_UREG4 + ((uint32_t)(__gtmp_20)));
		if((((uint32_t)((arm_field32(TMP_UREG2, 31, 24) - arm_field32(TMP_UREG1, 31, 24)))) < 0))
			__gtmp_21 = (-arm_field32(TMP_UREG2, 31, 24) - arm_field32(TMP_UREG1, 31, 24));
		else
			__gtmp_21 = (arm_field32(TMP_UREG2, 31, 24) - arm_field32(TMP_UREG1, 31, 24));
		TMP_UREG4 = (TMP_UREG4 + ((uint32_t)(__gtmp_21)));
		if((ARM_USADA8S_S__S__S__S_i_x_ra_r == 15))
			TMP_UREG5 = TMP_UREG4;
		else
			TMP_UREG5 = (TMP_UREG3 + TMP_UREG4);
		if((ARM_USADA8S_S__S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_USADA8S_S__S__S__S_i_x_rd_r] = TMP_UREG5;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UQSUB8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UQSUB8S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UQSUB8S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 7, 0) - arm_field32(TMP_UREG1, 7, 0))));
		if((TMP_UREG3 > ((2 ^ 8) - 1)))
			__gtmp_19 = arm_field32(((2 ^ 8) - 1), (8 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_18 = arm_field32(0, (8 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_UREG3, (8 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(__gtmp_19)), 7, 0);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 8) - arm_field32(TMP_UREG1, 15, 8))));
		if((TMP_UREG3 > ((2 ^ 8) - 1)))
			__gtmp_21 = arm_field32(((2 ^ 8) - 1), (8 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_20 = arm_field32(0, (8 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_UREG3, (8 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(__gtmp_21)), 15, 8);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 23, 16) - arm_field32(TMP_UREG1, 23, 16))));
		if((TMP_UREG3 > ((2 ^ 8) - 1)))
			__gtmp_23 = arm_field32(((2 ^ 8) - 1), (8 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_22 = arm_field32(0, (8 - 1), 0);
			else
				__gtmp_22 = arm_field32(TMP_UREG3, (8 - 1), 0);
			__gtmp_23 = __gtmp_22;
		}
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(__gtmp_23)), 23, 16);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 24) - arm_field32(TMP_UREG1, 31, 24))));
		if((TMP_UREG3 > ((2 ^ 8) - 1)))
			__gtmp_25 = arm_field32(((2 ^ 8) - 1), (8 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_24 = arm_field32(0, (8 - 1), 0);
			else
				__gtmp_24 = arm_field32(TMP_UREG3, (8 - 1), 0);
			__gtmp_25 = __gtmp_24;
		}
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(__gtmp_25)), 31, 24);
		if((ARM_UQSUB8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_UQSUB8S_S__S__S_i_x_rd_r] = TMP_UREG4;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UQSUB16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint16_t __gtmp_21;
	uint16_t __gtmp_20;
	uint16_t __gtmp_19;
	uint16_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UQSUB16S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UQSUB16S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) - arm_field32(TMP_UREG1, 15, 0))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) - arm_field32(TMP_UREG1, 31, 16))));
		if((TMP_UREG3 > ((2 ^ 16) - 1)))
			__gtmp_19 = arm_field32(((2 ^ 16) - 1), (16 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_18 = arm_field32(0, (16 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_UREG3, (16 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(__gtmp_19)), 15, 0);
		if((TMP_UREG4 > ((2 ^ 16) - 1)))
			__gtmp_21 = arm_field32(((2 ^ 16) - 1), (16 - 1), 0);
		else {
			if((TMP_UREG4 < 0))
				__gtmp_20 = arm_field32(0, (16 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_UREG4, (16 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(__gtmp_21)), 31, 16);
		if((ARM_UQSUB16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UQSUB16S_S__S__S_i_x_rd_r] = TMP_UREG5;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UQSAXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint16_t __gtmp_21;
	uint16_t __gtmp_20;
	uint16_t __gtmp_19;
	uint16_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_IMM32;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UQSAXS_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UQSAXS_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) + arm_field32(TMP_UREG1, 31, 16))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) - arm_field32(TMP_UREG1, 15, 0))));
		if((TMP_UREG3 > ((2 ^ 16) - 1)))
			__gtmp_19 = arm_field32(((2 ^ 16) - 1), (16 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_18 = arm_field32(0, (16 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_UREG3, (16 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_IMM32 = arm_set_field32(TMP_IMM32, ((uint32_t)(__gtmp_19)), 15, 0);
		if((TMP_UREG4 > ((2 ^ 16) - 1)))
			__gtmp_21 = arm_field32(((2 ^ 16) - 1), (16 - 1), 0);
		else {
			if((TMP_UREG4 < 0))
				__gtmp_20 = arm_field32(0, (16 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_UREG4, (16 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_IMM32 = arm_set_field32(TMP_IMM32, ((uint32_t)(__gtmp_21)), 31, 16);
		if((ARM_UQSAXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_IMM32;
		else
			ARM_GPR[ARM_UQSAXS_S__S__S_i_x_rd_r] = TMP_IMM32;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UQASXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint16_t __gtmp_21;
	uint16_t __gtmp_20;
	uint16_t __gtmp_19;
	uint16_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_IMM32;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UQASXS_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UQASXS_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) - arm_field32(TMP_UREG1, 31, 16))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) + arm_field32(TMP_UREG1, 15, 0))));
		if((TMP_UREG3 > ((2 ^ 16) - 1)))
			__gtmp_19 = arm_field32(((2 ^ 16) - 1), (16 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_18 = arm_field32(0, (16 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_UREG3, (16 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_IMM32 = arm_set_field32(TMP_IMM32, ((uint32_t)(__gtmp_19)), 15, 0);
		if((TMP_UREG4 > ((2 ^ 16) - 1)))
			__gtmp_21 = arm_field32(((2 ^ 16) - 1), (16 - 1), 0);
		else {
			if((TMP_UREG4 < 0))
				__gtmp_20 = arm_field32(0, (16 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_UREG4, (16 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_IMM32 = arm_set_field32(TMP_IMM32, ((uint32_t)(__gtmp_21)), 31, 16);
		if((ARM_UQASXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_IMM32;
		else
			ARM_GPR[ARM_UQASXS_S__S__S_i_x_rd_r] = TMP_IMM32;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UQADD8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UQADD8S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UQADD8S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 7, 0) + arm_field32(TMP_UREG2, 7, 0))));
		if((TMP_UREG3 > ((2 ^ 8) - 1)))
			__gtmp_19 = arm_field32(((2 ^ 8) - 1), (8 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_18 = arm_field32(0, (8 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_UREG3, (8 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(__gtmp_19)), 7, 0);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 15, 8) + arm_field32(TMP_UREG2, 15, 8))));
		if((TMP_UREG3 > ((2 ^ 8) - 1)))
			__gtmp_21 = arm_field32(((2 ^ 8) - 1), (8 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_20 = arm_field32(0, (8 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_UREG3, (8 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(__gtmp_21)), 15, 8);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 23, 16) + arm_field32(TMP_UREG2, 23, 16))));
		if((TMP_UREG3 > ((2 ^ 8) - 1)))
			__gtmp_23 = arm_field32(((2 ^ 8) - 1), (8 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_22 = arm_field32(0, (8 - 1), 0);
			else
				__gtmp_22 = arm_field32(TMP_UREG3, (8 - 1), 0);
			__gtmp_23 = __gtmp_22;
		}
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(__gtmp_23)), 23, 16);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 31, 24) + arm_field32(TMP_UREG2, 31, 24))));
		if((TMP_UREG3 > ((2 ^ 8) - 1)))
			__gtmp_25 = arm_field32(((2 ^ 8) - 1), (8 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_24 = arm_field32(0, (8 - 1), 0);
			else
				__gtmp_24 = arm_field32(TMP_UREG3, (8 - 1), 0);
			__gtmp_25 = __gtmp_24;
		}
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(__gtmp_25)), 31, 24);
		if((ARM_UQADD8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_UQADD8S_S__S__S_i_x_rd_r] = TMP_UREG4;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UQADD16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint16_t __gtmp_21;
	uint16_t __gtmp_20;
	uint16_t __gtmp_19;
	uint16_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UQADD16S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UQADD16S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 15, 0) + arm_field32(TMP_UREG2, 15, 0))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG1, 31, 16) + arm_field32(TMP_UREG2, 31, 16))));
		if((TMP_UREG3 > ((2 ^ 16) - 1)))
			__gtmp_19 = arm_field32(((2 ^ 16) - 1), (16 - 1), 0);
		else {
			if((TMP_UREG3 < 0))
				__gtmp_18 = arm_field32(0, (16 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_UREG3, (16 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(__gtmp_19)), 15, 0);
		if((TMP_UREG4 > ((2 ^ 16) - 1)))
			__gtmp_21 = arm_field32(((2 ^ 16) - 1), (16 - 1), 0);
		else {
			if((TMP_UREG4 < 0))
				__gtmp_20 = arm_field32(0, (16 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_UREG4, (16 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(__gtmp_21)), 31, 16);
		if((ARM_UQADD16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UQADD16S_S__S__S_i_x_rd_r] = TMP_UREG5;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UMULLS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint64_t TMP_UDWORD;
	uint64_t TMP64_UREG2;
	uint64_t TMP64_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP64_UREG1 = ((uint64_t)(ARM_GPR[ARM_UMULLS_S__S__S__S_i_x_rn_r]));
		TMP64_UREG2 = ((uint64_t)(ARM_GPR[ARM_UMULLS_S__S__S__S_i_x_rm_r]));
		TMP_UDWORD = (TMP64_UREG1 * TMP64_UREG2);
		TMP_UREG3 = arm_field64(TMP_UDWORD, 63, 32);
		if((ARM_UMULLS_S__S__S__S_i_x_rdhi_r == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_UMULLS_S__S__S__S_i_x_rdhi_r] = TMP_UREG3;
		TMP_UREG4 = arm_field64(TMP_UDWORD, 31, 0);
		if((ARM_UMULLS_S__S__S__S_i_x_rdlo_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_UMULLS_S__S__S__S_i_x_rdlo_r] = TMP_UREG4;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UMLALS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_UMLALS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_UMLALS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_UMLALS_S__S__S__S_i_x_rdlo_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_UMLALS_S__S__S__S_i_x_rdhi_r]));
		TMP_DOUBLE = ((uint64_t)((((int64_t)((TMP_REG1 * TMP_REG2))) + ((int64_t)(arm_concat64(TMP_REG3, TMP_REG4, 32, 32))))));
		if((ARM_UMLALS_S__S__S__S_i_x_rdhi_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 63, 32);
		else
			ARM_GPR[ARM_UMLALS_S__S__S__S_i_x_rdhi_r] = arm_field64(TMP_DOUBLE, 63, 32);
		if((ARM_UMLALS_S__S__S__S_i_x_rdlo_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 31, 0);
		else
			ARM_GPR[ARM_UMLALS_S__S__S__S_i_x_rdlo_r] = arm_field64(TMP_DOUBLE, 31, 0);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UMAALS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_UMAALS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_UMAALS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_UMAALS_S__S__S__S_i_x_rdlo_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_UMAALS_S__S__S__S_i_x_rdhi_r]));
		TMP_DOUBLE = ((uint64_t)((((TMP_REG1 * TMP_REG2) + TMP_REG3) + TMP_REG4)));
		if((ARM_UMAALS_S__S__S__S_i_x_rdhi_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 63, 32);
		else
			ARM_GPR[ARM_UMAALS_S__S__S__S_i_x_rdhi_r] = arm_field64(TMP_DOUBLE, 63, 32);
		if((ARM_UMAALS_S__S__S__S_i_x_rdlo_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 31, 0);
		else
			ARM_GPR[ARM_UMAALS_S__S__S__S_i_x_rdlo_r] = arm_field64(TMP_DOUBLE, 31, 0);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UHSUB8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UHSUB8S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UHSUB8S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 7, 0) - arm_field32(TMP_UREG1, 7, 0))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 8, 1))), 7, 0);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 8) - arm_field32(TMP_UREG1, 15, 8))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 8, 1))), 15, 8);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 23, 16) - arm_field32(TMP_UREG1, 23, 16))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 8, 1))), 23, 16);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 24) - arm_field32(TMP_UREG1, 31, 24))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 8, 1))), 31, 24);
		if((ARM_UHSUB8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_UHSUB8S_S__S__S_i_x_rd_r] = TMP_UREG4;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UHSUB16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UHSUB16S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UHSUB16S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) - arm_field32(TMP_UREG1, 15, 0))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) - arm_field32(TMP_UREG1, 31, 16))));
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG3, 16, 1))), 15, 0);
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG4, 16, 1))), 31, 16);
		if((ARM_UHSUB16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UHSUB16S_S__S__S_i_x_rd_r] = TMP_UREG5;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UHSAXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UHSAXS_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UHSAXS_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) + arm_field32(TMP_UREG1, 31, 16))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) - arm_field32(TMP_UREG1, 15, 0))));
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG3, 16, 1))), 15, 0);
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG4, 16, 1))), 31, 16);
		if((ARM_UHSAXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UHSAXS_S__S__S_i_x_rd_r] = TMP_UREG5;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UHASXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UHASXS_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UHASXS_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) - arm_field32(TMP_UREG1, 31, 16))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) + arm_field32(TMP_UREG1, 15, 0))));
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG3, 16, 1))), 15, 0);
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG4, 16, 1))), 31, 16);
		if((ARM_UHASXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UHASXS_S__S__S_i_x_rd_r] = TMP_UREG5;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UHADD8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UHADD8S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UHADD8S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 7, 0) + arm_field32(TMP_UREG1, 7, 0))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 8, 1))), 7, 0);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 8) + arm_field32(TMP_UREG1, 15, 8))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 8, 1))), 15, 8);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 23, 16) + arm_field32(TMP_UREG1, 23, 16))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 8, 1))), 23, 16);
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 24) + arm_field32(TMP_UREG1, 31, 24))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 8, 1))), 31, 24);
		if((ARM_UHADD8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_UHADD8S_S__S__S_i_x_rd_r] = TMP_UREG4;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UHADD16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UHADD16S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UHADD16S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 15, 0) + arm_field32(TMP_UREG2, 15, 0))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG1, 31, 16) + arm_field32(TMP_UREG2, 31, 16))));
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG3, 16, 1))), 15, 0);
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG4, 16, 1))), 31, 16);
		if((ARM_UHADD16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UHADD16S_S__S__S_i_x_rd_r] = TMP_UREG5;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UDIVS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UDIVS_S__S__S_i_x_rn_r];
		TMP_UREG2 = ARM_GPR[ARM_UDIVS_S__S__S_i_x_rm_r];
		if((TMP_UREG2 == 0))
			TMP_UREG3 = 0;
		else
			TMP_UREG3 = (TMP_UREG1 / TMP_UREG2);
		if((ARM_UDIVS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_UDIVS_S__S__S_i_x_rd_r] = TMP_UREG3;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UBFXS_S__S___ID___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UBFXS_S__S___ID___ID_i_x_rn_r];
		if((((uint32_t)(__ARM_MASK32(5, (arm_concat8(ARM_UBFXS_S__S___ID___ID_i_x_imm3, ARM_UBFXS_S__S___ID___ID_i_x_imm2, 3, 2) + ARM_UBFXS_S__S___ID___ID_i_x_widthm1)))) <= 31)) {
			TMP_UREG2 = arm_field32_generic(TMP_UREG1, __ARM_MASK32(5, (arm_concat8(ARM_UBFXS_S__S___ID___ID_i_x_imm3, ARM_UBFXS_S__S___ID___ID_i_x_imm2, 3, 2) + ARM_UBFXS_S__S___ID___ID_i_x_widthm1)), arm_concat8(ARM_UBFXS_S__S___ID___ID_i_x_imm3, ARM_UBFXS_S__S___ID___ID_i_x_imm2, 3, 2), 1 );
			if((ARM_UBFXS_S__S___ID___ID_i_x_rd_r == 15))
				ARM_NPC = TMP_UREG2;
			else
				ARM_GPR[ARM_UBFXS_S__S___ID___ID_i_x_rd_r] = TMP_UREG2;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UASXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UASXS_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UASXS_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG2, 15, 0) - arm_field32(TMP_UREG1, 31, 16))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG2, 31, 16) + arm_field32(TMP_UREG1, 15, 0))));
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG3, 15, 0))), 15, 0);
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG4, 15, 0))), 31, 16);
		if((ARM_UASXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UASXS_S__S__S_i_x_rd_r] = TMP_UREG5;
		if((TMP_UREG3 >= 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (1 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (0 + 16));
		if((TMP_UREG4 >= 65536LU))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (3 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (2 + 16));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UADD8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UADD8S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UADD8S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 7, 0) + arm_field32(TMP_UREG2, 7, 0))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 7, 0))), 7, 0);
		if((TMP_UREG3 >= 256LU))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (0 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (0 + 16), (0 + 16));
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 15, 8) + arm_field32(TMP_UREG2, 15, 8))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 15, 8))), 15, 8);
		if((TMP_UREG3 >= 256LU))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (1 + 16), (1 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (1 + 16));
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 23, 16) + arm_field32(TMP_UREG2, 23, 16))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 23, 16))), 23, 16);
		if((TMP_UREG3 >= 256LU))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (2 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (2 + 16), (2 + 16));
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 31, 24) + arm_field32(TMP_UREG2, 31, 24))));
		TMP_UREG4 = arm_set_field32(TMP_UREG4, ((uint32_t)(arm_field32(TMP_UREG3, 31, 24))), 31, 24);
		if((TMP_UREG3 >= 256LU))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (3 + 16), (3 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (3 + 16));
		if((ARM_UADD8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_UADD8S_S__S__S_i_x_rd_r] = TMP_UREG4;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UADD16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UADD16S_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_UADD16S_S__S__S_i_x_rn_r];
		TMP_UREG3 = ((uint32_t)((arm_field32(TMP_UREG1, 15, 0) + arm_field32(TMP_UREG2, 15, 0))));
		TMP_UREG4 = ((uint32_t)((arm_field32(TMP_UREG1, 31, 16) + arm_field32(TMP_UREG2, 31, 16))));
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG3, 15, 0))), 15, 0);
		TMP_UREG5 = arm_set_field32(TMP_UREG5, ((uint32_t)(arm_field32(TMP_UREG4, 15, 0))), 31, 16);
		if((ARM_UADD16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UADD16S_S__S__S_i_x_rd_r] = TMP_UREG5;
		if((TMP_UREG3 >= 65536LU))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (1 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (0 + 16));
		if((TMP_UREG4 >= 65536LU))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (3 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (2 + 16));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SXTAHS_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SXTAHS_S__S__SS_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SXTAHS_S__S__SS_i_x_rn_r]));
		TMP_REG1 = ((int32_t)((TMP_REG1 >> arm_concat8(ARM_SXTAHS_S__S__SS_i_x_rotate, 0, 2, 3))));
		if((ARM_SXTAHS_S__S__SS_i_x_rn_r == 15))
			TMP_REG3 = ((int32_t)(arm_field32(TMP_REG1, 15, 0)));
		else
			TMP_REG3 = (TMP_REG2 + ((int32_t)(arm_field32(TMP_REG1, 15, 0))));
		if((ARM_SXTAHS_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SXTAHS_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_REG3));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SXTAB16S_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SXTAB16S_S__S__SS_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SXTAB16S_S__S__SS_i_x_rn_r]));
		TMP_REG1 = ((int32_t)((TMP_REG1 >> arm_concat8(ARM_SXTAB16S_S__S__SS_i_x_rotate, 0, 2, 3))));
		if((ARM_SXTAB16S_S__S__SS_i_x_rn_r == 15)) {
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(((int16_t)(arm_field32(TMP_REG1, 7, 0))))), 15, 0);
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(((int16_t)(arm_field32(TMP_REG1, 23, 16))))), 31, 16);
		}
		else {
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)((((int16_t)(arm_field32(TMP_REG2, 15, 0))) + ((int16_t)(arm_field32(TMP_REG1, 7, 0)))))), 15, 0);
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)((((int16_t)(arm_field32(TMP_REG2, 31, 16))) + ((int16_t)(arm_field32(TMP_REG1, 23, 16)))))), 31, 16);
		}
		if((ARM_SXTAB16S_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SXTAB16S_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_REG3));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SXTABS_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SXTABS_S__S__SS_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SXTABS_S__S__SS_i_x_rn_r]));
		TMP_REG1 = ((int32_t)((TMP_REG1 >> arm_concat8(ARM_SXTABS_S__S__SS_i_x_rotate, 0, 2, 3))));
		if((ARM_SXTABS_S__S__SS_i_x_rn_r == 15))
			TMP_REG3 = ((int32_t)(arm_field32(TMP_REG1, 7, 0)));
		else
			TMP_REG3 = (TMP_REG2 + ((int32_t)(arm_field32(TMP_REG1, 7, 0))));
		if((ARM_SXTABS_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SXTABS_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_REG3));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBSS_W_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBSS_W_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_SUBSS_W_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_SUBSS_W_S__S__SS_i_x_imm3, ARM_SUBSS_W_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBSS_W_S__S__SS_i_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SUBSS_W_S__S__SS_i_x_rn_r]));
		TMP_SWORD = (TMP_REG2 - ((int32_t)(TMP_USHIFTED1)));
		if((ARM_SUBSS_W_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SUBSS_W_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SUBSS_W_S__S__SS_i_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_USHIFTED1, 31))) == 1)))
					__gtmp_20 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_USHIFTED1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_19 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_18 = 1;
						else
							__gtmp_18 = 0;
						__gtmp_19 = __gtmp_18;
					}
					__gtmp_20 = __gtmp_19;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_22 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_22 = __gtmp_21;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBWS_S__S___ID__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		ARM_SBIT = ((uint8_t)(0));
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBWS_S__S___ID__i_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SUBWS_S__S___ID__i_x_rn_r]));
		TMP_SWORD = (TMP_REG2 - __ARM_EXTS16(20, ((int32_t)(arm_concat16(arm_concat8(ARM_SUBWS_S__S___ID__i_x_i, ARM_SUBWS_S__S___ID__i_x_imm3, 1, 3), ARM_SUBWS_S__S___ID__i_x_imm8, 4, 8)))));
		if((ARM_SUBWS_S__S___ID__i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SUBWS_S__S___ID__i_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SUBWS_S__S___ID__i_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit16(__ARM_MASK32(12, ~arm_concat16(arm_concat8(ARM_SUBWS_S__S___ID__i_x_i, ARM_SUBWS_S__S___ID__i_x_imm3, 1, 3), ARM_SUBWS_S__S___ID__i_x_imm8, 4, 8)), 31))) == 1)))
					__gtmp_20 = 1;
				else {
					if(((((uint32_t)(arm_bit16(__ARM_MASK32(12, ~arm_concat16(arm_concat8(ARM_SUBWS_S__S___ID__i_x_i, ARM_SUBWS_S__S___ID__i_x_imm3, 1, 3), ARM_SUBWS_S__S___ID__i_x_imm8, 4, 8)), 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_19 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_18 = 1;
						else
							__gtmp_18 = 0;
						__gtmp_19 = __gtmp_18;
					}
					__gtmp_20 = __gtmp_19;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit16(arm_concat16(arm_concat8(ARM_SUBWS_S__S___ID__i_x_i, ARM_SUBWS_S__S___ID__i_x_imm3, 1, 3), ARM_SUBWS_S__S___ID__i_x_imm8, 4, 8), 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_22 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit16(arm_concat16(arm_concat8(ARM_SUBWS_S__S___ID__i_x_i, ARM_SUBWS_S__S___ID__i_x_imm3, 1, 3), ARM_SUBWS_S__S___ID__i_x_imm8, 4, 8), 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_22 = __gtmp_21;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBSS_W_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBSS_W_S__S___IU_i_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SUBSS_W_S__S___IU_i_x_rn_r]));
		if((arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
			switch(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
			case 0:
				__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
				break;
			case 1:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			case 2:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
				break;
			case 3:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			}
			__gtmp_19 = __gtmp_18;
		}
		else
			__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
		TMP_SWORD = (TMP_REG2 - ((int32_t)(__gtmp_19)));
		if((ARM_SUBSS_W_S__S___IU_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SUBSS_W_S__S___IU_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SUBSS_W_S__S___IU_i_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if((arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_20 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_21 = __gtmp_20;
				}
				else
					__gtmp_21 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~__gtmp_21, 31))) == 1)))
					__gtmp_26 = 1;
				else {
					if((arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
						switch(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
						case 0:
							__gtmp_22 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
							break;
						case 1:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						case 2:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
							break;
						case 3:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						}
						__gtmp_23 = __gtmp_22;
					}
					else
						__gtmp_23 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
					if(((((uint32_t)(arm_bit32(~__gtmp_23, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_25 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_24 = 1;
						else
							__gtmp_24 = 0;
						__gtmp_25 = __gtmp_24;
					}
					__gtmp_26 = __gtmp_25;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
				if((arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_27 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_28 = __gtmp_27;
				}
				else
					__gtmp_28 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_28, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_32 = 1;
				else {
					if((arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
						switch(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
						case 0:
							__gtmp_29 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
							break;
						case 1:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						case 2:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
							break;
						case 3:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						}
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SUBSS_W_S__S___IU_i_x_i, ARM_SUBSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SUBSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_30, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_32 = __gtmp_31;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_32)), 28, 28);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SSUB8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SSUB8S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SSUB8S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 7, 0) - arm_field32(TMP_REG1, 7, 0))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 7, 0))), 7, 0);
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (0 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (0 + 16), (0 + 16));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 8) - arm_field32(TMP_REG1, 15, 8))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 15, 8))), 15, 8);
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (1 + 16), (1 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (1 + 16));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 23, 16) - arm_field32(TMP_REG1, 23, 16))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 23, 16))), 23, 16);
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (2 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (2 + 16), (2 + 16));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 31, 24) - arm_field32(TMP_REG1, 31, 24))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 31, 24))), 31, 24);
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (3 + 16), (3 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (3 + 16));
		if((ARM_SSUB8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_SSUB8S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG4));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SSUB16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SSUB16S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SSUB16S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) - arm_field32(TMP_REG1, 15, 0))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) - arm_field32(TMP_REG1, 31, 16))));
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG3, 15, 0))), 15, 0);
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG4, 15, 0))), 31, 16);
		if((ARM_SSUB16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SSUB16S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (1 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (0 + 16));
		if((TMP_REG4 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (3 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (2 + 16));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SSAXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SSAXS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SSAXS_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) + arm_field32(TMP_REG1, 31, 16))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) - arm_field32(TMP_REG1, 15, 0))));
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG3, 15, 0))), 15, 0);
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG4, 15, 0))), 31, 16);
		if((ARM_SSAXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SSAXS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (1 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (0 + 16));
		if((TMP_REG4 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (3 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (2 + 16));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SSATS_S___ID__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	int32_t __gtmp_19;
	int32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	uint8_t TMP_IMM;
	int32_t TMP_REG2;
	int32_t TMP_SHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SSATS_S___ID__SS_i_x_rn_r]));
		if(((arm_concat8(ARM_SSATS_S___ID__SS_i_x_imm3, ARM_SSATS_S___ID__SS_i_x_imm2, 3, 2) == 0) && (ARM_SSATS_S___ID__SS_i_x_sh == 1))) {
			if((((uint32_t)((((uint32_t)(arm_field32(TMP_REG1, 15, 0))) > 2))) ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)))
				__gtmp_23 = arm_field32_generic((2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)), ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
			else {
				if((((uint32_t)(arm_field32(TMP_REG1, 15, 0))) > -(2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1))))
					__gtmp_22 = arm_field32_generic(-(2 ^ ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1)), ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
				else
					__gtmp_22 = ((uint32_t)(arm_field16_generic(arm_field32(TMP_REG1, 15, 0), ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 )));
				__gtmp_23 = __gtmp_22;
			}
			TMP_REG2 = ((int32_t)(__gtmp_23));
			TMP_REG3 = ((int32_t)(((int16_t)(TMP_REG2))));
			if((((uint32_t)((((uint32_t)(arm_field32(TMP_REG1, 31, 16))) > 2))) ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)))
				__gtmp_25 = arm_field32_generic((2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)), ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
			else {
				if((((uint32_t)(arm_field32(TMP_REG1, 31, 16))) > -(2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1))))
					__gtmp_24 = arm_field32_generic(-(2 ^ ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1)), ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
				else
					__gtmp_24 = ((uint32_t)(arm_field16_generic(arm_field32(TMP_REG1, 31, 16), ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 )));
				__gtmp_25 = __gtmp_24;
			}
			TMP_REG4 = ((int32_t)(__gtmp_25));
			TMP_REG5 = ((int32_t)(((int16_t)(TMP_REG4))));
			if((ARM_SSATS_S___ID__SS_i_x_rd_r == 15))
				ARM_NPC = ((uint32_t)((arm_field32(TMP_REG5, 31, 16) + arm_field32(TMP_REG3, 15, 0))));
			else
				ARM_GPR[ARM_SSATS_S___ID__SS_i_x_rd_r] = ((uint32_t)((arm_field32(TMP_REG5, 31, 16) + arm_field32(TMP_REG3, 15, 0))));
			if((((uint32_t)((((uint32_t)(arm_field32(TMP_REG1, 15, 0))) > 2))) ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)))
				__gtmp_27 = 1;
			else {
				if((((uint32_t)(arm_field32(TMP_REG1, 15, 0))) > -(2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1))))
					__gtmp_26 = 1;
				else
					__gtmp_26 = 0;
				__gtmp_27 = __gtmp_26;
			}
			TMP_IMM = ((uint8_t)(__gtmp_27));
			if((((uint32_t)((((uint32_t)(arm_field32(TMP_REG1, 31, 16))) > 2))) ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)))
				__gtmp_29 = 1;
			else {
				if((((uint32_t)(arm_field32(TMP_REG1, 31, 16))) > -(2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1))))
					__gtmp_28 = 1;
				else
					__gtmp_28 = 0;
				__gtmp_29 = __gtmp_28;
			}
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + __gtmp_29)));
			if((((uint32_t)(TMP_IMM)) != 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
		}
		else {
			TMP_SHIFTED1 = ((int32_t)(Decode_and_Shift(((uint8_t)(arm_concat8(ARM_SSATS_S___ID__SS_i_x_sh, 0, 1, 1))), ((uint32_t)(arm_concat8(ARM_SSATS_S___ID__SS_i_x_imm3, ARM_SSATS_S___ID__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))))));
			if((((uint32_t)((TMP_SHIFTED1 > ((int32_t)(2))))) ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)))
				__gtmp_19 = ((int32_t)(arm_field32_generic((2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)), ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 )));
			else {
				if((TMP_SHIFTED1 > ((int32_t)(-(2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1))))))
					__gtmp_18 = ((int32_t)(arm_field32_generic(-(2 ^ ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1)), ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 )));
				else
					__gtmp_18 = arm_field32_generic(TMP_SHIFTED1, ((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1), 0, 1 );
				__gtmp_19 = __gtmp_18;
			}
			TMP_REG2 = __gtmp_19;
			if((ARM_SSATS_S___ID__SS_i_x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_SSATS_S___ID__SS_i_x_rd_r] = ((uint32_t)(TMP_REG2));
			if((((uint32_t)((TMP_SHIFTED1 > ((int32_t)(2))))) ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1)))
				__gtmp_21 = 1;
			else {
				if((TMP_SHIFTED1 > ((int32_t)(-(2 ^ (((((uint32_t)(ARM_SSATS_S___ID__SS_i_x_sat_imm)) + 1) - 1) - 1))))))
					__gtmp_20 = 1;
				else
					__gtmp_20 = 0;
				__gtmp_21 = __gtmp_20;
			}
			TMP_IMM = ((uint8_t)(__gtmp_21));
			if((((uint32_t)(TMP_IMM)) != 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMULLS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int64_t TMP_DWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMULLS_S__S__S__S_i_x_rn_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMULLS_S__S__S__S_i_x_rm_r]));
		TMP_DWORD = (((int64_t)(TMP_REG1)) * ((int64_t)(TMP_REG2)));
		TMP_REG3 = ((int32_t)(arm_field64(TMP_DWORD, 63, 32)));
		if((ARM_SMULLS_S__S__S__S_i_x_rdhi_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SMULLS_S__S__S__S_i_x_rdhi_r] = ((uint32_t)(TMP_REG3));
		TMP_REG4 = ((int32_t)(arm_field64(TMP_DWORD, 31, 0)));
		if((ARM_SMULLS_S__S__S__S_i_x_rdlo_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_SMULLS_S__S__S__S_i_x_rdlo_r] = ((uint32_t)(TMP_REG4));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMMLSSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMMLSSS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMMLSSS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMMLSSS_S__S__S__S_i_x_ra_r]));
		TMP_DOUBLE = ((uint64_t)((((int64_t)((((int64_t)(TMP_REG3)) << 32))) - (((int64_t)(TMP_REG1)) * ((int64_t)(TMP_REG2))))));
		if((ARM_SMMLSSS_S__S__S__S_i_x_r == 1))
			TMP_DOUBLE = (TMP_DOUBLE + ((uint64_t)(0x80000000LU)));
		if((ARM_SMMLSSS_S__S__S__S_i_x_rd_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 63, 32);
		else
			ARM_GPR[ARM_SMMLSSS_S__S__S__S_i_x_rd_r] = arm_field64(TMP_DOUBLE, 63, 32);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMMLASS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMMLASS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMMLASS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMMLASS_S__S__S__S_i_x_ra_r]));
		if((ARM_SMMLASS_S__S__S__S_i_x_ra_r == 15))
			TMP_DOUBLE = ((uint64_t)((((int64_t)(TMP_REG1)) * ((int64_t)(TMP_REG2)))));
		else
			TMP_DOUBLE = ((uint64_t)((((int64_t)((((int64_t)(TMP_REG3)) << 32))) + (((int64_t)(TMP_REG1)) * ((int64_t)(TMP_REG2))))));
		if((ARM_SMMLASS_S__S__S__S_i_x_r == 1))
			TMP_DOUBLE = (TMP_DOUBLE + ((uint64_t)(0x80000000LU)));
		if((ARM_SMMLASS_S__S__S__S_i_x_rd_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 63, 32);
		else
			ARM_GPR[ARM_SMMLASS_S__S__S__S_i_x_rd_r] = arm_field64(TMP_DOUBLE, 63, 32);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLSLDSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG6;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLSLDSS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLSLDSS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMLSLDSS_S__S__S__S_i_x_rdlo_r]));
		TMP_REG6 = ((int32_t)(ARM_GPR[ARM_SMLSLDSS_S__S__S__S_i_x_rdhi_r]));
		if((ARM_SMLSLDSS_S__S__S__S_i_x_m == 1))
			TMP_REG1 = ((int32_t)((TMP_REG1 >> 16)));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) * arm_field32(TMP_REG1, 15, 0))));
		TMP_REG5 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) * arm_field32(TMP_REG1, 31, 16))));
		TMP_DOUBLE = ((uint64_t)((((int64_t)((TMP_REG4 - TMP_REG5))) + ((int64_t)(arm_concat64(TMP_REG6, TMP_REG3, 32, 32))))));
		if((ARM_SMLSLDSS_S__S__S__S_i_x_rdhi_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 63, 32);
		else
			ARM_GPR[ARM_SMLSLDSS_S__S__S__S_i_x_rdhi_r] = arm_field64(TMP_DOUBLE, 63, 32);
		if((ARM_SMLSLDSS_S__S__S__S_i_x_rdlo_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 31, 0);
		else
			ARM_GPR[ARM_SMLSLDSS_S__S__S__S_i_x_rdlo_r] = arm_field64(TMP_DOUBLE, 31, 0);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLSDSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG6;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLSDSS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLSDSS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMLSDSS_S__S__S__S_i_x_ra_r]));
		if((ARM_SMLSDSS_S__S__S__S_i_x_m == 1))
			TMP_REG1 = ((int32_t)((TMP_REG1 >> 16)));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) * arm_field32(TMP_REG1, 15, 0))));
		TMP_REG5 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) * arm_field32(TMP_REG1, 31, 16))));
		if((ARM_SMLSDSS_S__S__S__S_i_x_ra_r == 15))
			TMP_REG6 = (TMP_REG4 - TMP_REG5);
		else {
			TMP_DOUBLE = ((uint64_t)(((TMP_REG4 - TMP_REG5) + TMP_REG3)));
			TMP_REG6 = ((int32_t)(arm_field64(TMP_DOUBLE, 31, 0)));
			if((((int64_t)(TMP_DOUBLE)) != ((int64_t)(TMP_REG6))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
		}
		if((ARM_SMLSDSS_S__S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG6));
		else
			ARM_GPR[ARM_SMLSDSS_S__S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG6));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLAWSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG3;
	int32_t TMP_REG4;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLAWSS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLAWSS_S__S__S__S_i_x_rn_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_SMLAWSS_S__S__S__S_i_x_ra_r]));
		if((ARM_SMLAWSS_S__S__S__S_i_x_m == 1))
			TMP_REG3 = ((int32_t)(arm_field32(TMP_REG1, 31, 16)));
		else
			TMP_REG3 = ((int32_t)(arm_field32(TMP_REG1, 15, 0)));
		if((ARM_SMLAWSS_S__S__S__S_i_x_ra_r == 15))
			TMP_DOUBLE = ((uint64_t)((TMP_REG2 * TMP_REG3)));
		else {
			TMP_DOUBLE = ((uint64_t)(((TMP_REG2 * TMP_REG3) + ((int32_t)((TMP_REG4 << 16))))));
			if(((TMP_DOUBLE >> 16) != ((uint64_t)(arm_field64(TMP_DOUBLE, 47, 16)))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
		}
		if((ARM_SMLAWSS_S__S__S__S_i_x_rd_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 47, 16);
		else
			ARM_GPR[ARM_SMLAWSS_S__S__S__S_i_x_rd_r] = arm_field64(TMP_DOUBLE, 47, 16);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLALDSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG6;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLALDSS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLALDSS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMLALDSS_S__S__S__S_i_x_rdlo_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_SMLALDSS_S__S__S__S_i_x_rdhi_r]));
		if((ARM_SMLALDSS_S__S__S__S_i_x_m == 1))
			TMP_REG1 = ((int32_t)((TMP_REG1 >> 16)));
		TMP_REG5 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) * arm_field32(TMP_REG1, 15, 0))));
		TMP_REG6 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) * arm_field32(TMP_REG1, 31, 16))));
		TMP_DOUBLE = ((uint64_t)((((int64_t)((TMP_REG5 + TMP_REG6))) + ((int64_t)(arm_concat64(TMP_REG4, TMP_REG3, 32, 32))))));
		if((ARM_SMLALDSS_S__S__S__S_i_x_rdhi_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 63, 32);
		else
			ARM_GPR[ARM_SMLALDSS_S__S__S__S_i_x_rdhi_r] = arm_field64(TMP_DOUBLE, 63, 32);
		if((ARM_SMLALDSS_S__S__S__S_i_x_rdlo_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 31, 0);
		else
			ARM_GPR[ARM_SMLALDSS_S__S__S__S_i_x_rdlo_r] = arm_field64(TMP_DOUBLE, 31, 0);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLALSSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG6;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLALSSS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLALSSS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMLALSSS_S__S__S__S_i_x_rdlo_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_SMLALSSS_S__S__S__S_i_x_rdhi_r]));
		if((ARM_SMLALSSS_S__S__S__S_i_x_n == 1))
			TMP_REG5 = ((int32_t)(arm_field32(TMP_REG2, 31, 16)));
		else
			TMP_REG5 = ((int32_t)(arm_field32(TMP_REG2, 15, 0)));
		if((ARM_SMLALSSS_S__S__S__S_i_x_m == 1))
			TMP_REG6 = ((int32_t)(arm_field32(TMP_REG1, 31, 16)));
		else
			TMP_REG6 = ((int32_t)(arm_field32(TMP_REG1, 15, 0)));
		TMP_DOUBLE = ((uint64_t)((((int64_t)((TMP_REG5 + TMP_REG6))) + ((int64_t)(arm_concat64(TMP_REG4, TMP_REG3, 32, 32))))));
		if((ARM_SMLALSSS_S__S__S__S_i_x_rdhi_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 63, 32);
		else
			ARM_GPR[ARM_SMLALSSS_S__S__S__S_i_x_rdhi_r] = arm_field64(TMP_DOUBLE, 63, 32);
		if((ARM_SMLALSSS_S__S__S__S_i_x_rdlo_r == 15))
			ARM_NPC = arm_field64(TMP_DOUBLE, 31, 0);
		else
			ARM_GPR[ARM_SMLALSSS_S__S__S__S_i_x_rdlo_r] = arm_field64(TMP_DOUBLE, 31, 0);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLALS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_SWORD;
	int32_t TMP_REG6;
	int64_t TMP_DWORD;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLALS_S__S__S__S_i_x_rn_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLALS_S__S__S__S_i_x_rm_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMLALS_S__S__S__S_i_x_rdhi_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_SMLALS_S__S__S__S_i_x_rdlo_r]));
		TMP_DWORD = (((int64_t)(TMP_REG1)) * ((int64_t)(TMP_REG2)));
		TMP_REG6 = (((int32_t)(arm_field64(TMP_DWORD, 31, 0))) + TMP_REG4);
		if((ARM_SMLALS_S__S__S__S_i_x_rdlo_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG6));
		else
			ARM_GPR[ARM_SMLALS_S__S__S__S_i_x_rdlo_r] = ((uint32_t)(TMP_REG6));
		TMP_SWORD = ((int32_t)(arm_field64(TMP_DWORD, 31, 0)));
		if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG4, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(TMP_REG4, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG6, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_REG6, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		TMP_REG5 = ((((int32_t)(arm_field64(TMP_DWORD, 63, 32))) + TMP_REG3) + ((int32_t)(__gtmp_20)));
		if((ARM_SMLALS_S__S__S__S_i_x_rdhi_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SMLALS_S__S__S__S_i_x_rdhi_r] = ((uint32_t)(TMP_REG5));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLADSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG6;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLADSS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLADSS_S__S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMLADSS_S__S__S__S_i_x_ra_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_SMLADSS_S__S__S__S_i_x_rd_r]));
		if((ARM_SMLADSS_S__S__S__S_i_x_m == 1))
			TMP_REG1 = ((int32_t)((TMP_REG1 >> 16)));
		TMP_REG5 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) * arm_field32(TMP_REG1, 15, 0))));
		TMP_REG6 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) * arm_field32(TMP_REG1, 31, 16))));
		if((ARM_SMLADSS_S__S__S__S_i_x_ra_r == 15)) {
			TMP_DOUBLE = ((uint64_t)((TMP_REG5 + TMP_REG6)));
			if((ARM_SMLADSS_S__S__S__S_i_x_rd_r == 15))
				ARM_NPC = arm_field64(TMP_DOUBLE, 31, 0);
			else
				ARM_GPR[ARM_SMLADSS_S__S__S__S_i_x_rd_r] = arm_field64(TMP_DOUBLE, 31, 0);
			if((TMP_DOUBLE != ((uint64_t)(arm_field64(TMP_DOUBLE, 31, 0)))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
		}
		else {
			TMP_DOUBLE = ((uint64_t)((((int64_t)((TMP_REG5 + TMP_REG6))) + ((int64_t)(arm_concat64(TMP_REG4, TMP_REG3, 32, 32))))));
			if((ARM_SMLADSS_S__S__S__S_i_x_rd_r == 15))
				ARM_NPC = arm_field64(TMP_DOUBLE, 63, 32);
			else
				ARM_GPR[ARM_SMLADSS_S__S__S__S_i_x_rd_r] = arm_field64(TMP_DOUBLE, 63, 32);
			if((ARM_SMLADSS_S__S__S__S_i_x_ra_r == 15))
				ARM_NPC = arm_field64(TMP_DOUBLE, 31, 0);
			else
				ARM_GPR[ARM_SMLADSS_S__S__S__S_i_x_ra_r] = arm_field64(TMP_DOUBLE, 31, 0);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLASSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG6;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLASSS_S__S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLASSS_S__S__S__S_i_x_rn_r]));
		TMP_REG6 = ((int32_t)(ARM_GPR[ARM_SMLASSS_S__S__S__S_i_x_ra_r]));
		if((ARM_SMLASSS_S__S__S__S_i_x_n == 1))
			TMP_REG3 = ((int32_t)(arm_field32(TMP_REG2, 31, 16)));
		else
			TMP_REG3 = ((int32_t)(arm_field32(TMP_REG2, 15, 0)));
		if((ARM_SMLASSS_S__S__S__S_i_x_m == 1))
			TMP_REG4 = ((int32_t)(arm_field32(TMP_REG1, 31, 16)));
		else
			TMP_REG4 = ((int32_t)(arm_field32(TMP_REG1, 15, 0)));
		if((ARM_SMLASSS_S__S__S__S_i_x_ra_r == 15))
			TMP_REG5 = (TMP_REG3 * TMP_REG4);
		else {
			TMP_DOUBLE = ((uint64_t)(((TMP_REG3 * TMP_REG4) + TMP_REG6)));
			TMP_REG5 = ((int32_t)(arm_field64(TMP_DOUBLE, 31, 0)));
			if((((int64_t)(TMP_DOUBLE)) != ((int64_t)(TMP_REG5))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
		}
		if((ARM_SMLASSS_S__S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SMLASSS_S__S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SHSUB8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SHSUB8S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SHSUB8S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 7, 0) - arm_field32(TMP_REG1, 7, 0))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 8, 1))), 7, 0);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 8) - arm_field32(TMP_REG1, 15, 8))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 8, 1))), 15, 8);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 23, 16) - arm_field32(TMP_REG1, 23, 16))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 8, 1))), 23, 16);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 31, 24) - arm_field32(TMP_REG1, 31, 24))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 8, 1))), 31, 24);
		if((ARM_SHSUB8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_SHSUB8S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG4));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SHSUB16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SHSUB16S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SHSUB16S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) - arm_field32(TMP_REG1, 15, 0))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) - arm_field32(TMP_REG1, 31, 16))));
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG3, 16, 1))), 15, 0);
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG4, 16, 1))), 31, 16);
		if((ARM_SHSUB16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SHSUB16S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SHSAXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SHSAXS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SHSAXS_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) + arm_field32(TMP_REG1, 31, 16))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) - arm_field32(TMP_REG1, 15, 0))));
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG3, 16, 1))), 15, 0);
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG4, 16, 1))), 31, 16);
		if((ARM_SHSAXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SHSAXS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SHASXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SHASXS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SHASXS_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) - arm_field32(TMP_REG1, 31, 16))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) + arm_field32(TMP_REG1, 15, 0))));
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG3, 16, 1))), 15, 0);
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG4, 16, 1))), 31, 16);
		if((ARM_SHASXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SHASXS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SHADD8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SHADD8S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SHADD8S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 7, 0) + arm_field32(TMP_REG1, 7, 0))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 8, 1))), 7, 0);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 8) + arm_field32(TMP_REG1, 15, 8))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 8, 1))), 15, 8);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 23, 16) + arm_field32(TMP_REG1, 23, 16))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 8, 1))), 23, 16);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 31, 24) + arm_field32(TMP_REG1, 31, 24))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 8, 1))), 31, 24);
		if((ARM_SHADD8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_SHADD8S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG4));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SHADD16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SHADD16S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SHADD16S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 15, 0) + arm_field32(TMP_REG2, 15, 0))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG1, 31, 16) + arm_field32(TMP_REG2, 31, 16))));
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG3, 16, 1))), 15, 0);
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG4, 16, 1))), 31, 16);
		if((ARM_SHADD16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SHADD16S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SELS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SELS_S__S__S_i_x_rn_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SELS_S__S__S_i_x_rm_r]));
		if((arm_bit8(arm_field32(ARM_APSR, 19, 16), 0) == 1))
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_REG1, 7, 0))), 7, 0);
		else
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_REG2, 7, 0))), 7, 0);
		if((arm_bit8(arm_field32(ARM_APSR, 19, 16), 1) == 1))
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_REG1, 15, 8))), 15, 8);
		else
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_REG2, 15, 8))), 15, 8);
		if((arm_bit8(arm_field32(ARM_APSR, 19, 16), 2) == 1))
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_REG1, 23, 16))), 23, 16);
		else
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_REG2, 23, 16))), 23, 16);
		if((arm_bit8(arm_field32(ARM_APSR, 19, 16), 3) == 1))
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_REG1, 31, 24))), 31, 24);
		else
			TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_REG2, 31, 24))), 31, 24);
		if((ARM_SELS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SELS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG3));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SDIVS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SDIVS_S__S__S_i_x_rn_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SDIVS_S__S__S_i_x_rm_r]));
		if((TMP_REG2 == ((int32_t)(0))))
			TMP_REG3 = ((int32_t)(0));
		else
			TMP_REG3 = (TMP_REG1 / TMP_REG2);
		if((ARM_SDIVS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SDIVS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG3));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SBFXS_S__S___ID___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SBFXS_S__S___ID___ID_i_x_rn_r]));
		if((((uint32_t)(__ARM_MASK32(5, (arm_concat8(ARM_SBFXS_S__S___ID___ID_i_x_imm3, ARM_SBFXS_S__S___ID___ID_i_x_imm2, 3, 2) + ARM_SBFXS_S__S___ID___ID_i_x_widthm1)))) <= 31)) {
			TMP_REG2 = arm_field32_generic(TMP_REG1, __ARM_MASK32(5, (arm_concat8(ARM_SBFXS_S__S___ID___ID_i_x_imm3, ARM_SBFXS_S__S___ID___ID_i_x_imm2, 3, 2) + ARM_SBFXS_S__S___ID___ID_i_x_widthm1)), arm_concat8(ARM_SBFXS_S__S___ID___ID_i_x_imm3, ARM_SBFXS_S__S___ID___ID_i_x_imm2, 3, 2), 1 );
			if((ARM_SBFXS_S__S___ID___ID_i_x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_SBFXS_S__S___ID___ID_i_x_rd_r] = ((uint32_t)(TMP_REG2));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SBCSS_W_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SBCSS_W_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_SBCSS_W_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_SBCSS_W_S__S__SS_i_x_imm3, ARM_SBCSS_W_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SBCSS_W_S__S__SS_i_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SBCSS_W_S__S__SS_i_x_rn_r]));
		TMP_SWORD = (TMP_REG2 - ((int32_t)(TMP_USHIFTED1)));
		if((ARM_SBCSS_W_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SBCSS_W_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SBCSS_W_S__S__SS_i_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_USHIFTED1, 31))) == 1)))
					__gtmp_20 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_USHIFTED1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_19 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_18 = 1;
						else
							__gtmp_18 = 0;
						__gtmp_19 = __gtmp_18;
					}
					__gtmp_20 = __gtmp_19;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_22 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_22 = __gtmp_21;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SBCSS_W_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SBCSS_W_S__S___IU_i_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SBCSS_W_S__S___IU_i_x_rn_r]));
		if((arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
			switch(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
			case 0:
				__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
				break;
			case 1:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			case 2:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
				break;
			case 3:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			}
			__gtmp_19 = __gtmp_18;
		}
		else
			__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
		TMP_SWORD = (TMP_REG2 - ((int32_t)(__gtmp_19)));
		if((ARM_SBCSS_W_S__S___IU_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SBCSS_W_S__S___IU_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SBCSS_W_S__S___IU_i_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if((arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_20 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_21 = __gtmp_20;
				}
				else
					__gtmp_21 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~__gtmp_21, 31))) == 1)))
					__gtmp_26 = 1;
				else {
					if((arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
						switch(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
						case 0:
							__gtmp_22 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
							break;
						case 1:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						case 2:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
							break;
						case 3:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						}
						__gtmp_23 = __gtmp_22;
					}
					else
						__gtmp_23 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
					if(((((uint32_t)(arm_bit32(~__gtmp_23, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_25 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_24 = 1;
						else
							__gtmp_24 = 0;
						__gtmp_25 = __gtmp_24;
					}
					__gtmp_26 = __gtmp_25;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
				if((arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_27 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_28 = __gtmp_27;
				}
				else
					__gtmp_28 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_28, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_32 = 1;
				else {
					if((arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
						switch(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
						case 0:
							__gtmp_29 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
							break;
						case 1:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						case 2:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
							break;
						case 3:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						}
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_SBCSS_W_S__S___IU_i_x_i, ARM_SBCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_SBCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_30, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_32 = __gtmp_31;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_32)), 28, 28);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SASXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SASXS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SASXS_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) - arm_field32(TMP_REG1, 31, 16))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) + arm_field32(TMP_REG1, 15, 0))));
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG3, 15, 0))), 15, 0);
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG4, 15, 0))), 31, 16);
		if((ARM_SASXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SASXS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (1 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (0 + 16));
		if((TMP_REG4 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (3 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (2 + 16));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SADD8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SADD8S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SADD8S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 7, 0) + arm_field32(TMP_REG2, 7, 0))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 7, 0))), 7, 0);
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (0 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (0 + 16), (0 + 16));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 15, 8) + arm_field32(TMP_REG2, 15, 8))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 15, 8))), 15, 8);
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (1 + 16), (1 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (1 + 16));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 23, 16) + arm_field32(TMP_REG2, 23, 16))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 23, 16))), 23, 16);
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (2 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (2 + 16), (2 + 16));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 31, 24) + arm_field32(TMP_REG2, 31, 24))));
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(arm_field32(TMP_REG3, 31, 24))), 31, 24);
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), (3 + 16), (3 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (3 + 16));
		if((ARM_SADD8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_SADD8S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG4));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SADD16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SADD16S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SADD16S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 15, 0) + arm_field32(TMP_REG2, 15, 0))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG1, 31, 16) + arm_field32(TMP_REG2, 31, 16))));
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG3, 15, 0))), 15, 0);
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(arm_field32(TMP_REG4, 15, 0))), 31, 16);
		if((ARM_SADD16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SADD16S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
		if((TMP_REG3 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (1 + 16), (0 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (1 + 16), (0 + 16));
		if((TMP_REG4 >= ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(3)), (3 + 16), (2 + 16));
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), (3 + 16), (2 + 16));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSBSS_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_RSBSS_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_RSBSS_S__S__SS_i_x_imm3, ARM_RSBSS_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S__SS_i_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S__SS_i_x_rn_r]));
		TMP_SWORD = (((int32_t)(TMP_USHIFTED1)) - TMP_REG2);
		if((ARM_RSBSS_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_RSBSS_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_RSBSS_S__S__SS_i_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)))
					__gtmp_20 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_19 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)))
							__gtmp_18 = 1;
						else
							__gtmp_18 = 0;
						__gtmp_19 = __gtmp_18;
					}
					__gtmp_20 = __gtmp_19;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_22 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_22 = __gtmp_21;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RORSS_W_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_RORSS_W_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_RORSS_W_S__S__S_i_x_rn_r];
		TMP_USHIFTED1 = Decode_and_Shift(((3) &  ((1 << 8) - 1)), ((uint32_t)(arm_field32(TMP_UREG1, 7, 0))), ((TMP_UREG2) &  ((1 << 8) - 1)), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		if((ARM_RORSS_W_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_USHIFTED1;
		else
			ARM_GPR[ARM_RORSS_W_S__S__S_i_x_rd_r] = TMP_USHIFTED1;
		if((ARM_RORSS_W_S__S__S_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_USHIFTED1, 31), 31, 31);
			if((TMP_REG2 == ((int32_t)(0))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_REVSHS_W_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_REVSHS_W_S__S_i_x_rm_r];
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(__ARM_EXTS8(24, ((int32_t)(arm_field32(TMP_UREG1, 7, 0)))))), 31, 8);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 15, 8))), 7, 0);
		if((ARM_REVSHS_W_S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_REVSHS_W_S__S_i_x_rd_r] = TMP_UREG2;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_REV16S_W_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_REV16S_W_S__S_i_x_rm_r];
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 23, 16))), 31, 24);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 31, 24))), 23, 16);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 7, 0))), 15, 8);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 15, 8))), 7, 0);
		if((ARM_REV16S_W_S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_REV16S_W_S__S_i_x_rd_r] = TMP_UREG2;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_REVS_W_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_REVS_W_S__S_i_x_rm_r];
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 7, 0))), 31, 24);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 15, 8))), 23, 16);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 23, 16))), 15, 8);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 31, 24))), 7, 0);
		if((ARM_REVS_W_S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_REVS_W_S__S_i_x_rd_r] = TMP_UREG2;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RBITS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG3;
	uint8_t TMP_IMM;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_RBITS_S__S_i_x_rm_r];
		TMP_IMM = ((uint8_t)(0));
gliss_RBITS_S__S_0_:
		if((((uint32_t)(TMP_IMM)) != 32)) {
			TMP_UREG3 = arm_set_field32_generic(TMP_UREG3, arm_field32_generic(TMP_UREG1, TMP_IMM, TMP_IMM, 1 ), (31 - ((uint32_t)(TMP_IMM))), (31 - ((uint32_t)(TMP_IMM))), 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_RBITS_S__S_0_;
		}
		if((ARM_RBITS_S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_RBITS_S__S_i_x_rd_r] = TMP_UREG3;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QSUB8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QSUB8S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QSUB8S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 7, 0) - arm_field32(TMP_REG1, 7, 0))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((8 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((8 - 1) - 1)), (8 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((8 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (8 - 1)), (8 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_REG3, (8 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(__gtmp_19)), 7, 0);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 8) - arm_field32(TMP_REG1, 15, 8))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((8 - 1) - 1)))
			__gtmp_21 = arm_field32((2 ^ ((8 - 1) - 1)), (8 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((8 - 1) - 1))))))
				__gtmp_20 = arm_field32(-(2 ^ (8 - 1)), (8 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_REG3, (8 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(__gtmp_21)), 15, 8);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 23, 16) - arm_field32(TMP_REG1, 23, 16))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((8 - 1) - 1)))
			__gtmp_23 = arm_field32((2 ^ ((8 - 1) - 1)), (8 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((8 - 1) - 1))))))
				__gtmp_22 = arm_field32(-(2 ^ (8 - 1)), (8 - 1), 0);
			else
				__gtmp_22 = arm_field32(TMP_REG3, (8 - 1), 0);
			__gtmp_23 = __gtmp_22;
		}
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(__gtmp_23)), 23, 16);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 31, 24) - arm_field32(TMP_REG1, 31, 24))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((8 - 1) - 1)))
			__gtmp_25 = arm_field32((2 ^ ((8 - 1) - 1)), (8 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((8 - 1) - 1))))))
				__gtmp_24 = arm_field32(-(2 ^ (8 - 1)), (8 - 1), 0);
			else
				__gtmp_24 = arm_field32(TMP_REG3, (8 - 1), 0);
			__gtmp_25 = __gtmp_24;
		}
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(__gtmp_25)), 31, 24);
		if((ARM_QSUB8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_QSUB8S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG4));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QSUB16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint16_t __gtmp_21;
	uint16_t __gtmp_20;
	uint16_t __gtmp_19;
	uint16_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QSUB16S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QSUB16S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) - arm_field32(TMP_REG1, 15, 0))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) - arm_field32(TMP_REG1, 31, 16))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((16 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((16 - 1) - 1)), (16 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((16 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (16 - 1)), (16 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_REG3, (16 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(__gtmp_19)), 15, 0);
		if((((uint32_t)((TMP_REG4 > ((int32_t)(2))))) ^ ((16 - 1) - 1)))
			__gtmp_21 = arm_field32((2 ^ ((16 - 1) - 1)), (16 - 1), 0);
		else {
			if((TMP_REG4 > ((int32_t)(-(2 ^ ((16 - 1) - 1))))))
				__gtmp_20 = arm_field32(-(2 ^ (16 - 1)), (16 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_REG4, (16 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(__gtmp_21)), 31, 16);
		if((ARM_QSUB16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_QSUB16S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QSUBS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QSUBS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QSUBS_S__S__S_i_x_rn_r]));
		TMP_REG3 = (TMP_REG1 - TMP_REG2);
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((32 - 1) - 1)), (32 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (32 - 1)), (32 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_REG3, (32 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_REG4 = ((int32_t)(__gtmp_19));
		if((ARM_QSUBS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_QSUBS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG4));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_21 = 1;
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_20 = 1;
			else
				__gtmp_20 = 0;
			__gtmp_21 = __gtmp_20;
		}
		TMP_IMM = ((uint8_t)(__gtmp_21));
		if((arm_bit8(TMP_IMM, 0) == 1))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QSAXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint16_t __gtmp_21;
	uint16_t __gtmp_20;
	uint16_t __gtmp_19;
	uint16_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_IMM32;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QSAXS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QSAXS_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) + arm_field32(TMP_REG1, 31, 16))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) - arm_field32(TMP_REG1, 15, 0))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((16 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((16 - 1) - 1)), (16 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((16 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (16 - 1)), (16 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_REG3, (16 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_IMM32 = arm_set_field32(TMP_IMM32, ((uint32_t)(__gtmp_19)), 15, 0);
		if((((uint32_t)((TMP_REG4 > ((int32_t)(2))))) ^ ((16 - 1) - 1)))
			__gtmp_21 = arm_field32((2 ^ ((16 - 1) - 1)), (16 - 1), 0);
		else {
			if((TMP_REG4 > ((int32_t)(-(2 ^ ((16 - 1) - 1))))))
				__gtmp_20 = arm_field32(-(2 ^ (16 - 1)), (16 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_REG4, (16 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_IMM32 = arm_set_field32(TMP_IMM32, ((uint32_t)(__gtmp_21)), 31, 16);
		if((ARM_QSAXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_IMM32;
		else
			ARM_GPR[ARM_QSAXS_S__S__S_i_x_rd_r] = TMP_IMM32;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QDSUBS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	int32_t __gtmp_23;
	int32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM2;
	int32_t TMP_REG5;
	uint8_t TMP_IMM;
	int32_t TMP_REG4;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QDSUBS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QDSUBS_S__S__S_i_x_rn_r]));
		if((((uint32_t)(((((int32_t)(2)) * TMP_REG2) > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((32 - 1) - 1)), (32 - 1), 0);
		else {
			if(((((int32_t)(2)) * TMP_REG2) > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (32 - 1)), (32 - 1), 0);
			else
				__gtmp_18 = (2 * arm_field32(TMP_REG2, (32 - 1), 0));
			__gtmp_19 = __gtmp_18;
		}
		TMP_REG4 = ((int32_t)(__gtmp_19));
		if((((uint32_t)(((((int32_t)(2)) * TMP_REG2) > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_21 = 1;
		else {
			if(((((int32_t)(2)) * TMP_REG2) > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_20 = 1;
			else
				__gtmp_20 = 0;
			__gtmp_21 = __gtmp_20;
		}
		TMP_IMM = ((uint8_t)(__gtmp_21));
		if((((uint32_t)(((TMP_REG1 - TMP_REG4) > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_23 = ((int32_t)(arm_field32((2 ^ ((32 - 1) - 1)), (32 - 1), 0)));
		else {
			if(((TMP_REG1 - TMP_REG4) > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_22 = ((int32_t)(arm_field32(-(2 ^ (32 - 1)), (32 - 1), 0)));
			else
				__gtmp_22 = (TMP_REG1 - ((int32_t)(arm_field32(TMP_REG4, (32 - 1), 0))));
			__gtmp_23 = __gtmp_22;
		}
		TMP_REG5 = __gtmp_23;
		if((((uint32_t)(((TMP_REG1 - TMP_REG4) > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_25 = 1;
		else {
			if(((TMP_REG1 - TMP_REG4) > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_24 = 1;
			else
				__gtmp_24 = 0;
			__gtmp_25 = __gtmp_24;
		}
		TMP_IMM2 = ((uint8_t)(__gtmp_25));
		if((ARM_QDSUBS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_QDSUBS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
		if(((arm_bit8(TMP_IMM, 0) == 1) || (arm_bit8(TMP_IMM2, 0) == 1)))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QDADDS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	int32_t __gtmp_23;
	int32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM2;
	int32_t TMP_REG5;
	uint8_t TMP_IMM;
	int32_t TMP_REG4;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QDADDS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QDADDS_S__S__S_i_x_rn_r]));
		if((((uint32_t)(((((int32_t)(2)) * TMP_REG2) > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((32 - 1) - 1)), (32 - 1), 0);
		else {
			if(((((int32_t)(2)) * TMP_REG2) > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (32 - 1)), (32 - 1), 0);
			else
				__gtmp_18 = (2 * arm_field32(TMP_REG2, (32 - 1), 0));
			__gtmp_19 = __gtmp_18;
		}
		TMP_REG4 = ((int32_t)(__gtmp_19));
		if((((uint32_t)(((((int32_t)(2)) * TMP_REG2) > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_21 = 1;
		else {
			if(((((int32_t)(2)) * TMP_REG2) > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_20 = 1;
			else
				__gtmp_20 = 0;
			__gtmp_21 = __gtmp_20;
		}
		TMP_IMM = ((uint8_t)(__gtmp_21));
		if((((uint32_t)(((TMP_REG1 + TMP_REG4) > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_23 = ((int32_t)(arm_field32((2 ^ ((32 - 1) - 1)), (32 - 1), 0)));
		else {
			if(((TMP_REG1 + TMP_REG4) > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_22 = ((int32_t)(arm_field32(-(2 ^ (32 - 1)), (32 - 1), 0)));
			else
				__gtmp_22 = (TMP_REG1 + ((int32_t)(arm_field32(TMP_REG4, (32 - 1), 0))));
			__gtmp_23 = __gtmp_22;
		}
		TMP_REG5 = __gtmp_23;
		if((((uint32_t)(((TMP_REG1 + TMP_REG4) > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_25 = 1;
		else {
			if(((TMP_REG1 + TMP_REG4) > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_24 = 1;
			else
				__gtmp_24 = 0;
			__gtmp_25 = __gtmp_24;
		}
		TMP_IMM2 = ((uint8_t)(__gtmp_25));
		if((ARM_QDADDS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_QDADDS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
		if(((arm_bit8(TMP_IMM, 0) == 1) || (arm_bit8(TMP_IMM2, 0) == 1)))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QASXS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint16_t __gtmp_21;
	uint16_t __gtmp_20;
	uint16_t __gtmp_19;
	uint16_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_IMM32;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QASXS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QASXS_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 15, 0) - arm_field32(TMP_REG1, 31, 16))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) + arm_field32(TMP_REG1, 15, 0))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((16 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((16 - 1) - 1)), (16 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((16 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (16 - 1)), (16 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_REG3, (16 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_IMM32 = arm_set_field32(TMP_IMM32, ((uint32_t)(__gtmp_19)), 15, 0);
		if((((uint32_t)((TMP_REG4 > ((int32_t)(2))))) ^ ((16 - 1) - 1)))
			__gtmp_21 = arm_field32((2 ^ ((16 - 1) - 1)), (16 - 1), 0);
		else {
			if((TMP_REG4 > ((int32_t)(-(2 ^ ((16 - 1) - 1))))))
				__gtmp_20 = arm_field32(-(2 ^ (16 - 1)), (16 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_REG4, (16 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_IMM32 = arm_set_field32(TMP_IMM32, ((uint32_t)(__gtmp_21)), 31, 16);
		if((ARM_QASXS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_IMM32;
		else
			ARM_GPR[ARM_QASXS_S__S__S_i_x_rd_r] = TMP_IMM32;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QADD8S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QADD8S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QADD8S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 7, 0) + arm_field32(TMP_REG2, 7, 0))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((8 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((8 - 1) - 1)), (8 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((8 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (8 - 1)), (8 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_REG3, (8 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(__gtmp_19)), 7, 0);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 15, 8) + arm_field32(TMP_REG2, 15, 8))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((8 - 1) - 1)))
			__gtmp_21 = arm_field32((2 ^ ((8 - 1) - 1)), (8 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((8 - 1) - 1))))))
				__gtmp_20 = arm_field32(-(2 ^ (8 - 1)), (8 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_REG3, (8 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(__gtmp_21)), 15, 8);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 23, 16) + arm_field32(TMP_REG2, 23, 16))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((8 - 1) - 1)))
			__gtmp_23 = arm_field32((2 ^ ((8 - 1) - 1)), (8 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((8 - 1) - 1))))))
				__gtmp_22 = arm_field32(-(2 ^ (8 - 1)), (8 - 1), 0);
			else
				__gtmp_22 = arm_field32(TMP_REG3, (8 - 1), 0);
			__gtmp_23 = __gtmp_22;
		}
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(__gtmp_23)), 23, 16);
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 31, 24) + arm_field32(TMP_REG2, 31, 24))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((8 - 1) - 1)))
			__gtmp_25 = arm_field32((2 ^ ((8 - 1) - 1)), (8 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((8 - 1) - 1))))))
				__gtmp_24 = arm_field32(-(2 ^ (8 - 1)), (8 - 1), 0);
			else
				__gtmp_24 = arm_field32(TMP_REG3, (8 - 1), 0);
			__gtmp_25 = __gtmp_24;
		}
		TMP_REG4 = arm_set_field32(TMP_REG4, ((int32_t)(__gtmp_25)), 31, 24);
		if((ARM_QADD8S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_QADD8S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG4));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QADD16S_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint16_t __gtmp_21;
	uint16_t __gtmp_20;
	uint16_t __gtmp_19;
	uint16_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QADD16S_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QADD16S_S__S__S_i_x_rn_r]));
		TMP_REG3 = ((int32_t)((arm_field32(TMP_REG1, 15, 0) + arm_field32(TMP_REG2, 15, 0))));
		TMP_REG4 = ((int32_t)((arm_field32(TMP_REG1, 31, 16) + arm_field32(TMP_REG2, 31, 16))));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((16 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((16 - 1) - 1)), (16 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((16 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (16 - 1)), (16 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_REG3, (16 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(__gtmp_19)), 15, 0);
		if((((uint32_t)((TMP_REG4 > ((int32_t)(2))))) ^ ((16 - 1) - 1)))
			__gtmp_21 = arm_field32((2 ^ ((16 - 1) - 1)), (16 - 1), 0);
		else {
			if((TMP_REG4 > ((int32_t)(-(2 ^ ((16 - 1) - 1))))))
				__gtmp_20 = arm_field32(-(2 ^ (16 - 1)), (16 - 1), 0);
			else
				__gtmp_20 = arm_field32(TMP_REG4, (16 - 1), 0);
			__gtmp_21 = __gtmp_20;
		}
		TMP_REG5 = arm_set_field32(TMP_REG5, ((int32_t)(__gtmp_21)), 31, 16);
		if((ARM_QADD16S_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_QADD16S_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG5));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_QADDS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_QADDS_S__S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_QADDS_S__S__S_i_x_rn_r]));
		TMP_REG3 = (TMP_REG1 + TMP_REG2);
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_19 = arm_field32((2 ^ ((32 - 1) - 1)), (32 - 1), 0);
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_18 = arm_field32(-(2 ^ (32 - 1)), (32 - 1), 0);
			else
				__gtmp_18 = arm_field32(TMP_REG3, (32 - 1), 0);
			__gtmp_19 = __gtmp_18;
		}
		TMP_REG4 = ((int32_t)(__gtmp_19));
		if((ARM_QADDS_S__S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_QADDS_S__S__S_i_x_rd_r] = ((uint32_t)(TMP_REG4));
		if((((uint32_t)((TMP_REG3 > ((int32_t)(2))))) ^ ((32 - 1) - 1)))
			__gtmp_21 = 1;
		else {
			if((TMP_REG3 > ((int32_t)(-(2 ^ ((32 - 1) - 1))))))
				__gtmp_20 = 1;
			else
				__gtmp_20 = 0;
			__gtmp_21 = __gtmp_20;
		}
		TMP_IMM = ((uint8_t)(__gtmp_21));
		if((arm_bit8(TMP_IMM, 0) == 1))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 27, 27);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PKHBTS_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_PKHBTS_S__S__SS_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_PKHBTS_S__S__SS_i_x_rn_r]));
		if((ARM_PKHBTS_S__S__SS_i_x_tb == 1)) {
			TMP_USHIFTED1 = Decode_and_Shift(((2) &  ((1 << 8) - 1)), ((uint32_t)(arm_concat8(ARM_PKHBTS_S__S__SS_i_x_imm3, ARM_PKHBTS_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
			TMP_REG3 = ((int32_t)((arm_field32(TMP_REG2, 31, 16) + arm_field32(TMP_USHIFTED1, 15, 0))));
		}
		else {
			TMP_USHIFTED1 = Decode_and_Shift(((0) &  ((1 << 8) - 1)), ((uint32_t)(arm_concat8(ARM_PKHBTS_S__S__SS_i_x_imm3, ARM_PKHBTS_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
			TMP_REG3 = ((int32_t)((arm_field32(TMP_USHIFTED1, 31, 16) + arm_field32(TMP_REG2, 15, 0))));
		}
		if((ARM_PKHBTS_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_PKHBTS_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_REG3));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ORNSS_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ORNSS_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_ORNSS_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_ORNSS_S__S__SS_i_x_imm3, ARM_ORNSS_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		if((ARM_ORNSS_S__S__SS_i_x_rn_r == 15))
			TMP_UREG2 = ~TMP_USHIFTED1;
		else {
			TMP_UREG1 = ARM_GPR[ARM_ORNSS_S__S__SS_i_x_rn_r];
			TMP_UREG2 = (TMP_UREG1 | ~TMP_USHIFTED1);
		}
		if((ARM_ORNSS_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_ORNSS_S__S__SS_i_x_rd_r] = TMP_UREG2;
		if((ARM_ORNSS_S__S__SS_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_UREG2, 31), 31, 31);
			if((TMP_UREG2 == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ORNSS_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((ARM_ORNSS_S__S___IU_i_x_rn_r == 15)) {
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_20 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_21 = __gtmp_20;
			}
			else
				__gtmp_21 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			TMP_UREG2 = ~__gtmp_21;
		}
		else {
			TMP_UREG1 = ARM_GPR[ARM_ORNSS_S__S___IU_i_x_rn_r];
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_19 = __gtmp_18;
			}
			else
				__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			TMP_UREG2 = (TMP_UREG1 | ~__gtmp_19);
		}
		if((ARM_ORNSS_S__S___IU_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_ORNSS_S__S___IU_i_x_rd_r] = TMP_UREG2;
		if((ARM_ORNSS_S__S___IU_i_x_S_set == 1)) {
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_22 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_23 = __gtmp_22;
			}
			else
				__gtmp_23 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(__gtmp_23, 31), 31, 31);
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_24 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_24 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_24 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_24 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_25 = __gtmp_24;
			}
			else
				__gtmp_25 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			if((__gtmp_25 == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 0) == ((uint16_t)(0))))
				__gtmp_26 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_26 = arm_bit32((((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))) >> (((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORNSS_S__S___IU_i_x_i, ARM_ORNSS_S__S___IU_i_x_imm3, 1, 3), ARM_ORNSS_S__S___IU_i_x_imm8, 4, 8), 11, 7))) - 1)), 0);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_26, 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MRRCSS_D__D__S__S__CRD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MRCSS_D__D__S__CRD__CRD___LB_D_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MLSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint64_t TMP_DOUBLE;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_MLSS_S__S__S__S_i_x_rn_r];
		TMP_UREG2 = ARM_GPR[ARM_MLSS_S__S__S__S_i_x_rm_r];
		TMP_UREG3 = ARM_GPR[ARM_MLSS_S__S__S__S_i_x_ra_r];
		TMP_DOUBLE = ((uint64_t)((TMP_UREG3 - (TMP_UREG1 * TMP_UREG2))));
		TMP_UREG4 = arm_field64(TMP_DOUBLE, 31, 0);
		if((ARM_MLSS_S__S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_MLSS_S__S__S__S_i_x_rd_r] = TMP_UREG4;
		TMP_UREG5 = ARM_GPR[ARM_MLSS_S__S__S__S_i_x_rd_r];
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MLAS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	uint32_t TMP_UREG4;
	uint64_t TMP_DOUBLE;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_MLAS_S__S__S__S_i_x_rn_r];
		TMP_UREG2 = ARM_GPR[ARM_MLAS_S__S__S__S_i_x_rm_r];
		if((ARM_MLAS_S__S__S__S_i_x_ra_r == 15)) {
			TMP_UREG3 = ARM_GPR[ARM_MLAS_S__S__S__S_i_x_ra_r];
			TMP_DOUBLE = ((uint64_t)((TMP_UREG1 * TMP_UREG2)));
		}
		else
			TMP_DOUBLE = ((uint64_t)(((TMP_UREG1 * TMP_UREG2) + TMP_UREG3)));
		TMP_UREG4 = arm_field64(TMP_DOUBLE, 31, 0);
		if((ARM_MLAS_S__S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_MLAS_S__S__S__S_i_x_rd_r] = TMP_UREG4;
		TMP_UREG5 = ARM_GPR[ARM_MLAS_S__S__S__S_i_x_rd_r];
		if((((uint32_t)(ARM_SBIT)) == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_UREG5, 31), 31, 31);
			if((TMP_UREG5 == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MCRRSS_D__D__S__S__CRD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MCRSS_D__D__S__CRD__CRD___LB_D_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LSRSS_W_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_LSRSS_W_S__S__S_i_x_rm_r];
		TMP_UREG2 = ARM_GPR[ARM_LSRSS_W_S__S__S_i_x_rn_r];
		TMP_USHIFTED1 = Decode_and_Shift(((1) &  ((1 << 8) - 1)), ((uint32_t)(arm_field32(TMP_UREG1, 7, 0))), ((TMP_UREG2) &  ((1 << 8) - 1)), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		if((ARM_LSRSS_W_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_USHIFTED1;
		else
			ARM_GPR[ARM_LSRSS_W_S__S__S_i_x_rd_r] = TMP_USHIFTED1;
		if((ARM_LSRSS_W_S__S__S_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_USHIFTED1, 31), 31, 31);
			if((TMP_REG2 == ((int32_t)(0))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDMDBS_SS___LB_S_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int32_t TMP_REG1;
	int8_t TMP_SETBIT;
	uint16_t TMP_IMM16;
	uint16_t TMP_REGLIST;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REGLIST = arm_concat16(arm_concat8(arm_concat8(ARM_LDMDBS_SS___LB_S_RB__i_x_P, ARM_LDMDBS_SS___LB_S_RB__i_x_M, 1, 1), 0, 2, 1), ARM_LDMDBS_SS___LB_S_RB__i_x_llist_r, 3, 13);
		TMP_IMM16 = ((uint16_t)(0));
		TMP_SETBIT = ((int8_t)(0));
		ARM_B15SET = ((uint8_t)(0));
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDMDBS_SS___LB_S_RB__i_x_rn_r]));
gliss_LDMDBS_SS___LB_S_RB__0_:
		if((((uint32_t)(TMP_IMM16)) != 16)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
				if((((uint32_t)(TMP_IMM16)) == 15))
					ARM_B15SET = ((uint8_t)(1));
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM16 = ((uint16_t)((((uint32_t)(TMP_IMM16)) + 1)));
goto gliss_LDMDBS_SS___LB_S_RB__0_;
		}
		TMP_START_ADDR = ((uint32_t)(TMP_REG1));
		TMP_END_ADDR = ((uint32_t)((TMP_REG1 - (((int32_t)(TMP_SETBIT)) * ((int32_t)(4))))));
		TMP_IMM16 = ((uint16_t)(0));
gliss_LDMDBS_SS___LB_S_RB__1_:
		if((((uint32_t)(TMP_IMM16)) != 15)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				arm_mem_write32(ARM_M, TMP_START_ADDR, ARM_GPR[TMP_IMM16]);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM16 = ((uint16_t)((((uint32_t)(TMP_IMM16)) + 1)));
goto gliss_LDMDBS_SS___LB_S_RB__1_;
		}
		ARM_GPR[ARM_LDMDBS_SS___LB_S_RB__i_x_rn_r] = ((uint32_t)((TMP_REG1 + (((int32_t)(TMP_SETBIT)) * ((int32_t)(4))))));
		if((((uint32_t)(ARM_B15SET)) == 1)) {
			if((7 >= 5)) {
				if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 3)) {
					if((((uint32_t)(arm_bit32(TMP_START_ADDR, 0))) == 1))
						ARM_NPC = arm_concat32(arm_field32(TMP_START_ADDR, 31, 1), 0, 31, 1);
				}
				else {
					if((((uint32_t)(arm_bit32(TMP_START_ADDR, 0))) == 1)) {
						__gtmp_19 = 1;
						ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_19 >> 1), 24, 24);
						ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_19, 5, 5);
						ARM_NPC = arm_concat32(arm_field32(TMP_START_ADDR, 31, 1), 0, 31, 1);
					}
					else {
						if((((uint32_t)(arm_bit32(TMP_START_ADDR, 1))) == 0)) {
							__gtmp_18 = 0;
							ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_18 >> 1), 24, 24);
							ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_18, 5, 5);
							ARM_NPC = TMP_START_ADDR;
						}
					}
				}
			}
			else {
				if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
					ARM_NPC = arm_concat32(arm_field32(TMP_START_ADDR, 31, 2), 0, 30, 2);
				else {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
						if(0)
							ARM_NPC = arm_field32(TMP_START_ADDR, 31, 0);
						else {
							newaddress = TMP_START_ADDR;
							ARM_NPC = newaddress;
						}
					}
					else
						ARM_NPC = arm_concat32(arm_field32(TMP_START_ADDR, 31, 1), 0, 31, 1);
				}
			}
		}
		if(((ARM_LDMDBS_SS___LB_S_RB__i_x_W == 1) && (((int32_t)(TMP_SETBIT)) == ((int32_t)(0))))) {
			if((ARM_LDMDBS_SS___LB_S_RB__i_x_rn_r == 15))
				ARM_NPC = TMP_END_ADDR;
			else
				ARM_GPR[ARM_LDMDBS_SS___LB_S_RB__i_x_rn_r] = TMP_END_ADDR;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_EORSS_W_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_EORSS_W_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_EORSS_W_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_EORSS_W_S__S__SS_i_x_imm3, ARM_EORSS_W_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		TMP_UREG1 = ARM_GPR[ARM_EORSS_W_S__S__SS_i_x_rn_r];
		TMP_UREG2 = (TMP_UREG1 ^ TMP_USHIFTED1);
		if((ARM_EORSS_W_S__S__SS_i_x_rd_r != 15)) {
			if((ARM_EORSS_W_S__S__SS_i_x_rd_r == 15))
				ARM_NPC = TMP_UREG2;
			else
				ARM_GPR[ARM_EORSS_W_S__S__SS_i_x_rd_r] = TMP_UREG2;
		}
		if(((ARM_EORSS_W_S__S__SS_i_x_S_set == 1) || (ARM_EORSS_W_S__S__SS_i_x_rd_r == 15))) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_UREG2, 31), 31, 31);
			if((TMP_UREG2 == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_EORSS_W_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_EORSS_W_S__S___IU_i_x_rn_r];
		if((arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
			switch(arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
			case 0:
				__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
				break;
			case 1:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			case 2:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
				break;
			case 3:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			}
			__gtmp_19 = __gtmp_18;
		}
		else
			__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
		TMP_UREG2 = (TMP_UREG1 ^ __gtmp_19);
		if((ARM_EORSS_W_S__S___IU_i_x_rd_r != 15)) {
			if((ARM_EORSS_W_S__S___IU_i_x_rd_r == 15))
				ARM_NPC = TMP_UREG2;
			else
				ARM_GPR[ARM_EORSS_W_S__S___IU_i_x_rd_r] = TMP_UREG2;
		}
		if(((ARM_EORSS_W_S__S___IU_i_x_S_set == 1) || (ARM_EORSS_W_S__S___IU_i_x_rd_r == 15))) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_UREG2, 31), 31, 31);
			if((TMP_UREG2 == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			if((arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 0) == ((uint16_t)(0))))
				__gtmp_20 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_20 = arm_bit32((((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))) >> (((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_EORSS_W_S__S___IU_i_x_i, ARM_EORSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_EORSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))) - 1)), 0);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_20, 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CLZS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_CLZS_S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(30));
		if((ARM_CLZS_S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG2));
		else
			ARM_GPR[ARM_CLZS_S__S_i_x_rd_r] = ((uint32_t)(TMP_REG2));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BICSS_W_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BICSS_W_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_BICSS_W_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_BICSS_W_S__S__SS_i_x_imm3, ARM_BICSS_W_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		TMP_REG2 = ((int32_t)((ARM_GPR[ARM_BICSS_W_S__S__SS_i_x_rn_r] & ~TMP_USHIFTED1)));
		if((ARM_BICSS_W_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG2));
		else
			ARM_GPR[ARM_BICSS_W_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_REG2));
		if((ARM_BICSS_W_S__S__SS_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG2, 31), 31, 31);
			if((TMP_REG2 == ((int32_t)(0))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BICSS_W_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
			switch(arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
			case 0:
				__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
				break;
			case 1:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			case 2:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
				break;
			case 3:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			}
			__gtmp_19 = __gtmp_18;
		}
		else
			__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
		TMP_REG1 = ((int32_t)((ARM_GPR[ARM_BICSS_W_S__S___IU_i_x_rn_r] & ~__gtmp_19)));
		if((ARM_BICSS_W_S__S___IU_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG1));
		else
			ARM_GPR[ARM_BICSS_W_S__S___IU_i_x_rd_r] = ((uint32_t)(TMP_REG1));
		if((ARM_BICSS_W_S__S___IU_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
			if((TMP_REG1 == ((int32_t)(0))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			if((arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 0) == ((uint16_t)(0))))
				__gtmp_20 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_20 = arm_bit32((((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))) >> (((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_BICSS_W_S__S___IU_i_x_i, ARM_BICSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_BICSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))) - 1)), 0);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_20, 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BFIS_S__S___ID___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_BFIS_S__S___ID___ID_i_x_rn_r];
		TMP_UREG2 = ARM_GPR[ARM_BFIS_S__S___ID___ID_i_x_rd_r];
		if((ARM_BFIS_S__S___ID___ID_i_x_msb >= arm_concat8(ARM_BFIS_S__S___ID___ID_i_x_imm3, ARM_BFIS_S__S___ID___ID_i_x_imm2, 3, 2))) {
			if((ARM_BFIS_S__S___ID___ID_i_x_rn_r == 15))
				TMP_UREG2 = arm_set_field32_generic(TMP_UREG2, 0, ARM_BFIS_S__S___ID___ID_i_x_msb, arm_concat8(ARM_BFIS_S__S___ID___ID_i_x_imm3, ARM_BFIS_S__S___ID___ID_i_x_imm2, 3, 2), 1);
			else
				TMP_UREG2 = arm_set_field32_generic(TMP_UREG2, arm_field32_generic(TMP_UREG1, __ARM_MASK32(5, (ARM_BFIS_S__S___ID___ID_i_x_msb - arm_concat8(ARM_BFIS_S__S___ID___ID_i_x_imm3, ARM_BFIS_S__S___ID___ID_i_x_imm2, 3, 2))), 0, 1 ), ARM_BFIS_S__S___ID___ID_i_x_msb, arm_concat8(ARM_BFIS_S__S___ID___ID_i_x_imm3, ARM_BFIS_S__S___ID___ID_i_x_imm2, 3, 2), 1);
			if((ARM_BFIS_S__S___ID___ID_i_x_rd_r == 15))
				ARM_NPC = TMP_UREG2;
			else
				ARM_GPR[ARM_BFIS_S__S___ID___ID_i_x_rd_r] = TMP_UREG2;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BS_W_08X_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
			ARM_NPC = arm_concat32(arm_field32((((int32_t)((ARM_BS_W_08X___IADDR + 4))) + __ARM_EXTS32(7, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BS_W_08X_i_x_S_set, __ARM_MASK32(1, ~(ARM_BS_W_08X_i_x_j1 ^ ARM_BS_W_08X_i_x_S_set)), 1, 1), __ARM_MASK32(1, ~(ARM_BS_W_08X_i_x_j2 ^ ARM_BS_W_08X_i_x_S_set)), 2, 1), ARM_BS_W_08X_i_x_imm10, 3, 10), ARM_BS_W_08X_i_x_imm11, 13, 11), arm_bit32(0, 0), 24, 1))))), 31, 2), 0, 30, 2);
		else {
			if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
				if(0)
					ARM_NPC = arm_field32((((int32_t)((ARM_BS_W_08X___IADDR + 4))) + __ARM_EXTS32(7, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BS_W_08X_i_x_S_set, __ARM_MASK32(1, ~(ARM_BS_W_08X_i_x_j1 ^ ARM_BS_W_08X_i_x_S_set)), 1, 1), __ARM_MASK32(1, ~(ARM_BS_W_08X_i_x_j2 ^ ARM_BS_W_08X_i_x_S_set)), 2, 1), ARM_BS_W_08X_i_x_imm10, 3, 10), ARM_BS_W_08X_i_x_imm11, 13, 11), arm_bit32(0, 0), 24, 1))))), 31, 0);
				else {
					newaddress = ((uint32_t)((((int32_t)((ARM_BS_W_08X___IADDR + 4))) + __ARM_EXTS32(7, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BS_W_08X_i_x_S_set, __ARM_MASK32(1, ~(ARM_BS_W_08X_i_x_j1 ^ ARM_BS_W_08X_i_x_S_set)), 1, 1), __ARM_MASK32(1, ~(ARM_BS_W_08X_i_x_j2 ^ ARM_BS_W_08X_i_x_S_set)), 2, 1), ARM_BS_W_08X_i_x_imm10, 3, 10), ARM_BS_W_08X_i_x_imm11, 13, 11), arm_bit32(0, 0), 24, 1)))))));
					ARM_NPC = newaddress;
				}
			}
			else
				ARM_NPC = arm_concat32(arm_field32((((int32_t)((ARM_BS_W_08X___IADDR + 4))) + __ARM_EXTS32(7, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BS_W_08X_i_x_S_set, __ARM_MASK32(1, ~(ARM_BS_W_08X_i_x_j1 ^ ARM_BS_W_08X_i_x_S_set)), 1, 1), __ARM_MASK32(1, ~(ARM_BS_W_08X_i_x_j2 ^ ARM_BS_W_08X_i_x_S_set)), 2, 1), ARM_BS_W_08X_i_x_imm10, 3, 10), ARM_BS_W_08X_i_x_imm11, 13, 11), arm_bit32(0, 0), 24, 1))))), 31, 1), 0, 31, 1);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BS_W_08X_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if(((((ARM_BS_W_08X_0_i_x_S_set == 0) && (ARM_BS_W_08X_0_i_x_cond_cond == 15)) && (ARM_BS_W_08X_0_i_x_imm6 == 47)) && (ARM_BS_W_08X_0_i_x_j1 == 0)))
			;
		else {
			if((((((ARM_BS_W_08X_0_i_x_S_set == 0) && (ARM_BS_W_08X_0_i_x_cond_cond == 14)) && (arm_field8(ARM_BS_W_08X_0_i_x_imm6, 5, 4) == 0)) && (ARM_BS_W_08X_0_i_x_j1 == 0)) && (arm_field16(ARM_BS_W_08X_0_i_x_imm11, 9, 8) == 0)))
				;
			else {
				if((((((uint32_t)(ARM_BS_W_08X_0_i_x_cond_cond)) == 14) && (arm_field8(ARM_BS_W_08X_0_i_x_imm6, 5, 4) == 2)) && (arm_field16(ARM_BS_W_08X_0_i_x_imm11, 10, 8) == 0))) {
					switch(arm_field16(ARM_BS_W_08X_0_i_x_imm11, 4, 0)) {
					case 0:
						break;
					case 1:
						break;
					case 2:
						break;
					case 3:
						break;
					case 4:
						break;
					default:
						if((arm_field16(ARM_BS_W_08X_0_i_x_imm11, 7, 4) == 15))
							;
					}
				}
				else {
					if(((((uint32_t)(ARM_BS_W_08X_0_i_x_cond_cond)) == 14) && (arm_field8(ARM_BS_W_08X_0_i_x_imm6, 5, 4) == 3))) {
						switch(arm_field16(ARM_BS_W_08X_0_i_x_imm11, 7, 4)) {
						case 2:
							break;
						case 4:
							break;
						case 5:
							break;
						case 6:
							break;
						}
					}
					else {
						if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
							ARM_NPC = arm_concat32(arm_field32((((int32_t)((ARM_BS_W_08X_0___IADDR + 4))) + __ARM_EXTS32(11, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BS_W_08X_0_i_x_S_set, ARM_BS_W_08X_0_i_x_j2, 1, 1), ARM_BS_W_08X_0_i_x_j1, 2, 1), ARM_BS_W_08X_0_i_x_imm6, 3, 6), ARM_BS_W_08X_0_i_x_imm11, 9, 11), arm_bit32(0, 0), 20, 1))))), 31, 2), 0, 30, 2);
						else {
							if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
								if(0)
									ARM_NPC = arm_field32((((int32_t)((ARM_BS_W_08X_0___IADDR + 4))) + __ARM_EXTS32(11, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BS_W_08X_0_i_x_S_set, ARM_BS_W_08X_0_i_x_j2, 1, 1), ARM_BS_W_08X_0_i_x_j1, 2, 1), ARM_BS_W_08X_0_i_x_imm6, 3, 6), ARM_BS_W_08X_0_i_x_imm11, 9, 11), arm_bit32(0, 0), 20, 1))))), 31, 0);
								else {
									newaddress = ((uint32_t)((((int32_t)((ARM_BS_W_08X_0___IADDR + 4))) + __ARM_EXTS32(11, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BS_W_08X_0_i_x_S_set, ARM_BS_W_08X_0_i_x_j2, 1, 1), ARM_BS_W_08X_0_i_x_j1, 2, 1), ARM_BS_W_08X_0_i_x_imm6, 3, 6), ARM_BS_W_08X_0_i_x_imm11, 9, 11), arm_bit32(0, 0), 20, 1)))))));
									ARM_NPC = newaddress;
								}
							}
							else
								ARM_NPC = arm_concat32(arm_field32((((int32_t)((ARM_BS_W_08X_0___IADDR + 4))) + __ARM_EXTS32(11, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BS_W_08X_0_i_x_S_set, ARM_BS_W_08X_0_i_x_j2, 1, 1), ARM_BS_W_08X_0_i_x_j1, 2, 1), ARM_BS_W_08X_0_i_x_imm6, 3, 6), ARM_BS_W_08X_0_i_x_imm11, 9, 11), arm_bit32(0, 0), 20, 1))))), 31, 1), 0, 31, 1);
						}
					}
				}
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVTS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_MOVTS_S___ID_i_x_rd_r];
		TMP_UREG1 = arm_set_field32(TMP_UREG1, ((uint32_t)(arm_concat16(arm_concat8(arm_concat8(ARM_MOVTS_S___ID_i_x_imm4, ARM_MOVTS_S___ID_i_x_i, 4, 1), ARM_MOVTS_S___ID_i_x_imm3, 5, 3), ARM_MOVTS_S___ID_i_x_imm8, 8, 8))), 31, 16);
		if((ARM_MOVTS_S___ID_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG1;
		else
			ARM_GPR[ARM_MOVTS_S___ID_i_x_rd_r] = TMP_UREG1;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ORRS_W_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t imm32;
	uint32_t newaddress;
	uint32_t TMP_UREG2;
	uint32_t TMP_USHIFTED1;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_ORRS_W_S__S__SS_i_x_rm_r];
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_ORRS_W_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_ORRS_W_S__S__SS_i_x_imm3, ARM_ORRS_W_S__S__SS_i_x_imm2, 3, 2))), ((TMP_UREG1) &  ((1 << 8) - 1)), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		if((ARM_ORRS_W_S__S__SS_i_x_rn_r == 15)) {
			if((ARM_ORRS_W_S__S__SS_i_x_rd_r == 15)) {
				if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
					ARM_NPC = arm_concat32(arm_field32(TMP_UREG1, 31, 2), 0, 30, 2);
				else {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
						if(0)
							ARM_NPC = arm_field32(TMP_UREG1, 31, 0);
						else {
							newaddress = TMP_UREG1;
							ARM_NPC = newaddress;
						}
					}
					else
						ARM_NPC = arm_concat32(arm_field32(TMP_UREG1, 31, 1), 0, 31, 1);
				}
			}
			else
				TMP_UREG2 = TMP_USHIFTED1;
		}
		else {
			TMP_UREG1 = ARM_GPR[ARM_ORRS_W_S__S__SS_i_x_rn_r];
			TMP_UREG2 = (TMP_UREG1 | TMP_USHIFTED1);
		}
		if(!((ARM_ORRS_W_S__S__SS_i_x_rn_r == 15) && (ARM_ORRS_W_S__S__SS_i_x_rd_r != 15))) {
			if((ARM_ORRS_W_S__S__SS_i_x_rd_r == 15))
				ARM_NPC = TMP_UREG2;
			else
				ARM_GPR[ARM_ORRS_W_S__S__SS_i_x_rd_r] = TMP_UREG2;
			if((ARM_ORRS_W_S__S__SS_i_x_S_set == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_UREG2, 31), 31, 31);
				if((imm32 == 0))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVWS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((ARM_MOVWS_S___ID_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(arm_concat16(arm_concat8(arm_concat8(ARM_MOVWS_S___ID_i_x_imm4, ARM_MOVWS_S___ID_i_x_i, 4, 1), ARM_MOVWS_S___ID_i_x_imm3, 5, 3), ARM_MOVWS_S___ID_i_x_imm8, 8, 8)));
		else
			ARM_GPR[ARM_MOVWS_S___ID_i_x_rd_r] = ((uint32_t)(arm_concat16(arm_concat8(arm_concat8(ARM_MOVWS_S___ID_i_x_imm4, ARM_MOVWS_S___ID_i_x_i, 4, 1), ARM_MOVWS_S___ID_i_x_imm3, 5, 3), ARM_MOVWS_S___ID_i_x_imm8, 8, 8)));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ORRSS_W_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((ARM_ORRSS_W_S__S___IU_i_x_rn_r == 15)) {
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_20 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_21 = __gtmp_20;
			}
			else
				__gtmp_21 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			TMP_UREG2 = __gtmp_21;
		}
		else {
			TMP_UREG1 = ARM_GPR[ARM_ORRSS_W_S__S___IU_i_x_rn_r];
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_19 = __gtmp_18;
			}
			else
				__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			TMP_UREG2 = (TMP_UREG1 | __gtmp_19);
		}
		if((ARM_ORRSS_W_S__S___IU_i_x_rd_r == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_ORRSS_W_S__S___IU_i_x_rd_r] = TMP_UREG2;
		if((ARM_ORRSS_W_S__S___IU_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_UREG2, 31), 31, 31);
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_22 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_23 = __gtmp_22;
			}
			else
				__gtmp_23 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			if((__gtmp_23 == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			if((arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 0) == ((uint16_t)(0))))
				__gtmp_24 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_24 = arm_bit32((((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))) >> (((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ORRSS_W_S__S___IU_i_x_i, ARM_ORRSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ORRSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))) - 1)), 0);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_24, 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ASRSS_W_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ASRSS_W_S__S__S_i_x_rn_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ASRSS_W_S__S__S_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((2) &  ((1 << 8) - 1)), ((uint32_t)(TMP_REG2)), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		if((ARM_ASRSS_W_S__S__S_i_x_rd_r == 15))
			ARM_NPC = TMP_USHIFTED1;
		else
			ARM_GPR[ARM_ASRSS_W_S__S__S_i_x_rd_r] = TMP_USHIFTED1;
		if((ARM_ASRSS_W_S__S__S_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
			if((TMP_REG1 == ((int32_t)(0))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ANDSS_W_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ANDSS_W_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_ANDSS_W_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_ANDSS_W_S__S__SS_i_x_imm3, ARM_ANDSS_W_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		TMP_REG2 = ((int32_t)((ARM_GPR[ARM_ANDSS_W_S__S__SS_i_x_rn_r] & TMP_USHIFTED1)));
		if((ARM_ANDSS_W_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG2));
		else
			ARM_GPR[ARM_ANDSS_W_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_REG2));
		if((ARM_ANDSS_W_S__S__SS_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG2, 31), 31, 31);
			if((TMP_REG2 == ((int32_t)(0))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ANDSS_W_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
			switch(arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
			case 0:
				__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
				break;
			case 1:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			case 2:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
				break;
			case 3:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			}
			__gtmp_19 = __gtmp_18;
		}
		else
			__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
		TMP_REG1 = ((int32_t)((ARM_GPR[ARM_ANDSS_W_S__S___IU_i_x_rn_r] & __gtmp_19)));
		if((ARM_ANDSS_W_S__S___IU_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG1));
		else
			ARM_GPR[ARM_ANDSS_W_S__S___IU_i_x_rd_r] = ((uint32_t)(TMP_REG1));
		if((ARM_ANDSS_W_S__S___IU_i_x_S_set == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
			if((TMP_REG1 == ((int32_t)(0))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			if((arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 0) == ((uint16_t)(0))))
				__gtmp_20 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_20 = arm_bit32((((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))) >> (((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ANDSS_W_S__S___IU_i_x_i, ARM_ANDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ANDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))) - 1)), 0);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_20, 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDSS_W_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDSS_W_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_ADDSS_W_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_ADDSS_W_S__S__SS_i_x_imm3, ARM_ADDSS_W_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		if(((ARM_ADDSS_W_S__S__SS_i_x_rd_r == 15) && (ARM_ADDSS_W_S__S__SS_i_x_S_set == 1))) {
			TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDSS_W_S__S__SS_i_x_rn_r]));
			Temp = ((uint32_t)((TMP_REG1 + ((int32_t)(TMP_USHIFTED1)))));
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
			if((Temp == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)))
				__gtmp_25 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
					__gtmp_24 = 1;
				else {
					if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_24 = __gtmp_23;
				}
				__gtmp_25 = __gtmp_24;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_25)), 29, 29);
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_27 = 1;
			else {
				if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
					__gtmp_26 = 1;
				else
					__gtmp_26 = 0;
				__gtmp_27 = __gtmp_26;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_27)), 28, 28);
		}
		else {
			TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDSS_W_S__S__SS_i_x_rd_r]));
			TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDSS_W_S__S__SS_i_x_rn_r]));
			TMP_SWORD = (TMP_REG2 + ((int32_t)(TMP_USHIFTED1)));
			if((ARM_ADDSS_W_S__S__SS_i_x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_SWORD));
			else
				ARM_GPR[ARM_ADDSS_W_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
			TMP_REG1 = TMP_SWORD;
			if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADDSS_W_S__S__SS_i_x_rd_r == 15)))
				ARM_APSR = ARM_SPSR;
			else {
				if((((uint32_t)(ARM_SBIT)) == 1)) {
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
					if((TMP_REG1 == ((int32_t)(0))))
						ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
					else
						ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
					if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)))
						__gtmp_20 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
							__gtmp_19 = 1;
						else {
							if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
								__gtmp_18 = 1;
							else
								__gtmp_18 = 0;
							__gtmp_19 = __gtmp_18;
						}
						__gtmp_20 = __gtmp_19;
					}
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_22 = 1;
					else {
						if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
							__gtmp_21 = 1;
						else
							__gtmp_21 = 0;
						__gtmp_22 = __gtmp_21;
					}
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
				}
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDWS_S__S___ID__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_ADDWS_S__S___ID__i_x_rd_r];
		if((ARM_ADDWS_S__S___ID__i_x_rn_r == 15)) {
			if((ARM_ADDWS_S__S___ID__i_x_i == 1))
				TMP_UREG2 = ((ARM_GPR[15] & ~(4 - 1)) + ((uint32_t)(arm_concat16(arm_concat8(ARM_ADDWS_S__S___ID__i_x_i, ARM_ADDWS_S__S___ID__i_x_imm3, 1, 3), ARM_ADDWS_S__S___ID__i_x_imm8, 4, 8))));
			else
				TMP_UREG2 = ((ARM_GPR[15] & ~(4 - 1)) - ((uint32_t)(arm_concat16(arm_concat8(ARM_ADDWS_S__S___ID__i_x_i, ARM_ADDWS_S__S___ID__i_x_imm3, 1, 3), ARM_ADDWS_S__S___ID__i_x_imm8, 4, 8))));
			if((ARM_ADDWS_S__S___ID__i_x_rd_r == 15))
				ARM_NPC = TMP_UREG2;
			else
				ARM_GPR[ARM_ADDWS_S__S___ID__i_x_rd_r] = TMP_UREG2;
		}
		else {
			ARM_SBIT = ((uint8_t)(0));
			TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDWS_S__S___ID__i_x_rd_r]));
			TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDWS_S__S___ID__i_x_rn_r]));
			TMP_SWORD = (TMP_REG2 + ((int32_t)(((uint32_t)(arm_concat16(arm_concat8(ARM_ADDWS_S__S___ID__i_x_i, ARM_ADDWS_S__S___ID__i_x_imm3, 1, 3), ARM_ADDWS_S__S___ID__i_x_imm8, 4, 8))))));
			if((ARM_ADDWS_S__S___ID__i_x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_SWORD));
			else
				ARM_GPR[ARM_ADDWS_S__S___ID__i_x_rd_r] = ((uint32_t)(TMP_SWORD));
			TMP_REG1 = TMP_SWORD;
			if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADDWS_S__S___ID__i_x_rd_r == 15)))
				ARM_APSR = ARM_SPSR;
			else {
				if((((uint32_t)(ARM_SBIT)) == 1)) {
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
					if((TMP_REG1 == ((int32_t)(0))))
						ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
					else
						ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
					if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(((uint32_t)(arm_concat16(arm_concat8(ARM_ADDWS_S__S___ID__i_x_i, ARM_ADDWS_S__S___ID__i_x_imm3, 1, 3), ARM_ADDWS_S__S___ID__i_x_imm8, 4, 8))), 31))) == 1)))
						__gtmp_20 = 1;
					else {
						if(((((uint32_t)(arm_bit32(((uint32_t)(arm_concat16(arm_concat8(ARM_ADDWS_S__S___ID__i_x_i, ARM_ADDWS_S__S___ID__i_x_imm3, 1, 3), ARM_ADDWS_S__S___ID__i_x_imm8, 4, 8))), 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
							__gtmp_19 = 1;
						else {
							if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
								__gtmp_18 = 1;
							else
								__gtmp_18 = 0;
							__gtmp_19 = __gtmp_18;
						}
						__gtmp_20 = __gtmp_19;
					}
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(((uint32_t)(arm_concat16(arm_concat8(ARM_ADDWS_S__S___ID__i_x_i, ARM_ADDWS_S__S___ID__i_x_imm3, 1, 3), ARM_ADDWS_S__S___ID__i_x_imm8, 4, 8))), 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_22 = 1;
					else {
						if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(((uint32_t)(arm_concat16(arm_concat8(ARM_ADDWS_S__S___ID__i_x_i, ARM_ADDWS_S__S___ID__i_x_imm3, 1, 3), ARM_ADDWS_S__S___ID__i_x_imm8, 4, 8))), 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
							__gtmp_21 = 1;
						else
							__gtmp_21 = 0;
						__gtmp_22 = __gtmp_21;
					}
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
				}
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDSS_W_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_47;
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if(((ARM_ADDSS_W_S__S___IU_i_x_rd_r == 15) && (ARM_ADDSS_W_S__S___IU_i_x_S_set == 1))) {
			TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDSS_W_S__S___IU_i_x_rn_r]));
			if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_33 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_33 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_33 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_33 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_34 = __gtmp_33;
			}
			else
				__gtmp_34 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			Temp = ((uint32_t)((TMP_REG1 + ((int32_t)(__gtmp_34)))));
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
			if((Temp == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_35 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_35 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_35 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_35 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_36 = __gtmp_35;
			}
			else
				__gtmp_36 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_36, 31))) == 1)))
				__gtmp_41 = 1;
			else {
				if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_37 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_37 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_37 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_37 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_38 = __gtmp_37;
				}
				else
					__gtmp_38 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
				if(((((uint32_t)(arm_bit32(__gtmp_38, 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
					__gtmp_40 = 1;
				else {
					if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_39 = 1;
					else
						__gtmp_39 = 0;
					__gtmp_40 = __gtmp_39;
				}
				__gtmp_41 = __gtmp_40;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_41)), 29, 29);
			if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_42 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_42 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_42 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_42 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_43 = __gtmp_42;
			}
			else
				__gtmp_43 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_43, 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_47 = 1;
			else {
				if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_44 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_44 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_44 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_44 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_45 = __gtmp_44;
				}
				else
					__gtmp_45 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
				if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_45, 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
					__gtmp_46 = 1;
				else
					__gtmp_46 = 0;
				__gtmp_47 = __gtmp_46;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_47)), 28, 28);
		}
		else {
			ARM_SBIT = ARM_ADDSS_W_S__S___IU_i_x_S_set;
			TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDSS_W_S__S___IU_i_x_rd_r]));
			TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDSS_W_S__S___IU_i_x_rn_r]));
			if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_19 = __gtmp_18;
			}
			else
				__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
			TMP_SWORD = (TMP_REG2 + ((int32_t)(__gtmp_19)));
			if((ARM_ADDSS_W_S__S___IU_i_x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_SWORD));
			else
				ARM_GPR[ARM_ADDSS_W_S__S___IU_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
			TMP_REG1 = TMP_SWORD;
			if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADDSS_W_S__S___IU_i_x_rd_r == 15)))
				ARM_APSR = ARM_SPSR;
			else {
				if((((uint32_t)(ARM_SBIT)) == 1)) {
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
					if((TMP_REG1 == ((int32_t)(0))))
						ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
					else
						ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
					if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
						switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
						case 0:
							__gtmp_20 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
							break;
						case 1:
							__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						case 2:
							__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
							break;
						case 3:
							__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						}
						__gtmp_21 = __gtmp_20;
					}
					else
						__gtmp_21 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
					if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_21, 31))) == 1)))
						__gtmp_26 = 1;
					else {
						if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
							switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
							case 0:
								__gtmp_22 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
								break;
							case 1:
								__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
								break;
							case 2:
								__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
								break;
							case 3:
								__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
								break;
							}
							__gtmp_23 = __gtmp_22;
						}
						else
							__gtmp_23 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
						if(((((uint32_t)(arm_bit32(__gtmp_23, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
							__gtmp_25 = 1;
						else {
							if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
								__gtmp_24 = 1;
							else
								__gtmp_24 = 0;
							__gtmp_25 = __gtmp_24;
						}
						__gtmp_26 = __gtmp_25;
					}
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
					if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
						switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
						case 0:
							__gtmp_27 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
							break;
						case 1:
							__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						case 2:
							__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
							break;
						case 3:
							__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						}
						__gtmp_28 = __gtmp_27;
					}
					else
						__gtmp_28 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_28, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_32 = 1;
					else {
						if((arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
							switch(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
							case 0:
								__gtmp_29 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
								break;
							case 1:
								__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
								break;
							case 2:
								__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
								break;
							case 3:
								__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
								break;
							}
							__gtmp_30 = __gtmp_29;
						}
						else
							__gtmp_30 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADDSS_W_S__S___IU_i_x_i, ARM_ADDSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADDSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
						if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_30, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
							__gtmp_31 = 1;
						else
							__gtmp_31 = 0;
						__gtmp_32 = __gtmp_31;
					}
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_32)), 28, 28);
				}
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADCSS_W_S__S__SS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	uint32_t TMP_USHIFTED1;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADCSS_W_S__S__SS_i_x_rm_r]));
		TMP_USHIFTED1 = Decode_and_Shift(((uint8_t)(ARM_ADCSS_W_S__S__SS_i_x_t)), ((uint32_t)(arm_concat8(ARM_ADCSS_W_S__S__SS_i_x_imm3, ARM_ADCSS_W_S__S__SS_i_x_imm2, 3, 2))), ((uint8_t)(((TMP_REG1) &  ((1 << 8) - 1)))), ((uint8_t)(arm_bit32(ARM_APSR, 29))));
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(f_get_C())), 29, 29);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADCSS_W_S__S__SS_i_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADCSS_W_S__S__SS_i_x_rn_r]));
		TMP_SWORD = ((TMP_REG2 + ((int32_t)(TMP_USHIFTED1))) + __ARM_EXTS8(31, ((int32_t)(arm_bit32(ARM_APSR, 29)))));
		if((ARM_ADCSS_W_S__S__SS_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ADCSS_W_S__S__SS_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADCSS_W_S__S__SS_i_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)))
					__gtmp_20 = 1;
				else {
					if(((((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_19 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_18 = 1;
						else
							__gtmp_18 = 0;
						__gtmp_19 = __gtmp_18;
					}
					__gtmp_20 = __gtmp_19;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_22 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_USHIFTED1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_22 = __gtmp_21;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADCSS_W_S__S___IU_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADCSS_W_S__S___IU_i_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADCSS_W_S__S___IU_i_x_rn_r]));
		if((arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
			switch(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
			case 0:
				__gtmp_18 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
				break;
			case 1:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			case 2:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
				break;
			case 3:
				__gtmp_18 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
				break;
			}
			__gtmp_19 = __gtmp_18;
		}
		else
			__gtmp_19 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
		TMP_SWORD = ((TMP_REG2 + ((int32_t)(__gtmp_19))) + __ARM_EXTS8(31, ((int32_t)(arm_bit32(ARM_APSR, 29)))));
		if((ARM_ADCSS_W_S__S___IU_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ADCSS_W_S__S___IU_i_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADCSS_W_S__S___IU_i_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if((arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_20 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_20 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_21 = __gtmp_20;
				}
				else
					__gtmp_21 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_21, 31))) == 1)))
					__gtmp_26 = 1;
				else {
					if((arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
						switch(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
						case 0:
							__gtmp_22 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
							break;
						case 1:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						case 2:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
							break;
						case 3:
							__gtmp_22 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						}
						__gtmp_23 = __gtmp_22;
					}
					else
						__gtmp_23 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
					if(((((uint32_t)(arm_bit32(__gtmp_23, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_25 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_24 = 1;
						else
							__gtmp_24 = 0;
						__gtmp_25 = __gtmp_24;
					}
					__gtmp_26 = __gtmp_25;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
				if((arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_27 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_27 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_28 = __gtmp_27;
				}
				else
					__gtmp_28 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_28, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_32 = 1;
				else {
					if((arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 10) == 0)) {
						switch(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 9, 8)) {
						case 0:
							__gtmp_29 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0)));
							break;
						case 1:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						case 2:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
							break;
						case 3:
							__gtmp_29 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 7, 0), 24, 8);
							break;
						}
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = f_ROR(((int32_t)(((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 6, 0), 1, 7))))), ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_ADCSS_W_S__S___IU_i_x_i, ARM_ADCSS_W_S__S___IU_i_x_imm3, 1, 3), ARM_ADCSS_W_S__S___IU_i_x_imm8, 4, 8), 11, 7))));
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_30, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_32 = __gtmp_31;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_32)), 28, 28);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PLIS__LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((((uint32_t)(ARM_PLIS__LT_S__S_RT__i_x_imm2)) == 0))
				offset = ((int32_t)(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r] << ARM_PLIS__LT_S__S_RT__i_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r], (32 - ((uint32_t)(ARM_PLIS__LT_S__S_RT__i_x_imm2))), (32 - ((uint32_t)(ARM_PLIS__LT_S__S_RT__i_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r] >> ARM_PLIS__LT_S__S_RT__i_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r], (((uint32_t)(ARM_PLIS__LT_S__S_RT__i_x_imm2)) - 1), (((uint32_t)(ARM_PLIS__LT_S__S_RT__i_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r])) >> ARM_PLIS__LT_S__S_RT__i_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r], (((uint32_t)(ARM_PLIS__LT_S__S_RT__i_x_imm2)) - 1), (((uint32_t)(ARM_PLIS__LT_S__S_RT__i_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r], ARM_PLIS__LT_S__S_RT__i_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rm_r], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rn_r])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_PLIS__LT_S__S_RT__i_x_Rn_r])) - offset);
			address = ((uint32_t)(__gtmp_36));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PLIS__LT_PC_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	uint32_t base;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((15 == 15))
				__gtmp_36 = (ARM_GPR[15] & ~(4 - 1));
			else
				__gtmp_36 = ARM_GPR[15];
			base = __gtmp_36;
			if(ARM_PLIS__LT_PC_RT__i_x_x_U)
				__gtmp_37 = (base + ((uint32_t)(ARM_PLIS__LT_PC_RT__i_x_x_imm12)));
			else
				__gtmp_37 = (base - ((uint32_t)(ARM_PLIS__LT_PC_RT__i_x_x_imm12)));
			address = __gtmp_37;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PLIS__LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	uint32_t base;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_PLIS__LT_S_RT__i_x_x_Rn_r == 15))
				__gtmp_36 = (ARM_GPR[15] & ~(4 - 1));
			else
				__gtmp_36 = ARM_GPR[ARM_PLIS__LT_S_RT__i_x_x_Rn_r];
			base = __gtmp_36;
			if(0)
				__gtmp_37 = (base + ((uint32_t)(ARM_PLIS__LT_S_RT__i_x_x_imm8)));
			else
				__gtmp_37 = (base - ((uint32_t)(ARM_PLIS__LT_S_RT__i_x_x_imm8)));
			address = __gtmp_37;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PLIS__LT_S_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	uint32_t base;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_PLIS__LT_S_RT__0_i_x_x_Rn_r == 15))
				__gtmp_36 = (ARM_GPR[15] & ~(4 - 1));
			else
				__gtmp_36 = ARM_GPR[ARM_PLIS__LT_S_RT__0_i_x_x_Rn_r];
			base = __gtmp_36;
			if(1)
				__gtmp_37 = (base + ((uint32_t)(ARM_PLIS__LT_S_RT__0_i_x_x_imm12)));
			else
				__gtmp_37 = (base - ((uint32_t)(ARM_PLIS__LT_S_RT__0_i_x_x_imm12)));
			address = __gtmp_37;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PLDSS__LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((((uint32_t)(ARM_PLDSS__LT_S__S_RT__i_x_imm2)) == 0))
				offset = ((int32_t)(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r] << ARM_PLDSS__LT_S__S_RT__i_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r], (32 - ((uint32_t)(ARM_PLDSS__LT_S__S_RT__i_x_imm2))), (32 - ((uint32_t)(ARM_PLDSS__LT_S__S_RT__i_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r] >> ARM_PLDSS__LT_S__S_RT__i_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r], (((uint32_t)(ARM_PLDSS__LT_S__S_RT__i_x_imm2)) - 1), (((uint32_t)(ARM_PLDSS__LT_S__S_RT__i_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r])) >> ARM_PLDSS__LT_S__S_RT__i_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r], (((uint32_t)(ARM_PLDSS__LT_S__S_RT__i_x_imm2)) - 1), (((uint32_t)(ARM_PLDSS__LT_S__S_RT__i_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r], ARM_PLDSS__LT_S__S_RT__i_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rm_r], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rn_r])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_PLDSS__LT_S__S_RT__i_x_Rn_r])) - offset);
			address = ((uint32_t)(__gtmp_36));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PLDSS__LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0)
				__gtmp_36 = (ARM_GPR[ARM_PLDSS__LT_S_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_PLDSS__LT_S_RT__i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_PLDSS__LT_S_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_PLDSS__LT_S_RT__i_x_x_imm8)));
			address = __gtmp_36;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PLDSS__LT_S_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_PLDSS__LT_S_RT__0_i_x_x_Rn_r] + ((uint32_t)(ARM_PLDSS__LT_S_RT__0_i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_PLDSS__LT_S_RT__0_i_x_x_Rn_r] - ((uint32_t)(ARM_PLDSS__LT_S_RT__0_i_x_x_imm12)));
			address = __gtmp_36;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSBSS_W_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_52;
	uint8_t __gtmp_51;
	uint32_t __gtmp_50;
	uint32_t __gtmp_49;
	uint32_t __gtmp_48;
	uint32_t __gtmp_47;
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	uint8_t overflow;
	uint8_t carry;
	uint32_t result;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_36 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_36 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_36 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_36 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_37 = __gtmp_36;
			}
			else
				__gtmp_37 = arm_rotate_right32(32, ((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 6, 0), 1, 7))), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 7));
			result = ((~ARM_GPR[((uint32_t)(ARM_RSBSS_W_S__S___ID_i_x_Rn_r))] + __gtmp_37) + ((uint32_t)(1)));
			if((arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_38 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_38 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_38 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_38 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_39 = __gtmp_38;
			}
			else
				__gtmp_39 = arm_rotate_right32(32, ((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 6, 0), 1, 7))), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 7));
			if(((((uint32_t)(arm_bit32(~ARM_GPR[((uint32_t)(ARM_RSBSS_W_S__S___ID_i_x_Rn_r))], 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_39, 31))) == 1)))
				__gtmp_44 = 1;
			else {
				if((arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_40 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_40 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_40 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_40 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_41 = __gtmp_40;
				}
				else
					__gtmp_41 = arm_rotate_right32(32, ((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 6, 0), 1, 7))), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 7));
				if(((((uint32_t)(arm_bit32(__gtmp_41, 31))) == 1) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
					__gtmp_43 = 1;
				else {
					if(((((uint32_t)(arm_bit32(result, 31))) == 0) && (((uint32_t)(arm_bit32(~ARM_GPR[((uint32_t)(ARM_RSBSS_W_S__S___ID_i_x_Rn_r))], 31))) == 1)))
						__gtmp_42 = 1;
					else
						__gtmp_42 = 0;
					__gtmp_43 = __gtmp_42;
				}
				__gtmp_44 = __gtmp_43;
			}
			carry = (0 != (__gtmp_44));
			if((arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 10) == 0)) {
				switch(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 9, 8)) {
				case 0:
					__gtmp_45 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0)));
					break;
				case 1:
					__gtmp_45 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				case 2:
					__gtmp_45 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
					break;
				case 3:
					__gtmp_45 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
					break;
				}
				__gtmp_46 = __gtmp_45;
			}
			else
				__gtmp_46 = arm_rotate_right32(32, ((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 6, 0), 1, 7))), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 7));
			if((((((uint32_t)(arm_bit32(~ARM_GPR[((uint32_t)(ARM_RSBSS_W_S__S___ID_i_x_Rn_r))], 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_46, 31))) == 1)) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
				__gtmp_50 = 1;
			else {
				if((arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 10) == 0)) {
					switch(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 9, 8)) {
					case 0:
						__gtmp_47 = ((uint32_t)(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0)));
						break;
					case 1:
						__gtmp_47 = arm_concat32(arm_concat32(arm_concat16(0, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), 0, 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					case 2:
						__gtmp_47 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 0, 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), 0, 24, 8);
						break;
					case 3:
						__gtmp_47 = arm_concat32(arm_concat32(arm_concat16(arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 8, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 16, 8), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 7, 0), 24, 8);
						break;
					}
					__gtmp_48 = __gtmp_47;
				}
				else
					__gtmp_48 = arm_rotate_right32(32, ((uint32_t)(arm_concat8(1, arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 6, 0), 1, 7))), arm_field16(arm_concat16(arm_concat8(ARM_RSBSS_W_S__S___ID_i_x_i, ARM_RSBSS_W_S__S___ID_i_x_imm3, 1, 3), ARM_RSBSS_W_S__S___ID_i_x_imm8, 4, 8), 11, 7));
				if((((((uint32_t)(arm_bit32(~ARM_GPR[((uint32_t)(ARM_RSBSS_W_S__S___ID_i_x_Rn_r))], 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_48, 31))) == 0)) && (((uint32_t)(arm_bit32(result, 31))) == 1)))
					__gtmp_49 = 1;
				else
					__gtmp_49 = 0;
				__gtmp_50 = __gtmp_49;
			}
			overflow = (0 != (__gtmp_50));
			if((((uint32_t)(ARM_RSBSS_W_S__S___ID_i_x_Rd_r)) == 15)) {
				if(((7 >= 7) && (arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))) {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 3)) {
						if((((uint32_t)(arm_bit32(result, 0))) == 1))
							ARM_NPC = arm_concat32(arm_field32(result, 31, 1), 0, 31, 1);
					}
					else {
						if((((uint32_t)(arm_bit32(result, 0))) == 1)) {
							__gtmp_52 = 1;
							ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_52 >> 1), 24, 24);
							ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_52, 5, 5);
							ARM_NPC = arm_concat32(arm_field32(result, 31, 1), 0, 31, 1);
						}
						else {
							if((((uint32_t)(arm_bit32(result, 1))) == 0)) {
								__gtmp_51 = 0;
								ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_51 >> 1), 24, 24);
								ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_51, 5, 5);
								ARM_NPC = result;
							}
						}
					}
				}
				else {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
						ARM_NPC = arm_concat32(arm_field32(result, 31, 2), 0, 30, 2);
					else {
						if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
							if(0)
								ARM_NPC = arm_field32(result, 31, 0);
							else {
								newaddress = result;
								ARM_NPC = newaddress;
							}
						}
						else
							ARM_NPC = arm_concat32(arm_field32(result, 31, 1), 0, 31, 1);
					}
				}
			}
			else {
				ARM_GPR[((uint32_t)(ARM_RSBSS_W_S__S___ID_i_x_Rd_r))] = result;
				if(ARM_RSBSS_W_S__S___ID_i_x_S_set) {
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(result, 31), 31, 31);
					ARM_APSR = arm_set_field32(ARM_APSR, (result == 0), 30, 30);
					ARM_APSR = arm_set_field32(ARM_APSR, carry, 29, 29);
					ARM_APSR = arm_set_field32(ARM_APSR, overflow, 28, 28);
				}
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LSLSS_W_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t carry;
	uint32_t result;
	uint8_t setflags;
	uint8_t m;
	uint8_t n;
	uint8_t d;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		d = ((uint8_t)(((uint32_t)(ARM_LSLSS_W_S__S__S_i_x_rd_r))));
		n = ((uint8_t)(((uint32_t)(ARM_LSLSS_W_S__S__S_i_x_rn_r))));
		m = ((uint8_t)(((uint32_t)(ARM_LSLSS_W_S__S__S_i_x_rm_r))));
		setflags = ARM_LSLSS_W_S__S__S_i_x_S_set;
		if((((uint32_t)(m)) == 0))
			result = ARM_GPR[n];
		else {
			switch(0) {
			case 0:
				result = (ARM_GPR[n] << m);
				carry = (0 != (arm_field32_generic(ARM_GPR[n], (32 - ((uint32_t)(m))), (32 - ((uint32_t)(m))), 1 )));
				break;
			case 1:
				result = (ARM_GPR[n] >> m);
				carry = (0 != (arm_field32_generic(ARM_GPR[n], (((uint32_t)(m)) - 1), (((uint32_t)(m)) - 1), 1 )));
				break;
			case 2:
				result = (((int32_t)(ARM_GPR[n])) >> m);
				carry = (0 != (arm_field32_generic(ARM_GPR[n], (((uint32_t)(m)) - 1), (((uint32_t)(m)) - 1), 1 )));
				break;
			case 3:
				result = arm_rotate_right32(32, ARM_GPR[n], m);
				carry = arm_bit32(result, 31);
				break;
			case 4:
				result = arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[n], 31, 1), 1, 31);
				carry = arm_bit32(ARM_GPR[n], 0);
				break;
			}
		}
		ARM_GPR[d] = result;
		if(setflags) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(result, 31), 31, 31);
			ARM_APSR = arm_set_field32(ARM_APSR, (result == 0), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, carry, 29, 29);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRDS_S__S___LT_SS_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit32(ARM_LDRDS_S__S___LT_SS_i_x_x_P_U_1_W, 2))
				__gtmp_36 = (ARM_GPR[((uint32_t)(ARM_LDRDS_S__S___LT_SS_i_x_x_Rn_r))] + ((uint32_t)(arm_concat16(ARM_LDRDS_S__S___LT_SS_i_x_x_imm8, 0, 8, 2))));
			else
				__gtmp_36 = (ARM_GPR[((uint32_t)(ARM_LDRDS_S__S___LT_SS_i_x_x_Rn_r))] - ((uint32_t)(arm_concat16(ARM_LDRDS_S__S___LT_SS_i_x_x_imm8, 0, 8, 2))));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit32(ARM_LDRDS_S__S___LT_SS_i_x_x_P_U_1_W, 3))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRDS_S__S___LT_SS_i_x_x_Rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			ARM_GPR[((uint32_t)(ARM_LDRDS_S__S___LT_SS_i_x_x_Rt_r))] = arm_mem_read32(ARM_M, address);
			ARM_GPR[((uint32_t)(ARM_LDRDS_S__S___LT_SS_i_x_x_Rt2_r))] = arm_mem_read32(ARM_M, (address + 4));
			if(arm_bit32(ARM_LDRDS_S__S___LT_SS_i_x_x_P_U_1_W, 0))
				ARM_GPR[((uint32_t)(ARM_LDRDS_S__S___LT_SS_i_x_x_Rn_r))] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRDS_S__S___LT_SS_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit32(ARM_STRDS_S__S___LT_SS_i_x_x_P_U_1_W, 2))
				__gtmp_36 = (ARM_GPR[((uint32_t)(ARM_STRDS_S__S___LT_SS_i_x_x_Rn_r))] + ((uint32_t)(arm_concat16(ARM_STRDS_S__S___LT_SS_i_x_x_imm8, 0, 8, 2))));
			else
				__gtmp_36 = (ARM_GPR[((uint32_t)(ARM_STRDS_S__S___LT_SS_i_x_x_Rn_r))] - ((uint32_t)(arm_concat16(ARM_STRDS_S__S___LT_SS_i_x_x_imm8, 0, 8, 2))));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit32(ARM_STRDS_S__S___LT_SS_i_x_x_P_U_1_W, 3))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_STRDS_S__S___LT_SS_i_x_x_Rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			arm_mem_write32(ARM_M, address, ARM_GPR[((uint32_t)(ARM_STRDS_S__S___LT_SS_i_x_x_Rt_r))]);
			arm_mem_write32(ARM_M, (address + 4), ARM_GPR[((uint32_t)(ARM_STRDS_S__S___LT_SS_i_x_x_Rt2_r))]);
			if(arm_bit32(ARM_STRDS_S__S___LT_SS_i_x_x_P_U_1_W, 0))
				ARM_GPR[((uint32_t)(ARM_STRDS_S__S___LT_SS_i_x_x_Rn_r))] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STREXHS_S__S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			address = ARM_GPR[((uint32_t)(ARM_STREXHS_S__S___LT_S_RT__i_x_Rn_r))];
			arm_mem_write16(ARM_M, address, arm_field32(ARM_GPR[((uint32_t)(ARM_STREXHS_S__S___LT_S_RT__i_x_Rt_r))], 15, 0));
			ARM_GPR[((uint32_t)(ARM_STREXHS_S__S___LT_S_RT__i_x_Rd_r))] = ((uint32_t)(0));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STREXBS_S__S__S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint64_t TMP_DOUBLE;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			address = ARM_GPR[((uint32_t)(ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rn_r))];
			TMP_DOUBLE = arm_concat64(ARM_GPR[((uint32_t)(ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rt_r))], ARM_GPR[((uint32_t)(ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rt2_r))], 32, 32);
			arm_mem_write64(ARM_M, address, TMP_DOUBLE);
			ARM_GPR[((uint32_t)(ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rd_r))] = ((uint32_t)(0));
		}
		else
			ARM_GPR[((uint32_t)(ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rd_r))] = ((uint32_t)(1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STREXBS_S__S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			address = ARM_GPR[((uint32_t)(ARM_STREXBS_S__S___LT_S_RT__i_x_Rn_r))];
			arm_mem_write8(ARM_M, address, arm_field32(ARM_GPR[((uint32_t)(ARM_STREXBS_S__S___LT_S_RT__i_x_Rt_r))], 7, 0));
			ARM_GPR[((uint32_t)(ARM_STREXBS_S__S___LT_S_RT__i_x_Rd_r))] = ((uint32_t)(0));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STREXS_S__S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			address = (ARM_GPR[((uint32_t)(ARM_STREXS_S__S___LT_S_RT__i_x_Rn_r))] + ((uint32_t)(arm_concat16(ARM_STREXS_S__S___LT_S_RT__i_x_imm8, 0, 8, 2))));
			arm_mem_write32(ARM_M, address, ARM_GPR[((uint32_t)(ARM_STREXS_S__S___LT_S_RT__i_x_Rt_r))]);
			ARM_GPR[((uint32_t)(ARM_STREXS_S__S___LT_S_RT__i_x_Rd_r))] = ((uint32_t)(0));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDREXHS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			address = ARM_GPR[((uint32_t)(ARM_LDREXHS_S___LT_S_RT__i_x_Rn_r))];
			ARM_GPR[((uint32_t)(ARM_LDREXHS_S___LT_S_RT__i_x_Rt_r))] = ((uint32_t)(arm_mem_read16(ARM_M, address)));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDREXBS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			address = ARM_GPR[((uint32_t)(ARM_LDREXBS_S___LT_S_RT__i_x_Rn_r))];
			ARM_GPR[((uint32_t)(ARM_LDREXBS_S___LT_S_RT__i_x_Rt_r))] = arm_mem_read32(ARM_M, address);
			ARM_GPR[((uint32_t)(ARM_LDREXBS_S___LT_S_RT__i_x_Rt2_r))] = arm_mem_read32(ARM_M, (address + 4));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDREXBS_S___LT_S_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	uint32_t imm32;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			address = (ARM_GPR[((uint32_t)(ARM_LDREXBS_S___LT_S_RT__0_i_x_Rn_r))] + imm32);
			ARM_GPR[((uint32_t)(ARM_LDREXBS_S___LT_S_RT__0_i_x_Rt_r))] = arm_mem_read32(ARM_M, address);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDREXS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			address = ARM_GPR[((uint32_t)(ARM_LDREXS_S___LT_S_RT__i_x_Rn_r))];
			ARM_GPR[((uint32_t)(ARM_LDREXS_S___LT_S_RT__i_x_Rt_r))] = ((uint32_t)(arm_mem_read8(ARM_M, address)));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	uint32_t i;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		i = 14;
		address = ARM_GPR[((uint32_t)(ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r))];
gliss_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__0_:
		if((((uint32_t)(arm_field16_generic(arm_concat16(arm_concat8(arm_concat8(0, ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__M, 1, 1), 0, 2, 1), ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l, 3, 13), i, i, 1 ))) == 1)) {
			address = (address - 4);
			arm_mem_write32(ARM_M, address, ARM_GPR[i]);
		}
		i = (i - 1);
		if((i >= 0)) {
goto gliss_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__0_;
		}
		if(ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_W)
			ARM_GPR[((uint32_t)(ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r))] = address;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSHS_S___LT_S_RT____IS0XX_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data16;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 1))
				__gtmp_36 = (ARM_GPR[ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] + ((uint32_t)(ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] - ((uint32_t)(ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 2))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data16 = arm_mem_read16(ARM_M, address);
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 0))
				ARM_GPR[ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			ARM_GPR[arm_field32(ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4)] = ((uint32_t)(((int32_t)(data16))));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSHS_S___LT_S___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data16;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_imm12)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data16 = arm_mem_read16(ARM_M, address);
			if(0)
				ARM_GPR[ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			ARM_GPR[ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_Rt_r] = ((uint32_t)(((int32_t)(data16))));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSBS_S___LT_PC_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	uint32_t base;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			base = (ARM_GPR[15] & ~(4 - 1));
			if(ARM_LDRSBS_S___LT_PC_RT__i_x_U)
				__gtmp_36 = (base + ((uint32_t)(ARM_LDRSBS_S___LT_PC_RT__i_x_imm12)));
			else
				__gtmp_36 = (base - ((uint32_t)(ARM_LDRSBS_S___LT_PC_RT__i_x_imm12)));
			address = __gtmp_36;
			ARM_GPR[ARM_LDRSBS_S___LT_PC_RT__i_x_Rt_r] = ((uint32_t)(((int32_t)(arm_mem_read8(ARM_M, address)))));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSBS_S___LT_S_RT____IS0XX_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 1))
				__gtmp_36 = (ARM_GPR[ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] + ((uint32_t)(ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] - ((uint32_t)(ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 2))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			ARM_GPR[arm_field32(ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4)] = ((uint32_t)(((int32_t)(arm_mem_read8(ARM_M, address)))));
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 0))
				ARM_GPR[ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSBS_S___LT_S___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_imm12)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			ARM_GPR[ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_Rt_r] = ((uint32_t)(((int32_t)(arm_mem_read8(ARM_M, address)))));
			if(0)
				ARM_GPR[ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRBS_S___LT_S_RT____IS0XX_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t data8;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 1))
				__gtmp_36 = (ARM_GPR[ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] + ((uint32_t)(ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] - ((uint32_t)(ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 2))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data8 = arm_mem_read8(ARM_M, address);
			ARM_GPR[arm_field32(ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4)] = ((uint32_t)(data8));
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 2, 0), 0))
				ARM_GPR[ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRBS_W_S___LT_S___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t data8;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_imm12)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data8 = arm_mem_read8(ARM_M, address);
			ARM_GPR[ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r] = ((uint32_t)(data8));
			if(0)
				ARM_GPR[ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRBS_S___LT_SS_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit32(ARM_STRBS_S___LT_SS_i_x_x_P_U_W, 1))
				__gtmp_36 = (ARM_GPR[ARM_STRBS_S___LT_SS_i_x_x_Rn_r] + ((uint32_t)(ARM_STRBS_S___LT_SS_i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_STRBS_S___LT_SS_i_x_x_Rn_r] - ((uint32_t)(ARM_STRBS_S___LT_SS_i_x_x_imm8)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit32(ARM_STRBS_S___LT_SS_i_x_x_P_U_W, 2))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_STRBS_S___LT_SS_i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			arm_mem_write8(ARM_M, address, arm_field32_inverted(ARM_GPR[ARM_STRBS_S___LT_SS_i_x_x_Rt_r], 7, 0));
			if(arm_bit32(ARM_STRBS_S___LT_SS_i_x_x_P_U_W, 0))
				ARM_GPR[ARM_STRBS_S___LT_SS_i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRBS_W_S___LT_S___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_imm12)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			arm_mem_write8(ARM_M, address, arm_field32_inverted(ARM_GPR[ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r], 7, 0));
			if(0)
				ARM_GPR[ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRS_S___LT_S_RT____IS0XX_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t data32;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit32(ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 1))
				__gtmp_36 = (ARM_GPR[ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] + ((uint32_t)(ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] - ((uint32_t)(ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit32(ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 2))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data32 = ARM_GPR[ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_Rt_r];
			arm_mem_write32(ARM_M, address, data32);
			if(arm_bit32(ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 0))
				ARM_GPR[ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRS_W_S___LT_S___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t data32;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_imm12)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data32 = ARM_GPR[ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r];
			arm_mem_write32(ARM_M, address, data32);
			if(0)
				ARM_GPR[ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	uint32_t bitcount;
	uint32_t i;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		address = ARM_GPR[((uint32_t)(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r))];
		i = 0;
		bitcount = 0;
gliss_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__0_:
		if((((uint32_t)(arm_field16_generic(arm_concat16(arm_concat8(arm_concat8(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__P, ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__M, 1, 1), 0, 2, 1), ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l, 3, 13), i, i, 1 ))) == 1)) {
			ARM_GPR[i] = arm_mem_read32(ARM_M, address);
			address = (address + 4);
			bitcount = (bitcount + 1);
		}
		i = (i + 1);
		if((i <= 14)) {
goto gliss_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__0_;
		}
		if((((uint32_t)(arm_bit16(arm_concat16(arm_concat8(arm_concat8(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__P, ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__M, 1, 1), 0, 2, 1), ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l, 3, 13), 15))) == 1)) {
			if((7 >= 5)) {
				if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 3)) {
					if((((uint32_t)(arm_bit32(arm_mem_read32(ARM_M, address), 0))) == 1))
						ARM_NPC = arm_concat32(arm_field32(arm_mem_read32(ARM_M, address), 31, 1), 0, 31, 1);
				}
				else {
					if((((uint32_t)(arm_bit32(arm_mem_read32(ARM_M, address), 0))) == 1)) {
						__gtmp_19 = 1;
						ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_19 >> 1), 24, 24);
						ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_19, 5, 5);
						ARM_NPC = arm_concat32(arm_field32(arm_mem_read32(ARM_M, address), 31, 1), 0, 31, 1);
					}
					else {
						if((((uint32_t)(arm_bit32(arm_mem_read32(ARM_M, address), 1))) == 0)) {
							__gtmp_18 = 0;
							ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_18 >> 1), 24, 24);
							ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_18, 5, 5);
							ARM_NPC = arm_mem_read32(ARM_M, address);
						}
					}
				}
			}
			else {
				if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
					ARM_NPC = arm_concat32(arm_field32(arm_mem_read32(ARM_M, address), 31, 2), 0, 30, 2);
				else {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
						if(0)
							ARM_NPC = arm_field32(arm_mem_read32(ARM_M, address), 31, 0);
						else {
							newaddress = arm_mem_read32(ARM_M, address);
							ARM_NPC = newaddress;
						}
					}
					else
						ARM_NPC = arm_concat32(arm_field32(arm_mem_read32(ARM_M, address), 31, 1), 0, 31, 1);
				}
			}
			bitcount = (bitcount + 1);
		}
		if((((uint32_t)(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_W)) == 1))
			ARM_GPR[((uint32_t)(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r))] = (ARM_GPR[((uint32_t)(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r))] + (4 * bitcount));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRHS_S___LT_S_RT____IS0XX_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit32(ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 1))
				__gtmp_36 = (ARM_GPR[ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] + ((uint32_t)(ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] - ((uint32_t)(ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit32(ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 2))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			arm_mem_write16(ARM_M, address, arm_field32(ARM_GPR[ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_Rt_r], 15, 0));
			if(arm_bit32(ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 0))
				ARM_GPR[ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRHS_W_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_STRHS_W_S___LT_S_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_STRHS_W_S___LT_S_RT__i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_STRHS_W_S___LT_S_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_STRHS_W_S___LT_S_RT__i_x_x_imm12)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_STRHS_W_S___LT_S_RT__i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			arm_mem_write16(ARM_M, address, arm_field32(ARM_GPR[ARM_STRHS_W_S___LT_S_RT__i_x_x_Rt_r], 15, 0));
			if(0)
				ARM_GPR[ARM_STRHS_W_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRHS_S___LT_S_RT____IS0XX_code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data16;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 7, 4), 1))
				__gtmp_36 = (ARM_GPR[ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] + ((uint32_t)(ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] - ((uint32_t)(ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 7, 4), 2))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data16 = arm_mem_read16(ARM_M, address);
			if(arm_bit8(arm_field8(arm_field32(ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4), 7, 4), 0))
				ARM_GPR[ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			ARM_GPR[arm_field32(ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val, 7, 4)] = ((uint32_t)(data16));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRHS_W_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data16;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_LDRHS_W_S___LT_S_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_LDRHS_W_S___LT_S_RT__i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRHS_W_S___LT_S_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_LDRHS_W_S___LT_S_RT__i_x_x_imm12)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRHS_W_S___LT_S_RT__i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data16 = arm_mem_read16(ARM_M, address);
			if(0)
				ARM_GPR[ARM_LDRHS_W_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			ARM_GPR[ARM_LDRHS_W_S___LT_S_RT__i_x_x_Rt_r] = ((uint32_t)(data16));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSHS_W_S___LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data16;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2 == 0))
				offset = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))] << ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (32 - ((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2))), (32 - ((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))] >> ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))])) >> ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))], ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r))], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rn_r))])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rn_r))])) - offset);
			offset_addr = __gtmp_36;
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			data16 = arm_mem_read16(ARM_M, address);
			if(0)
				ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rn_r))] = ((uint32_t)(offset_addr));
			ARM_GPR[((uint32_t)(ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rt_r))] = ((uint32_t)(((int32_t)(data16))));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRHS_W_S___LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2 == 0))
				offset = ((int32_t)(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))] << ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (32 - ((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2))), (32 - ((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))] >> ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))])) >> ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rn_r))])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rn_r))])) - offset);
			offset_addr = __gtmp_36;
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			arm_mem_write16(ARM_M, address, arm_field32(ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rt_r))], 15, 0));
			if(0)
				ARM_GPR[((uint32_t)(ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rn_r))] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRHS_W_S___LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data16;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2 == 0))
				offset = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))] << ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (32 - ((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2))), (32 - ((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))] >> ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))])) >> ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r))], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rn_r))])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rn_r))])) - offset);
			offset_addr = __gtmp_36;
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			data16 = arm_mem_read16(ARM_M, address);
			if(0)
				ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rn_r))] = ((uint32_t)(offset_addr));
			ARM_GPR[((uint32_t)(ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rt_r))] = ((uint32_t)(data16));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRS_S___LT_S_RT____IS0XX_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_39;
	uint8_t __gtmp_38;
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	uint32_t data32;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(arm_bit32(ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 1))
				__gtmp_36 = (ARM_GPR[ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] + ((uint32_t)(ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] - ((uint32_t)(ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_imm8)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(arm_bit32(ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 2))
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data32 = arm_mem_read32(ARM_M, address);
			if(arm_bit32(ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_P_U_W, 0))
				ARM_GPR[ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			if((ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_Rt_r == 15)) {
				if((7 >= 5)) {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 3)) {
						if((((uint32_t)(arm_bit32(data32, 0))) == 1))
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
					}
					else {
						if((((uint32_t)(arm_bit32(data32, 0))) == 1)) {
							__gtmp_39 = 1;
							ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_39 >> 1), 24, 24);
							ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_39, 5, 5);
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
						}
						else {
							if((((uint32_t)(arm_bit32(data32, 1))) == 0)) {
								__gtmp_38 = 0;
								ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_38 >> 1), 24, 24);
								ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_38, 5, 5);
								ARM_NPC = data32;
							}
						}
					}
				}
				else {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
						ARM_NPC = arm_concat32(arm_field32(data32, 31, 2), 0, 30, 2);
					else {
						if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
							if(0)
								ARM_NPC = arm_field32(data32, 31, 0);
							else {
								newaddress = data32;
								ARM_NPC = newaddress;
							}
						}
						else
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
					}
				}
			}
			else
				ARM_GPR[ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_Rt_r] = data32;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRS_W_S___LT_S___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_39;
	uint8_t __gtmp_38;
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	uint32_t data32;
	uint32_t address;
	int32_t offset_addr;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(1)
				__gtmp_36 = (ARM_GPR[ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] + ((uint32_t)(ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_imm12)));
			else
				__gtmp_36 = (ARM_GPR[ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] - ((uint32_t)(ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_imm12)));
			offset_addr = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r]));
			address = ((uint32_t)(__gtmp_37));
			data32 = arm_mem_read32(ARM_M, address);
			if(0)
				ARM_GPR[ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			if((ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r == 15)) {
				if((7 >= 5)) {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 3)) {
						if((((uint32_t)(arm_bit32(data32, 0))) == 1))
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
					}
					else {
						if((((uint32_t)(arm_bit32(data32, 0))) == 1)) {
							__gtmp_39 = 1;
							ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_39 >> 1), 24, 24);
							ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_39, 5, 5);
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
						}
						else {
							if((((uint32_t)(arm_bit32(data32, 1))) == 0)) {
								__gtmp_38 = 0;
								ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_38 >> 1), 24, 24);
								ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_38, 5, 5);
								ARM_NPC = data32;
							}
						}
					}
				}
				else {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
						ARM_NPC = arm_concat32(arm_field32(data32, 31, 2), 0, 30, 2);
					else {
						if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
							if(0)
								ARM_NPC = arm_field32(data32, 31, 0);
							else {
								newaddress = data32;
								ARM_NPC = newaddress;
							}
						}
						else
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
					}
				}
			}
			else
				ARM_GPR[ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r] = data32;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSHTS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_38;
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data16;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0)
				__gtmp_36 = ARM_GPR[0];
			else
				__gtmp_36 = ((uint32_t)(ARM_LDRSHTS_S___LT_S_RT__i_x_x_imm8));
			offset = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = (((int32_t)(ARM_GPR[ARM_LDRSHTS_S___LT_S_RT__i_x_x_Rn_r])) + offset);
			else
				__gtmp_37 = (((int32_t)(ARM_GPR[ARM_LDRSHTS_S___LT_S_RT__i_x_x_Rn_r])) - offset);
			offset_addr = __gtmp_37;
			if(0)
				__gtmp_38 = ((int32_t)(ARM_GPR[ARM_LDRSHTS_S___LT_S_RT__i_x_x_Rn_r]));
			else
				__gtmp_38 = offset_addr;
			address = ((uint32_t)(__gtmp_38));
			data16 = arm_mem_read16(ARM_M, address);
			if(0)
				ARM_GPR[ARM_LDRSHTS_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			ARM_GPR[ARM_LDRSHTS_S___LT_S_RT__i_x_x_Rt_r] = ((uint32_t)(((int32_t)(data16))));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSBTS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_38;
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0)
				__gtmp_36 = ARM_GPR[0];
			else
				__gtmp_36 = ((uint32_t)(ARM_LDRSBTS_S___LT_S_RT__i_x_x_imm8));
			offset = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = (((int32_t)(ARM_GPR[ARM_LDRSBTS_S___LT_S_RT__i_x_x_Rn_r])) + offset);
			else
				__gtmp_37 = (((int32_t)(ARM_GPR[ARM_LDRSBTS_S___LT_S_RT__i_x_x_Rn_r])) - offset);
			offset_addr = __gtmp_37;
			if(0)
				__gtmp_38 = ((int32_t)(ARM_GPR[ARM_LDRSBTS_S___LT_S_RT__i_x_x_Rn_r]));
			else
				__gtmp_38 = offset_addr;
			address = ((uint32_t)(__gtmp_38));
			ARM_GPR[ARM_LDRSBTS_S___LT_S_RT__i_x_x_Rt_r] = ((uint32_t)(((int32_t)(arm_mem_read8(ARM_M, address)))));
			if(0)
				ARM_GPR[ARM_LDRSBTS_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRTS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0) {
				if((0 == 0))
					offset = ((int32_t)(ARM_GPR[0]));
				else {
					switch(0) {
					case 0:
						offset = ((int32_t)((ARM_GPR[0] << 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (32 - 0)), 29, 29);
						break;
					case 1:
						offset = ((int32_t)((ARM_GPR[0] >> 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (0 - 1)), 29, 29);
						break;
					case 2:
						offset = ((int32_t)((((int32_t)(ARM_GPR[0])) >> 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (0 - 1)), 29, 29);
						break;
					case 3:
						offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[0], 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
						break;
					case 4:
						offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[0], 31, 1), 1, 31)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], 0), 29, 29);
						break;
					}
				}
			}
			else
				offset = ARM_STRTS_S___LT_S_RT__i_x_x_imm8;
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_STRTS_S___LT_S_RT__i_x_x_Rn_r])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_STRTS_S___LT_S_RT__i_x_x_Rn_r])) - offset);
			offset_addr = __gtmp_36;
			if(0)
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_STRTS_S___LT_S_RT__i_x_x_Rn_r]));
			else
				__gtmp_37 = offset_addr;
			address = ((uint32_t)(__gtmp_37));
			if((ARM_STRTS_S___LT_S_RT__i_x_x_Rt_r == 15))
				data = ((uint16_t)(ARM_GPR[15]));
			else
				data = ((uint16_t)(ARM_GPR[ARM_STRTS_S___LT_S_RT__i_x_x_Rt_r]));
			arm_mem_write32(ARM_M, address, ((uint32_t)(data)));
			if(0)
				ARM_GPR[ARM_STRTS_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRTS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t data32;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0) {
				if((0 == 0))
					offset = ((int32_t)(ARM_GPR[0]));
				else {
					switch(0) {
					case 0:
						offset = ((int32_t)((ARM_GPR[0] << 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (32 - 0)), 29, 29);
						break;
					case 1:
						offset = ((int32_t)((ARM_GPR[0] >> 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (0 - 1)), 29, 29);
						break;
					case 2:
						offset = ((int32_t)((((int32_t)(ARM_GPR[0])) >> 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (0 - 1)), 29, 29);
						break;
					case 3:
						offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[0], 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
						break;
					case 4:
						offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[0], 31, 1), 1, 31)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], 0), 29, 29);
						break;
					}
				}
			}
			else
				offset = ARM_LDRTS_S___LT_S_RT__i_x_x_imm8;
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_LDRTS_S___LT_S_RT__i_x_x_Rn_r])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_LDRTS_S___LT_S_RT__i_x_x_Rn_r])) - offset);
			offset_addr = __gtmp_36;
			if(0)
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRTS_S___LT_S_RT__i_x_x_Rn_r]));
			else
				__gtmp_37 = offset_addr;
			address = ((uint32_t)(__gtmp_37));
			data32 = arm_mem_read32(ARM_M, address);
			if(0)
				ARM_GPR[ARM_LDRTS_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			ARM_GPR[ARM_LDRTS_S___LT_S_RT__i_x_x_Rt_r] = data32;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRHTS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_38;
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0)
				__gtmp_36 = ARM_GPR[0];
			else
				__gtmp_36 = ((uint32_t)(ARM_STRHTS_S___LT_S_RT__i_x_x_imm8));
			offset = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = (((int32_t)(ARM_GPR[ARM_STRHTS_S___LT_S_RT__i_x_x_Rn_r])) + offset);
			else
				__gtmp_37 = (((int32_t)(ARM_GPR[ARM_STRHTS_S___LT_S_RT__i_x_x_Rn_r])) - offset);
			offset_addr = __gtmp_37;
			if(0)
				__gtmp_38 = ((int32_t)(ARM_GPR[ARM_STRHTS_S___LT_S_RT__i_x_x_Rn_r]));
			else
				__gtmp_38 = offset_addr;
			address = ((uint32_t)(__gtmp_38));
			arm_mem_write16(ARM_M, address, arm_field32(ARM_GPR[ARM_STRHTS_S___LT_S_RT__i_x_x_Rt_r], 15, 0));
			if(0)
				ARM_GPR[ARM_STRHTS_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRHTS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_38;
	int32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t data16;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0)
				__gtmp_36 = ARM_GPR[0];
			else
				__gtmp_36 = ((uint32_t)(ARM_LDRHTS_S___LT_S_RT__i_x_x_imm8));
			offset = ((int32_t)(__gtmp_36));
			if(1)
				__gtmp_37 = (((int32_t)(ARM_GPR[ARM_LDRHTS_S___LT_S_RT__i_x_x_Rn_r])) + offset);
			else
				__gtmp_37 = (((int32_t)(ARM_GPR[ARM_LDRHTS_S___LT_S_RT__i_x_x_Rn_r])) - offset);
			offset_addr = __gtmp_37;
			if(0)
				__gtmp_38 = ((int32_t)(ARM_GPR[ARM_LDRHTS_S___LT_S_RT__i_x_x_Rn_r]));
			else
				__gtmp_38 = offset_addr;
			address = ((uint32_t)(__gtmp_38));
			data16 = arm_mem_read16(ARM_M, address);
			if(0)
				ARM_GPR[ARM_LDRHTS_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
			ARM_GPR[ARM_LDRHTS_S___LT_S_RT__i_x_x_Rt_r] = ((uint32_t)(data16));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRBTS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0) {
				if((0 == 0))
					offset = ((int32_t)(ARM_GPR[0]));
				else {
					switch(0) {
					case 0:
						offset = ((int32_t)((ARM_GPR[0] << 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (32 - 0)), 29, 29);
						break;
					case 1:
						offset = ((int32_t)((ARM_GPR[0] >> 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (0 - 1)), 29, 29);
						break;
					case 2:
						offset = ((int32_t)((((int32_t)(ARM_GPR[0])) >> 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (0 - 1)), 29, 29);
						break;
					case 3:
						offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[0], 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
						break;
					case 4:
						offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[0], 31, 1), 1, 31)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], 0), 29, 29);
						break;
					}
				}
			}
			else
				offset = ARM_STRBTS_S___LT_S_RT__i_x_x_imm8;
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_STRBTS_S___LT_S_RT__i_x_x_Rn_r])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_STRBTS_S___LT_S_RT__i_x_x_Rn_r])) - offset);
			offset_addr = __gtmp_36;
			if(0)
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_STRBTS_S___LT_S_RT__i_x_x_Rn_r]));
			else
				__gtmp_37 = offset_addr;
			address = ((uint32_t)(__gtmp_37));
			arm_mem_write8(ARM_M, address, arm_field32(ARM_GPR[ARM_STRBTS_S___LT_S_RT__i_x_x_Rt_r], 7, 0));
			if(0)
				ARM_GPR[ARM_STRBTS_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRBTS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(0) {
				if((0 == 0))
					offset = ((int32_t)(ARM_GPR[0]));
				else {
					switch(0) {
					case 0:
						offset = ((int32_t)((ARM_GPR[0] << 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (32 - 0)), 29, 29);
						break;
					case 1:
						offset = ((int32_t)((ARM_GPR[0] >> 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (0 - 1)), 29, 29);
						break;
					case 2:
						offset = ((int32_t)((((int32_t)(ARM_GPR[0])) >> 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], (0 - 1)), 29, 29);
						break;
					case 3:
						offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[0], 0)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
						break;
					case 4:
						offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[0], 31, 1), 1, 31)));
						ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[0], 0), 29, 29);
						break;
					}
				}
			}
			else
				offset = ARM_LDRBTS_S___LT_S_RT__i_x_x_imm8;
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_LDRBTS_S___LT_S_RT__i_x_x_Rn_r])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[ARM_LDRBTS_S___LT_S_RT__i_x_x_Rn_r])) - offset);
			offset_addr = __gtmp_36;
			if(0)
				__gtmp_37 = ((int32_t)(ARM_GPR[ARM_LDRBTS_S___LT_S_RT__i_x_x_Rn_r]));
			else
				__gtmp_37 = offset_addr;
			address = ((uint32_t)(__gtmp_37));
			ARM_GPR[ARM_LDRBTS_S___LT_S_RT__i_x_x_Rt_r] = ((uint32_t)(arm_mem_read8(ARM_M, address)));
			if(0)
				ARM_GPR[ARM_LDRBTS_S___LT_S_RT__i_x_x_Rn_r] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSBS_W_S___LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2 == 0))
				offset = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))] << ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (32 - ((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2))), (32 - ((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))] >> ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))])) >> ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))], ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r))], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rn_r))])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rn_r))])) - offset);
			offset_addr = __gtmp_36;
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rt_r))] = ((uint32_t)(arm_mem_read8(ARM_M, address)));
			if(0)
				ARM_GPR[((uint32_t)(ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rn_r))] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRBS_W_S___LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2 == 0))
				offset = ((int32_t)(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))] << ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (32 - ((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2))), (32 - ((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))] >> ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))])) >> ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rn_r))])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rn_r))])) - offset);
			offset_addr = __gtmp_36;
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			arm_mem_write8(ARM_M, address, arm_field32(ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rt_r))], 7, 0));
			if(0)
				ARM_GPR[((uint32_t)(ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rn_r))] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRBS_W_S___LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t data8;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2 == 0))
				offset = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))] << ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (32 - ((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2))), (32 - ((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))] >> ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))])) >> ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r))], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rn_r))])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rn_r))])) - offset);
			offset_addr = __gtmp_36;
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			data8 = arm_mem_read8(ARM_M, address);
			ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rt_r))] = ((uint32_t)(data8));
			if(0)
				ARM_GPR[((uint32_t)(ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rn_r))] = ((uint32_t)(offset_addr));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRS_W_S___LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	int32_t __gtmp_37;
	int32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t data32;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2 == 0))
				offset = ((int32_t)(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))] << ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))], (32 - ((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2))), (32 - ((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))] >> ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))])) >> ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))], ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r))], 0), 29, 29);
					break;
				}
			}
			if(1)
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rn_r))])) + offset);
			else
				__gtmp_36 = (((int32_t)(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rn_r))])) - offset);
			offset_addr = __gtmp_36;
			if(1)
				__gtmp_37 = offset_addr;
			else
				__gtmp_37 = ((int32_t)(ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rn_r))]));
			address = ((uint32_t)(__gtmp_37));
			if((((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rt_r)) == 15))
				data32 = ARM_GPR[15];
			else
				data32 = ARM_GPR[((uint32_t)(ARM_STRS_W_S___LT_S__S_RT__i_x_x_rt_r))];
			arm_mem_write32(ARM_M, address, data32);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRS_W_S___LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_37;
	uint8_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	uint32_t data32;
	uint32_t address;
	int32_t offset_addr;
	int32_t offset;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2 == 0))
				offset = ((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))]));
			else {
				switch(0) {
				case 0:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))] << ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))], (32 - ((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2))), (32 - ((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2))), 1 ))), 29, 29);
					break;
				case 1:
					offset = ((int32_t)((ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))] >> ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 2:
					offset = ((int32_t)((((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))])) >> ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))], (((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), (((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2)) - 1), 1 ))), 29, 29);
					break;
				case 3:
					offset = ((int32_t)(arm_rotate_right32(32, ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))], ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(offset, 31), 29, 29);
					break;
				case 4:
					offset = ((int32_t)(arm_concat32(arm_bit32(ARM_APSR, 29), arm_field32(ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))], 31, 1), 1, 31)));
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r))], 0), 29, 29);
					break;
				}
			}
			offset_addr = (((int32_t)(ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rn_r))])) + offset);
			address = ((uint32_t)(offset_addr));
			data32 = arm_mem_read32(ARM_M, address);
			if((((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rt_r)) == 15)) {
				if((7 >= 5)) {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 3)) {
						if((((uint32_t)(arm_bit32(data32, 0))) == 1))
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
					}
					else {
						if((((uint32_t)(arm_bit32(data32, 0))) == 1)) {
							__gtmp_37 = 1;
							ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_37 >> 1), 24, 24);
							ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_37, 5, 5);
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
						}
						else {
							if((((uint32_t)(arm_bit32(data32, 1))) == 0)) {
								__gtmp_36 = 0;
								ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_36 >> 1), 24, 24);
								ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_36, 5, 5);
								ARM_NPC = data32;
							}
						}
					}
				}
				else {
					if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
						ARM_NPC = arm_concat32(arm_field32(data32, 31, 2), 0, 30, 2);
					else {
						if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
							if(0)
								ARM_NPC = arm_field32(data32, 31, 0);
							else {
								newaddress = data32;
								ARM_NPC = newaddress;
							}
						}
						else
							ARM_NPC = arm_concat32(arm_field32(data32, 31, 1), 0, 31, 1);
					}
				}
			}
			else
				ARM_GPR[((uint32_t)(ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rt_r))] = data32;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDC2SS_D__D___LT_RD_RT___D_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDC2SS_D__D___LT_RD_RT____ISD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDC2SS_D__D___LT_RD___ISD_RT__21_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDC2SS_D__D___LT_RD___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDCSS_D__D___LT_RD_RT___D_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDCSS_D__D___LT_RD_RT____ISD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDCSS_D__D___LT_RD___ISD_RT__21_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDCSS_D__D___LT_RD___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STC2SS_D__D___LT_RD_RT___D_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STC2SS_D__D___LT_RD_RT____ISD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STC2SS_D__D___LT_RD___ISD_RT__21_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STC2SS_D__D___LT_RD___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STCSS_D__D___LT_RD_RT___D_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STCSS_D__D___LT_RD_RT____ISD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STCSS_D__D___LT_RD___ISD_RT__21_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STCSS_D__D___LT_RD___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BLXS_0X08X_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		ARM_GPR[14] = (arm_concat32(arm_field32(ARM_BLXS_0X08X___IADDR, 31, 1), 1, 31, 1) + 4);
		__gtmp_18 = 0;
		ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_18 >> 1), 24, 24);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_18, 5, 5);
		ARM_NPC = arm_concat32(arm_field32((((int32_t)(((ARM_BLXS_0X08X___IADDR & ~(4 - 1)) + 4))) + __ARM_EXTS32(7, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BLXS_0X08X_i_x_S, __ARM_MASK32(1, ~(ARM_BLXS_0X08X_i_x_J1 ^ ARM_BLXS_0X08X_i_x_S)), 1, 1), __ARM_MASK32(1, ~(ARM_BLXS_0X08X_i_x_J2 ^ ARM_BLXS_0X08X_i_x_S)), 2, 1), ARM_BLXS_0X08X_i_x_imm10H, 3, 10), ARM_BLXS_0X08X_i_x_imm10L, 13, 10), 0, 23, 2))))), 31, 1), 0, 31, 1);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_TBBS__LT_S__S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	uint16_t TMP_IMM16;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[((uint32_t)(ARM_TBBS__LT_S__S_RT__i_x_Rn_r))];
		TMP_UREG2 = ARM_GPR[((uint32_t)(ARM_TBBS__LT_S__S_RT__i_x_Rm_r))];
		if(ARM_TBBS__LT_S__S_RT__i_x_H) {
			TMP_IMM16 = arm_mem_read16(ARM_M, (TMP_UREG1 + (TMP_UREG2 << 1)));
			if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
				ARM_NPC = arm_concat32(arm_field32((ARM_GPR[15] + (2 * ((uint32_t)(TMP_IMM16)))), 31, 2), 0, 30, 2);
			else {
				if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
					if(0)
						ARM_NPC = arm_field32((ARM_GPR[15] + (2 * ((uint32_t)(TMP_IMM16)))), 31, 0);
					else {
						newaddress = (ARM_GPR[15] + (2 * ((uint32_t)(TMP_IMM16))));
						ARM_NPC = newaddress;
					}
				}
				else
					ARM_NPC = arm_concat32(arm_field32((ARM_GPR[15] + (2 * ((uint32_t)(TMP_IMM16)))), 31, 1), 0, 31, 1);
			}
		}
		else {
			TMP_IMM16 = ((uint16_t)(arm_mem_read8(ARM_M, (TMP_UREG1 + TMP_UREG2))));
			if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
				ARM_NPC = arm_concat32(arm_field32((ARM_GPR[15] + (2 * ((uint32_t)(TMP_IMM16)))), 31, 2), 0, 30, 2);
			else {
				if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
					if(0)
						ARM_NPC = arm_field32((ARM_GPR[15] + (2 * ((uint32_t)(TMP_IMM16)))), 31, 0);
					else {
						newaddress = (ARM_GPR[15] + (2 * ((uint32_t)(TMP_IMM16))));
						ARM_NPC = newaddress;
					}
				}
				else
					ARM_NPC = arm_concat32(arm_field32((ARM_GPR[15] + (2 * ((uint32_t)(TMP_IMM16)))), 31, 1), 0, 31, 1);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BLS_0XX_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			ARM_GPR[14] = arm_concat32(arm_field32(ARM_GPR[15], 31, 1), 1, 31, 1);
			ARM_NPC = arm_concat32(arm_field32((((int32_t)((ARM_BLS_0XX___IADDR + 4))) + __ARM_EXTS32(7, ((int32_t)(arm_concat32(arm_concat32(arm_concat16(arm_concat8(arm_concat8(ARM_BLS_0XX_i_x_S_set, __ARM_MASK32(1, ~(ARM_BLS_0XX_i_x_J1 ^ ARM_BLS_0XX_i_x_S_set)), 1, 1), __ARM_MASK32(1, ~(ARM_BLS_0XX_i_x_J2 ^ ARM_BLS_0XX_i_x_S_set)), 2, 1), ARM_BLS_0XX_i_x_imm10, 3, 10), ARM_BLS_0XX_i_x_imm11, 13, 11), arm_bit32(0, 0), 24, 1))))), 31, 1), 0, 31, 1);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSS_F64_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSS_F32_SD__SD__SD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSS_F32_QD__QD__QD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSS_F32_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VPOPS__LB_SD_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VPOPS__LB_DD_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VADDS_F64_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VADDS_F32_SD__SD__SD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VADDS_F32_QD__QD__QD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VADDS_F32_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VCVTS_F64_S_DD__SD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VCVTSS_U32_F64_SD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VCVTS_F32_S_SD__SD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VPUSHS__LB_SD_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VPUSHS__LB_DD_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMULS_F64_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMULS_F32_SD__SD__SD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMULS_F32_QD__QD__QD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMULS_F32_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMRSS_S__FPSCR_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((((uint32_t)(ARM_VMRSS_S__FPSCR_i_x_Rt_r)) != 15))
			ARM_GPR[(((uint32_t)(ARM_VMRSS_S__FPSCR_i_x_Rt_r)) + 0)] = ARM_FPSCR;
		else
			ARM_APSR = arm_set_field32_inverted(ARM_APSR, ((uint32_t)(arm_field32_inverted(ARM_FPSCR, 31, 28))), 31, 28);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSTRS_SD___LT_S___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_U)
				__gtmp_36 = (ARM_GPR[(((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Rn_r)) + 0)] + ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))));
			else
				__gtmp_36 = (ARM_GPR[(((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Rn_r)) + 0)] - ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))));
			address = __gtmp_36;
			if(1)
				arm_mem_write32(ARM_M, address, arm_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))], 31, 0));
			else {
				arm_mem_write32(ARM_M, address, arm_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))], 31, 0));
				arm_mem_write32(ARM_M, (address + 4), arm_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))], 63, 32));
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSTRS_DD___LT_S___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_U)
				__gtmp_36 = (ARM_GPR[(((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)) + 0)] + ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))));
			else
				__gtmp_36 = (ARM_GPR[(((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)) + 0)] - ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))));
			address = __gtmp_36;
			if(0)
				arm_mem_write32(ARM_M, address, arm_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, 1, 4)))], 31, 0));
			else {
				arm_mem_write32(ARM_M, address, arm_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, 1, 4)))], 31, 0));
				arm_mem_write32(ARM_M, (address + 4), arm_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, 1, 4)))], 63, 32));
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VLDRS_DD___LT_S___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t word2;
	uint32_t word1;
	uint32_t address;
	uint32_t base;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)) == 15))
				__gtmp_36 = (ARM_GPR[15] & ~(4 - 1));
			else
				__gtmp_36 = ARM_GPR[(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)) + 0)];
			base = __gtmp_36;
			if(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_U)
				__gtmp_37 = (base + ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))));
			else
				__gtmp_37 = (base - ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))));
			address = __gtmp_37;
			if(1)
				ARM_S[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))] = arm_set_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))], arm_mem_read32(ARM_M, address), 31, 0);
			else {
				word1 = arm_mem_read32(ARM_M, address);
				word2 = arm_mem_read32(ARM_M, (address + 4));
				ARM_D[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))] = arm_set_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))], arm_concat64(word2, word1, 32, 32), 63, 0);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VLDRS_DD___LT_S___ISD_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t word2;
	uint32_t word1;
	uint32_t address;
	uint32_t base;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Rn_r)) == 15))
				__gtmp_36 = (ARM_GPR[15] & ~(4 - 1));
			else
				__gtmp_36 = ARM_GPR[(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Rn_r)) + 0)];
			base = __gtmp_36;
			if(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_U)
				__gtmp_37 = (base + ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_imm8, 0, 8, 2))));
			else
				__gtmp_37 = (base - ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_imm8, 0, 8, 2))));
			address = __gtmp_37;
			if(0)
				ARM_S[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4)))] = arm_set_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4)))], arm_mem_read32(ARM_M, address), 31, 0);
			else {
				word1 = arm_mem_read32(ARM_M, address);
				word2 = arm_mem_read32(ARM_M, (address + 4));
				ARM_D[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4)))] = arm_set_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4)))], arm_concat64(word2, word1, 32, 32), 63, 0);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VDIVS_F64_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VDIVS_F32_SD__SD__SD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSUBS_F64_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSUBS_F32_SD__SD__SD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_DD__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_SD__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if(ARM_VMOVS_SD__S_i_x_op_)
			ARM_GPR[(((uint32_t)(ARM_VMOVS_SD__S_i_x_Rt_r)) + 0)] = arm_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_SD__S_i_x_Vn__r, ARM_VMOVS_SD__S_i_x_Vn__p, 4, 1)))], 31, 0);
		else
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_SD__S_i_x_Vn__r, ARM_VMOVS_SD__S_i_x_Vn__p, 4, 1)))] = arm_set_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_SD__S_i_x_Vn__r, ARM_VMOVS_SD__S_i_x_Vn__p, 4, 1)))], ARM_GPR[(((uint32_t)(ARM_VMOVS_SD__S_i_x_Rt_r)) + 0)], 31, 0);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_F64_DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t r_;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if(0)
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD__DD_i_x_x_Vd__p, ARM_VMOVS_F64_DD__DD_i_x_x_Vd__r, 1, 4)))] = ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD__DD_i_x_x_Vm__p, ARM_VMOVS_F64_DD__DD_i_x_x_Vm__r, 1, 4)))];
		else {
			r_ = ((uint8_t)(0));
gliss_VMOVS_F64_DD__DD_0_:
			if((((uint32_t)(r_)) <= (1 - 1))) {
				ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD__DD_i_x_x_Vd__p, ARM_VMOVS_F64_DD__DD_i_x_x_Vd__r, 1, 4))) + ((uint32_t)(r_)))] = ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD__DD_i_x_x_Vm__p, ARM_VMOVS_F64_DD__DD_i_x_x_Vm__r, 1, 4))) + ((uint32_t)(r_)))];
				r_ = ((uint8_t)((((uint32_t)(r_)) + 1)));
goto gliss_VMOVS_F64_DD__DD_0_;
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_F32_SD__SD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t r_;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if(1)
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD__SD_i_x_x_Vd__r, ARM_VMOVS_F32_SD__SD_i_x_x_Vd__p, 4, 1)))] = ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD__SD_i_x_x_Vm__r, ARM_VMOVS_F32_SD__SD_i_x_x_Vm__p, 4, 1)))];
		else {
			r_ = ((uint8_t)(0));
gliss_VMOVS_F32_SD__SD_0_:
			if((((uint32_t)(r_)) <= (0 - 1))) {
				ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD__SD_i_x_x_Vd__r, ARM_VMOVS_F32_SD__SD_i_x_x_Vd__p, 4, 1))) + ((uint32_t)(r_)))] = ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD__SD_i_x_x_Vm__r, ARM_VMOVS_F32_SD__SD_i_x_x_Vm__p, 4, 1))) + ((uint32_t)(r_)))];
				r_ = ((uint8_t)((((uint32_t)(r_)) + 1)));
goto gliss_VMOVS_F32_SD__SD_0_;
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_F64_DD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t r_;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if(0)
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD___ID_i_x_x_Vd__p, ARM_VMOVS_F64_DD___ID_i_x_x_Vd__r, 1, 4)))] = ((float)(0));
		else {
			r_ = ((uint8_t)(0));
gliss_VMOVS_F64_DD___ID_0_:
			if((((uint32_t)(r_)) <= (1 - 1))) {
				ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD___ID_i_x_x_Vd__p, ARM_VMOVS_F64_DD___ID_i_x_x_Vd__r, 1, 4))) + ((uint32_t)(r_)))] = ((double)(arm_concat8(ARM_VMOVS_F64_DD___ID_i_x_x_imm4H, ARM_VMOVS_F64_DD___ID_i_x_x_imm4L, 4, 4)));
				r_ = ((uint8_t)((((uint32_t)(r_)) + 1)));
goto gliss_VMOVS_F64_DD___ID_0_;
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_F32_SD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t r_;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if(1)
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD___ID_i_x_x_Vd__r, ARM_VMOVS_F32_SD___ID_i_x_x_Vd__p, 4, 1)))] = ((float)(arm_concat8(ARM_VMOVS_F32_SD___ID_i_x_x_imm4H, ARM_VMOVS_F32_SD___ID_i_x_x_imm4L, 4, 4)));
		else {
			r_ = ((uint8_t)(0));
gliss_VMOVS_F32_SD___ID_0_:
			if((((uint32_t)(r_)) <= (0 - 1))) {
				ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD___ID_i_x_x_Vd__r, ARM_VMOVS_F32_SD___ID_i_x_x_Vd__p, 4, 1))) + ((uint32_t)(r_)))] = ((double)(0));
				r_ = ((uint8_t)((((uint32_t)(r_)) + 1)));
goto gliss_VMOVS_F32_SD___ID_0_;
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UXTHS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UXTHS_RD__RD_i_x_rm_ro];
		TMP_UREG3 = ((uint32_t)(arm_field32(TMP_UREG1, 15, 0)));
		if((ARM_UXTHS_RD__RD_i_x_rd_ro == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_UXTHS_RD__RD_i_x_rd_ro] = TMP_UREG3;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UXTBS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG3;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_UXTBS_RD__RD_i_x_rm_ro];
		TMP_UREG3 = ((uint32_t)(arm_field32(TMP_UREG1, 7, 0)));
		if((ARM_UXTBS_RD__RD_i_x_rd_ro == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_UXTBS_RD__RD_i_x_rd_ro] = TMP_UREG3;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_YIELDS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((ARM_YIELDS_i_x_mask != 0))
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, arm_concat8(ARM_YIELDS_i_x_firstcond, ARM_YIELDS_i_x_mask, 4, 4), 7, 0);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MOVS_S__S_i_x_rm_r]));
		if(ARM_MOVS_S__S_i_x_H)
			__gtmp_18 = 8;
		else
			__gtmp_18 = 0;
		if(((((uint32_t)(ARM_MOVS_S__S_i_x_rd_ro)) + __gtmp_18) == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else {
			if(ARM_MOVS_S__S_i_x_H)
				__gtmp_19 = 8;
			else
				__gtmp_19 = 0;
			ARM_GPR[(((uint32_t)(ARM_MOVS_S__S_i_x_rd_ro)) + __gtmp_19)] = ((uint32_t)(TMP_SWORD));
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVS_RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		ARM_GPR[ARM_MOVS_RD___ID_i_x_rd_ro] = ARM_MOVS_RD___ID_i_x_imm_n;
		if(!(((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit8(ARM_MOVS_RD___ID_i_x_imm_n, 31), 31, 31);
			ARM_APSR = arm_set_field32(ARM_APSR, (ARM_MOVS_RD___ID_i_x_imm_n == 0), 30, 30);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_TSTS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG1;
	int32_t TMP_REG2;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_TSTS_RD__RD_i_x_rn_ro]));
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_TSTS_RD__RD_i_x_rm_ro]));
		Temp = (TMP_REG2 & TMP_REG1);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SXTHS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SXTHS_RD__RD_i_x_rm_ro]));
		TMP_REG3 = ((int32_t)(arm_field32(TMP_REG1, 15, 0)));
		if((ARM_SXTHS_RD__RD_i_x_rd_ro == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SXTHS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG3));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SXTBS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SXTBS_RD__RD_i_x_rm_ro]));
		TMP_REG3 = ((int32_t)(arm_field32(TMP_REG1, 7, 0)));
		if((ARM_SXTBS_RD__RD_i_x_rd_ro == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SXTBS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG3));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBS_RD__RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBS_RD__RD__RD_i_x_rm_ro]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SUBS_RD__RD__RD_i_x_rn_ro]));
		TMP_SWORD = (TMP_REG2 - TMP_REG1);
		ARM_GPR[ARM_SUBS_RD__RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_SWORD));
		if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_SWORD, 31), 31, 31);
		if((TMP_SWORD == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBS_SP___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[13]));
		TMP_SWORD = (TMP_REG1 - ((int32_t)(((uint32_t)(arm_concat16(ARM_SUBS_SP___ID_i_x_imm_n, 0, 7, 2))))));
		if((13 == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[13] = ((uint32_t)(TMP_SWORD));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBS_RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	int32_t TMP_SWORD;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBS_RD___ID_i_x_rd_ro]));
		TMP_SWORD = (TMP_REG1 - ((int32_t)(ARM_SUBS_RD___ID_i_x_imm_n)));
		ARM_GPR[ARM_SUBS_RD___ID_i_x_rd_ro] = ((uint32_t)(TMP_SWORD));
		if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBS_RD___ID_i_x_rd_ro]));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBS_RD__RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBS_RD__RD___ID_i_x_rd_ro]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SUBS_RD__RD___ID_i_x_rn_ro]));
		TMP_SWORD = (TMP_REG2 - __ARM_EXTS8(29, ((int32_t)(ARM_SUBS_RD__RD___ID_i_x_imm_n))));
		ARM_GPR[ARM_SUBS_RD__RD___ID_i_x_rd_ro] = ((uint32_t)(TMP_SWORD));
		if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBS_RD__RD___ID_i_x_rd_ro]));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRHS_RD___LT_RD__RD__RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t TMP_REGLIST;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_STRHS_RD___LT_RD__RD__RT__i_x_rn_ro] + ARM_GPR[ARM_STRHS_RD___LT_RD__RD__RT__i_x_rm_ro]);
		TMP_REGLIST = arm_field32(ARM_GPR[ARM_STRHS_RD___LT_RD__RD__RT__i_x_rd_ro], 15, 0);
		if(((TMP_START_ADDR & 3) == 0))
			arm_mem_write16(ARM_M, TMP_START_ADDR, TMP_REGLIST);
		else
			arm_mem_write16(ARM_M, TMP_START_ADDR, ((uint16_t)(0xffffffffLU)));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRHS_RD___LT_RD___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t TMP_REGLIST;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_STRHS_RD___LT_RD___I0XX_RT__i_x_rn_ro] + (((uint32_t)(ARM_STRHS_RD___LT_RD___I0XX_RT__i_x_imm_n)) * 2));
		TMP_REGLIST = arm_field32(ARM_GPR[ARM_STRHS_RD___LT_RD___I0XX_RT__i_x_rd_ro], 15, 0);
		if(((TMP_START_ADDR & 3) == 0))
			arm_mem_write16(ARM_M, TMP_START_ADDR, TMP_REGLIST);
		else
			arm_mem_write16(ARM_M, TMP_START_ADDR, ((uint16_t)(0xffffffffLU)));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRBS_RD___LT_RD__RD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM2;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_STRBS_RD___LT_RD__RD_RT__i_x_rn_ro] + ARM_GPR[ARM_STRBS_RD___LT_RD__RD_RT__i_x_rm_ro]);
		TMP_IMM2 = arm_field32(ARM_GPR[ARM_STRBS_RD___LT_RD__RD_RT__i_x_rd_ro], 7, 0);
		arm_mem_write8(ARM_M, TMP_START_ADDR, TMP_IMM2);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRBS_RD___LT_RD___ID_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM2;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_STRBS_RD___LT_RD___ID_RT__i_x_rn_ro] + ((uint32_t)(ARM_STRBS_RD___LT_RD___ID_RT__i_x_imm_n)));
		TMP_IMM2 = arm_field32(ARM_GPR[ARM_STRBS_RD___LT_RD___ID_RT__i_x_rd_ro], 7, 0);
		arm_mem_write8(ARM_M, TMP_START_ADDR, TMP_IMM2);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRS_RD___LT_SP___ID_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_START_ADDR;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[13]));
		TMP_START_ADDR = ((uint32_t)((TMP_REG1 + ((int32_t)((((uint32_t)(ARM_STRS_RD___LT_SP___ID_RT__i_x_imm_n)) * 4))))));
		if(((TMP_START_ADDR & 3) == 0))
			arm_mem_write32(ARM_M, TMP_START_ADDR, ARM_GPR[ARM_STRS_RD___LT_SP___ID_RT__i_x_rd_ro]);
		else
			arm_mem_write32(ARM_M, TMP_START_ADDR, 0xffffffffLU);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRS_RD___LT_RD__RD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_STRS_RD___LT_RD__RD_RT__i_x_rn_ro] + ARM_GPR[ARM_STRS_RD___LT_RD__RD_RT__i_x_rm_ro]);
		if(((TMP_START_ADDR & 3) == 0))
			arm_mem_write32(ARM_M, TMP_START_ADDR, ARM_GPR[ARM_STRS_RD___LT_RD__RD_RT__i_x_rd_ro]);
		else
			arm_mem_write32(ARM_M, TMP_START_ADDR, 0xffffffffLU);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRS_RD___LT_RD___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_STRS_RD___LT_RD___I0XX_RT__i_x_rn_ro] + (((uint32_t)(ARM_STRS_RD___LT_RD___I0XX_RT__i_x_imm_n)) * 4));
		if(((TMP_START_ADDR & 3) == 0))
			arm_mem_write32(ARM_M, TMP_START_ADDR, ARM_GPR[ARM_STRS_RD___LT_RD___I0XX_RT__i_x_rd_ro]);
		else
			arm_mem_write32(ARM_M, TMP_START_ADDR, 0xffffffffLU);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STMIAS_RD_21___LB_S_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int32_t TMP_REG1;
	int8_t TMP_SETBIT;
	uint8_t TMP_IMM;
	uint16_t TMP_REGLIST;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REGLIST = ARM_STMIAS_RD_21___LB_S_RB__i_x_llist_r;
		TMP_IMM = ((uint8_t)(0));
		TMP_SETBIT = ((int8_t)(0));
		ARM_B15SET = ((uint8_t)(0));
gliss_STMIAS_RD_21___LB_S_RB__0_:
		if((((uint32_t)(TMP_IMM)) != 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
				if((((uint32_t)(TMP_IMM)) == 7))
					ARM_B15SET = ((uint8_t)(1));
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_STMIAS_RD_21___LB_S_RB__0_;
		}
		TMP_REGLIST = ARM_STMIAS_RD_21___LB_S_RB__i_x_llist_r;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STMIAS_RD_21___LB_S_RB__i_x_rn_ro]));
		TMP_START_ADDR = ((uint32_t)(TMP_REG1));
		TMP_END_ADDR = ((uint32_t)(((TMP_REG1 + (((int32_t)(TMP_SETBIT)) * ((int32_t)(4)))) - ((int32_t)(4)))));
		TMP_IMM = ((uint8_t)(0));
gliss_STMIAS_RD_21___LB_S_RB__1_:
		if((((uint32_t)(TMP_IMM)) != 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				arm_mem_write32(ARM_M, TMP_START_ADDR, ARM_GPR[TMP_IMM]);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_STMIAS_RD_21___LB_S_RB__1_;
		}
		TMP_END_ADDR = (TMP_START_ADDR - 4);
		ARM_GPR[ARM_STMIAS_RD_21___LB_S_RB__i_x_rn_ro] = ((uint32_t)((TMP_REG1 + (((int32_t)(TMP_SETBIT)) * ((int32_t)(4))))));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SBCS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	uint8_t TMP_BIT;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SBCS_RD__RD_i_x_rd_ro]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SBCS_RD__RD_i_x_rm_ro]));
		TMP_BIT = !arm_bit32(ARM_APSR, 29);
		TMP_SWORD = ((TMP_REG1 - TMP_REG2) - __ARM_EXTS8(31, ((int32_t)(!arm_bit32(ARM_APSR, 29)))));
		TMP_REG1 = TMP_SWORD;
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit8(TMP_BIT, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit8(TMP_BIT, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(!__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)) && (((uint32_t)(arm_bit8(TMP_BIT, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)) && (((uint32_t)(arm_bit8(TMP_BIT, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RORS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM2;
	int32_t TMP_REG1;
	uint8_t TMP_FIVE;
	uint8_t TMP_IMM;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_IMM = arm_field32(ARM_GPR[ARM_RORS_RD__RD_i_x_rs_ro], 7, 0);
		TMP_FIVE = arm_field32(ARM_GPR[ARM_RORS_RD__RD_i_x_rs_ro], 4, 0);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RORS_RD__RD_i_x_rd_ro]));
		if((((uint32_t)(TMP_IMM)) == 0))
			;
		else {
			if((((uint32_t)(TMP_FIVE)) == 0))
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 29, 29);
			else {
				TMP_IMM2 = ((uint8_t)((((uint32_t)(TMP_FIVE)) - 1)));
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_RORS_RD__RD_i_x_rd_ro], TMP_IMM2, TMP_IMM2, 1 ))), 29, 29);
				TMP_REG1 = ((int32_t)(arm_rotate_right32(32, TMP_REG1, TMP_FIVE)));
			}
		}
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_RORS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_REVSHS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_REVSHS_RD__RD_i_x_rm_ro];
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(__ARM_EXTS8(24, ((int32_t)(arm_field32(TMP_UREG1, 7, 0)))))), 31, 8);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 15, 8))), 7, 0);
		if((ARM_REVSHS_RD__RD_i_x_rd_ro == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_REVSHS_RD__RD_i_x_rd_ro] = TMP_UREG2;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_REV16S_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_REV16S_RD__RD_i_x_rm_ro];
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 23, 16))), 31, 24);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 31, 24))), 23, 16);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 7, 0))), 15, 8);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 15, 8))), 7, 0);
		if((ARM_REV16S_RD__RD_i_x_rd_ro == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_REV16S_RD__RD_i_x_rd_ro] = TMP_UREG2;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_REVS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG2;
	uint32_t TMP_UREG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_UREG1 = ARM_GPR[ARM_REVS_RD__RD_i_x_rm_ro];
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 7, 0))), 31, 24);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 15, 8))), 23, 16);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 23, 16))), 15, 8);
		TMP_UREG2 = arm_set_field32(TMP_UREG2, ((uint32_t)(arm_field32(TMP_UREG1, 31, 24))), 7, 0);
		if((ARM_REVS_RD__RD_i_x_rd_ro == 15))
			ARM_NPC = TMP_UREG2;
		else
			ARM_GPR[ARM_REVS_RD__RD_i_x_rd_ro] = TMP_UREG2;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PUSHS__LB_SS_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int32_t TMP_REG1;
	int8_t TMP_SETBIT;
	uint16_t TMP_REGLIST;
	uint8_t TMP_IMM;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_IMM = ((uint8_t)(0));
		TMP_REGLIST = ARM_PUSHS__LB_SS_RB__i_x_llist_r;
		TMP_SETBIT = ((int8_t)(0));
		ARM_B15SET = ((uint8_t)(0));
		TMP_REG1 = ((int32_t)(ARM_GPR[13]));
gliss_PUSHS__LB_SS_RB__0_:
		if((((uint32_t)(TMP_IMM)) != 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
				if((((uint32_t)(TMP_IMM)) == 7))
					ARM_B15SET = ((uint8_t)(1));
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_PUSHS__LB_SS_RB__0_;
		}
		TMP_START_ADDR = ((uint32_t)((TMP_REG1 - ((((int32_t)(0)) + ((int32_t)(TMP_SETBIT))) * ((int32_t)(4))))));
		TMP_END_ADDR = TMP_START_ADDR;
		TMP_IMM = ((uint8_t)(0));
		TMP_REGLIST = ARM_PUSHS__LB_SS_RB__i_x_llist_r;
gliss_PUSHS__LB_SS_RB__1_:
		if((((uint32_t)(TMP_IMM)) != 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				arm_mem_write32(ARM_M, TMP_START_ADDR, ARM_GPR[TMP_IMM]);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_PUSHS__LB_SS_RB__1_;
		}
		if((0 == 1)) {
			TMP_REG2 = ((int32_t)(ARM_GPR[14]));
			arm_mem_write32(ARM_M, TMP_START_ADDR, ((uint32_t)(TMP_REG2)));
			TMP_START_ADDR = (TMP_START_ADDR + 4);
		}
		if((13 == 15))
			ARM_NPC = TMP_END_ADDR;
		else
			ARM_GPR[13] = TMP_END_ADDR;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_PUSHS__LB_SS_RB__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int32_t TMP_REG1;
	int8_t TMP_SETBIT;
	uint16_t TMP_REGLIST;
	uint8_t TMP_IMM;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_IMM = ((uint8_t)(0));
		TMP_REGLIST = ARM_PUSHS__LB_SS_RB__0_i_x_llist_r;
		TMP_SETBIT = ((int8_t)(0));
		ARM_B15SET = ((uint8_t)(0));
		TMP_REG1 = ((int32_t)(ARM_GPR[13]));
gliss_PUSHS__LB_SS_RB__0_0_:
		if((((uint32_t)(TMP_IMM)) != 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
				if((((uint32_t)(TMP_IMM)) == 7))
					ARM_B15SET = ((uint8_t)(1));
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_PUSHS__LB_SS_RB__0_0_;
		}
		TMP_START_ADDR = ((uint32_t)((TMP_REG1 - ((((int32_t)(1)) + ((int32_t)(TMP_SETBIT))) * ((int32_t)(4))))));
		TMP_END_ADDR = TMP_START_ADDR;
		TMP_IMM = ((uint8_t)(0));
		TMP_REGLIST = ARM_PUSHS__LB_SS_RB__0_i_x_llist_r;
gliss_PUSHS__LB_SS_RB__0_1_:
		if((((uint32_t)(TMP_IMM)) != 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				arm_mem_write32(ARM_M, TMP_START_ADDR, ARM_GPR[TMP_IMM]);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_PUSHS__LB_SS_RB__0_1_;
		}
		if((1 == 1)) {
			TMP_REG2 = ((int32_t)(ARM_GPR[14]));
			arm_mem_write32(ARM_M, TMP_START_ADDR, ((uint32_t)(TMP_REG2)));
			TMP_START_ADDR = (TMP_START_ADDR + 4);
		}
		if((13 == 15))
			ARM_NPC = TMP_END_ADDR;
		else
			ARM_GPR[13] = TMP_END_ADDR;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_POPS__LB_SS_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int8_t TMP_SETBIT;
	uint8_t TMP_IMM;
	uint16_t TMP_REGLIST;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REGLIST = ARM_POPS__LB_SS_RB__i_x_llist_r;
		TMP_IMM = ((uint8_t)(0));
		TMP_SETBIT = ((int8_t)(0));
gliss_POPS__LB_SS_RB__0_:
		if((((uint32_t)(TMP_IMM)) < 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1)))))
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_POPS__LB_SS_RB__0_;
		}
		TMP_REGLIST = ARM_POPS__LB_SS_RB__i_x_llist_r;
		TMP_START_ADDR = ARM_GPR[13];
		TMP_END_ADDR = ((uint32_t)((((int32_t)(TMP_START_ADDR)) + ((((int32_t)(0)) + ((int32_t)(TMP_SETBIT))) * ((int32_t)(4))))));
		TMP_IMM = ((uint8_t)(0));
gliss_POPS__LB_SS_RB__1_:
		if((((uint32_t)(TMP_IMM)) < 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				if((((uint32_t)(TMP_IMM)) == 15))
					ARM_NPC = arm_mem_read32(ARM_M, TMP_START_ADDR);
				else
					ARM_GPR[TMP_IMM] = arm_mem_read32(ARM_M, TMP_START_ADDR);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_POPS__LB_SS_RB__1_;
		}
		if((0 == 1)) {
			TMP_REG1 = ((int32_t)(arm_mem_read32(ARM_M, TMP_START_ADDR)));
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 0), 5, 5);
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_APSR, 5), 5, 5);
			ARM_NPC = arm_concat32(arm_field32(arm_mem_read32(ARM_M, TMP_START_ADDR), 31, 1), 0, 31, 1);
		}
		if((13 == 15))
			ARM_NPC = TMP_END_ADDR;
		else
			ARM_GPR[13] = TMP_END_ADDR;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_POPS__LB_SS_RB__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int8_t TMP_SETBIT;
	uint8_t TMP_IMM;
	uint16_t TMP_REGLIST;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REGLIST = ARM_POPS__LB_SS_RB__0_i_x_llist_r;
		TMP_IMM = ((uint8_t)(0));
		TMP_SETBIT = ((int8_t)(0));
gliss_POPS__LB_SS_RB__0_0_:
		if((((uint32_t)(TMP_IMM)) < 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1)))))
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_POPS__LB_SS_RB__0_0_;
		}
		TMP_REGLIST = ARM_POPS__LB_SS_RB__0_i_x_llist_r;
		TMP_START_ADDR = ARM_GPR[13];
		TMP_END_ADDR = ((uint32_t)((((int32_t)(TMP_START_ADDR)) + ((((int32_t)(1)) + ((int32_t)(TMP_SETBIT))) * ((int32_t)(4))))));
		TMP_IMM = ((uint8_t)(0));
gliss_POPS__LB_SS_RB__0_1_:
		if((((uint32_t)(TMP_IMM)) < 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				if((((uint32_t)(TMP_IMM)) == 15))
					ARM_NPC = arm_mem_read32(ARM_M, TMP_START_ADDR);
				else
					ARM_GPR[TMP_IMM] = arm_mem_read32(ARM_M, TMP_START_ADDR);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_POPS__LB_SS_RB__0_1_;
		}
		if((1 == 1)) {
			TMP_REG1 = ((int32_t)(arm_mem_read32(ARM_M, TMP_START_ADDR)));
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 0), 5, 5);
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_APSR, 5), 5, 5);
			ARM_NPC = arm_concat32(arm_field32(arm_mem_read32(ARM_M, TMP_START_ADDR), 31, 1), 0, 31, 1);
		}
		if((13 == 15))
			ARM_NPC = TMP_END_ADDR;
		else
			ARM_GPR[13] = TMP_END_ADDR;
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ORRS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)((ARM_GPR[ARM_ORRS_RD__RD_i_x_rd_ro] | ARM_GPR[ARM_ORRS_RD__RD_i_x_rm_ro])));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_ORRS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSBS_RD__RD___I0_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSBS_RD__RD___I0_i_x_rm_ro]));
		TMP_SWORD = (((int32_t)(0)) - TMP_REG1);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_SWORD, 31), 31, 31);
		if((TMP_SWORD == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_RSBS_RD__RD___I0_i_x_rd_ro] = ((uint32_t)(TMP_SWORD));
		if(((((uint32_t)(arm_bit32(0, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0) && (((uint32_t)(arm_bit32(0, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(0, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(0, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MVNS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(~ARM_GPR[ARM_MVNS_RD__RD_i_x_rm_ro]));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_MVNS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MULS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_MULS_RD__RD_i_x_rd_ro]));
		TMP_REG1 = (((int32_t)(ARM_GPR[ARM_MULS_RD__RD_i_x_rm_ro])) * TMP_REG1);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_MULS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LSRS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM2;
	int32_t TMP_REG1;
	uint8_t TMP_IMM;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_IMM = arm_field32(ARM_GPR[ARM_LSRS_RD__RD_i_x_rs_ro], 7, 0);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LSRS_RD__RD_i_x_rd_ro]));
		if((((uint32_t)(TMP_IMM)) == 0))
			;
		else {
			if((((uint32_t)(TMP_IMM)) < 32)) {
				TMP_IMM2 = ((uint8_t)((((uint32_t)(TMP_IMM)) - 1)));
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(TMP_REG1, TMP_IMM2, TMP_IMM2, 1 ))), 29, 29);
				TMP_REG1 = ((int32_t)((TMP_REG1 >> TMP_IMM)));
			}
			else {
				if((((uint32_t)(TMP_IMM)) == 32)) {
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 29, 29);
					TMP_REG1 = ((int32_t)(0));
				}
				else {
					if((((uint32_t)(TMP_IMM)) > 32)) {
						ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 29, 29);
						TMP_REG1 = ((int32_t)(0));
					}
				}
			}
		}
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_LSRS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LSRS_RD__RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint8_t __gtmp_35;
	uint8_t __gtmp_34;
	uint8_t __gtmp_33;
	uint8_t __gtmp_32;
	uint8_t __gtmp_31;
	uint8_t __gtmp_30;
	uint8_t __gtmp_29;
	uint8_t __gtmp_28;
	uint8_t __gtmp_27;
	uint8_t __gtmp_26;
	uint8_t __gtmp_25;
	uint8_t __gtmp_24;
	uint8_t __gtmp_23;
	uint8_t __gtmp_22;
	uint8_t __gtmp_21;
	uint8_t __gtmp_20;
	uint8_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t result;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
			if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_25 = 1;
					else
						__gtmp_25 = 0;
					__gtmp_18 = __gtmp_25;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_24 = 1;
					else
						__gtmp_24 = 0;
					__gtmp_18 = __gtmp_24;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_23 = 1;
					else
						__gtmp_23 = 0;
					__gtmp_18 = __gtmp_23;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_22 = 1;
					else
						__gtmp_22 = 0;
					__gtmp_18 = __gtmp_22;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_21 = 1;
					else
						__gtmp_21 = 0;
					__gtmp_18 = __gtmp_21;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_20 = 1;
					else
						__gtmp_20 = 0;
					__gtmp_18 = __gtmp_20;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_19 = 1;
					else
						__gtmp_19 = 0;
					__gtmp_18 = __gtmp_19;
					break;
				case 7:
					__gtmp_18 = 1;
					break;
				}
				__gtmp_34 = !__gtmp_18;
			}
			else {
				switch(arm_field8(ARM_ITSTATE, 7, 5)) {
				case 0:
					if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
						__gtmp_33 = 1;
					else
						__gtmp_33 = 0;
					__gtmp_26 = __gtmp_33;
					break;
				case 1:
					if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
						__gtmp_32 = 1;
					else
						__gtmp_32 = 0;
					__gtmp_26 = __gtmp_32;
					break;
				case 2:
					if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
						__gtmp_31 = 1;
					else
						__gtmp_31 = 0;
					__gtmp_26 = __gtmp_31;
					break;
				case 3:
					if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
						__gtmp_30 = 1;
					else
						__gtmp_30 = 0;
					__gtmp_26 = __gtmp_30;
					break;
				case 4:
					if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_29 = 1;
					else
						__gtmp_29 = 0;
					__gtmp_26 = __gtmp_29;
					break;
				case 5:
					if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
						__gtmp_28 = 1;
					else
						__gtmp_28 = 0;
					__gtmp_26 = __gtmp_28;
					break;
				case 6:
					if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
						__gtmp_27 = 1;
					else
						__gtmp_27 = 0;
					__gtmp_26 = __gtmp_27;
					break;
				case 7:
					__gtmp_26 = 1;
					break;
				}
				__gtmp_34 = __gtmp_26;
			}
			__gtmp_35 = __gtmp_34;
		}
		else
			__gtmp_35 = 1;
		if(__gtmp_35) {
			if((ARM_LSRS_RD__RD___ID_i_x_imm5_n == 0))
				__gtmp_36 = 32;
			else
				__gtmp_36 = ((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_imm5_n));
			result = (ARM_GPR[(((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_rm_ro)) + 0)] >> __gtmp_36);
			if(!(((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(result, 31), 31, 31);
				ARM_APSR = arm_set_field32(ARM_APSR, (result == 0), 30, 30);
				if((ARM_LSRS_RD__RD___ID_i_x_imm5_n == 0))
					__gtmp_37 = 32;
				else
					__gtmp_37 = ((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_imm5_n));
				if((ARM_LSRS_RD__RD___ID_i_x_imm5_n == 0))
					__gtmp_38 = 32;
				else
					__gtmp_38 = ((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_imm5_n));
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[(((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_rm_ro)) + 0)], (__gtmp_37 - 1), (__gtmp_38 - 1), 1 ))), 29, 29);
			}
			ARM_GPR[(((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_rd_ro)) + 0)] = result;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LSLS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM2;
	int32_t TMP_REG1;
	uint8_t TMP_IMM;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_IMM = arm_field32(ARM_GPR[ARM_LSLS_RD__RD_i_x_rs_ro], 7, 0);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LSLS_RD__RD_i_x_rd_ro]));
		if((((uint32_t)(TMP_IMM)) == 0))
			;
		else {
			if((((uint32_t)(TMP_IMM)) < 32)) {
				TMP_IMM2 = ((uint8_t)((32 - ((uint32_t)(TMP_IMM)))));
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(TMP_REG1, TMP_IMM2, TMP_IMM2, 1 ))), 29, 29);
				TMP_REG1 = ((int32_t)((TMP_REG1 << TMP_IMM)));
			}
			else {
				if((((uint32_t)(TMP_IMM)) == 32)) {
					ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 0), 29, 29);
					TMP_REG1 = ((int32_t)(0));
				}
				else {
					if((((uint32_t)(TMP_IMM)) > 32)) {
						ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 29, 29);
						TMP_REG1 = ((int32_t)(0));
					}
				}
			}
		}
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_LSLS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LSLS_RD__RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	uint8_t TMP_IMM;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((ARM_LSLS_RD__RD___ID_i_x_imm_n == 0))
			TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LSLS_RD__RD___ID_i_x_rm_ro]));
		else {
			TMP_IMM = ((uint8_t)((32 - ((uint32_t)(ARM_LSLS_RD__RD___ID_i_x_imm_n)))));
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_LSLS_RD__RD___ID_i_x_rm_ro], TMP_IMM, TMP_IMM, 1 ))), 29, 29);
			TMP_REG1 = ((int32_t)((ARM_GPR[ARM_LSLS_RD__RD___ID_i_x_rm_ro] << ARM_LSLS_RD__RD___ID_i_x_imm_n)));
		}
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_LSLS_RD__RD___ID_i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSHS_RD___LT_RD__RD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	uint16_t TMP_REGLIST;
	int32_t TMP_REG2;
	uint8_t TMP_BIT;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rn_ro] + ARM_GPR[ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rm_ro]);
		TMP_BIT = arm_bit32(TMP_START_ADDR, 0);
		if((((uint32_t)(TMP_BIT)) == 0)) {
			TMP_REGLIST = arm_mem_read16(ARM_M, TMP_START_ADDR);
			TMP_BIT = arm_bit16(TMP_REGLIST, 15);
			if((((uint32_t)(TMP_BIT)) == 1)) {
				TMP_REG1 = ((int32_t)(0xffffffffLU));
				TMP_REG1 = ((int32_t)((TMP_REG1 << 16)));
				TMP_REG2 = (TMP_REG1 + ((int32_t)(TMP_REGLIST)));
			}
			else
				TMP_REG2 = ((int32_t)(TMP_REGLIST));
		}
		else
			TMP_REG2 = ((int32_t)(0xffffffffLU));
		ARM_GPR[ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rd_ro] = ((uint32_t)(TMP_REG2));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSBS_RD___LT_RD__RD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	int32_t TMP_REG2;
	uint8_t TMP_BIT;
	uint8_t TMP_IMM;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rn_ro] + ARM_GPR[ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rm_ro]);
		TMP_IMM = arm_mem_read8(ARM_M, TMP_START_ADDR);
		TMP_BIT = arm_bit8(TMP_IMM, 7);
		if((((uint32_t)(TMP_BIT)) == 1)) {
			TMP_REG1 = ((int32_t)(0xffffffffLU));
			TMP_REG1 = ((int32_t)((TMP_REG1 << 8)));
			TMP_REG2 = (TMP_REG1 + ((int32_t)(TMP_IMM)));
		}
		else
			TMP_REG2 = ((int32_t)(TMP_IMM));
		ARM_GPR[ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rd_ro] = ((uint32_t)(TMP_REG2));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRHS_RD___LT_RD__RD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t TMP_REGLIST;
	uint8_t TMP_BIT;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rn_ro] + ARM_GPR[ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rm_ro]);
		TMP_BIT = arm_bit32(TMP_START_ADDR, 0);
		if((((uint32_t)(TMP_BIT)) == 0))
			TMP_REGLIST = arm_mem_read16(ARM_M, TMP_START_ADDR);
		else
			TMP_REGLIST = ((uint16_t)(0xffffffffLU));
		ARM_GPR[ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rd_ro] = ((uint32_t)(TMP_REGLIST));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRHS_RD___LT_RD___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint16_t TMP_REGLIST;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_rn_ro] + (((uint32_t)(ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_imm_n)) * 2));
		TMP_REGLIST = arm_mem_read16(ARM_M, TMP_START_ADDR);
		ARM_GPR[ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_rd_ro] = ((uint32_t)(TMP_REGLIST));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRBS_RD___LT_RD__RD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rn_ro] + ARM_GPR[ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rm_ro]);
		TMP_IMM = arm_mem_read8(ARM_M, TMP_START_ADDR);
		ARM_GPR[ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rd_ro] = ((uint32_t)(TMP_IMM));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRBS_RD___LT_RD___ID_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_LDRBS_RD___LT_RD___ID_RT__i_x_rn_ro] + ((uint32_t)(ARM_LDRBS_RD___LT_RD___ID_RT__i_x_imm_n)));
		TMP_IMM = arm_mem_read8(ARM_M, TMP_START_ADDR);
		ARM_GPR[ARM_LDRBS_RD___LT_RD___ID_RT__i_x_rd_ro] = ((uint32_t)(TMP_IMM));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRS_RD___LT_SP___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[13] + (((uint32_t)(ARM_LDRS_RD___LT_SP___I0XX_RT__i_x_imm_n)) << 2));
		if(((TMP_START_ADDR & 3) == 0))
			TMP_REG1 = ((int32_t)(arm_mem_read32(ARM_M, TMP_START_ADDR)));
		else
			TMP_REG1 = ((int32_t)(0xffffffffLU));
		ARM_GPR[ARM_LDRS_RD___LT_SP___I0XX_RT__i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRS_RD___LT_PC___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = ((ARM_GPR[15] & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_LDRS_RD___LT_PC___I0XX_RT__i_x_imm_n, 0, 8, 2))));
		ARM_GPR[ARM_LDRS_RD___LT_PC___I0XX_RT__i_x_rd_ro] = arm_mem_read32(ARM_M, TMP_START_ADDR);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRS_RD___LT_RD__RD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_LDRS_RD___LT_RD__RD_RT__i_x_rn_ro] + ARM_GPR[ARM_LDRS_RD___LT_RD__RD_RT__i_x_rm_ro]);
		if(((TMP_START_ADDR & 3) == 0))
			TMP_REG1 = ((int32_t)(arm_mem_read32(ARM_M, TMP_START_ADDR)));
		else
			TMP_REG1 = ((int32_t)(0xffffffffLU));
		ARM_GPR[ARM_LDRS_RD___LT_RD__RD_RT__i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRS_RD___LT_RD___I0XX_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	uint32_t TMP_START_ADDR;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_START_ADDR = (ARM_GPR[ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_rn_ro] + (((uint32_t)(ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_imm_n)) * 4));
		if(((TMP_START_ADDR & 3) == 0))
			TMP_REG1 = ((int32_t)(arm_mem_read32(ARM_M, TMP_START_ADDR)));
		else
			TMP_REG1 = ((int32_t)(0xffffffffLU));
		ARM_GPR[ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDMIAS_RD___LB_S_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int32_t TMP_REG1;
	int8_t TMP_SETBIT;
	uint8_t TMP_IMM;
	uint16_t TMP_REGLIST;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REGLIST = ARM_LDMIAS_RD___LB_S_RB__i_x_llist_r;
		TMP_IMM = ((uint8_t)(0));
		TMP_SETBIT = ((int8_t)(0));
		ARM_B15SET = ((uint8_t)(0));
gliss_LDMIAS_RD___LB_S_RB__0_:
		if((((uint32_t)(TMP_IMM)) != 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
				if((((uint32_t)(TMP_IMM)) == 7))
					ARM_B15SET = ((uint8_t)(1));
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_LDMIAS_RD___LB_S_RB__0_;
		}
		TMP_REGLIST = ARM_LDMIAS_RD___LB_S_RB__i_x_llist_r;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDMIAS_RD___LB_S_RB__i_x_rn_ro]));
		ARM_GPR[ARM_LDMIAS_RD___LB_S_RB__i_x_rn_ro] = ((uint32_t)((TMP_REG1 + (((int32_t)(TMP_SETBIT)) * ((int32_t)(4))))));
		TMP_START_ADDR = ((uint32_t)(TMP_REG1));
		TMP_END_ADDR = ((uint32_t)(((TMP_REG1 + (((int32_t)(TMP_SETBIT)) * ((int32_t)(4)))) - ((int32_t)(4)))));
		TMP_IMM = ((uint8_t)(0));
gliss_LDMIAS_RD___LB_S_RB__1_:
		if((((uint32_t)(TMP_IMM)) != 8)) {
			if((TMP_REGLIST & ((uint16_t)((1 == 1))))) {
				ARM_GPR[TMP_IMM] = arm_mem_read32(ARM_M, TMP_START_ADDR);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_IMM = ((uint8_t)((((uint32_t)(TMP_IMM)) + 1)));
goto gliss_LDMIAS_RD___LB_S_RB__1_;
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_EORS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_EORS_RD__RD_i_x_rd_ro]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_EORS_RD__RD_i_x_rm_ro]));
		TMP_SWORD = ((int32_t)((TMP_REG2 ^ TMP_REG1)));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_SWORD, 31), 31, 31);
		if((TMP_SWORD == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_EORS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_SWORD));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMPS_RD__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t result;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((((uint32_t)(ARM_CMPS_RD__S_i_x_H)) == 1))
			__gtmp_18 = 8;
		else
			__gtmp_18 = 0;
		TMP_REG1 = ((int32_t)(ARM_GPR[(((uint32_t)(ARM_CMPS_RD__S_i_x_rn_ro)) + __gtmp_18)]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_CMPS_RD__S_i_x_rm_r]));
		result = ((uint32_t)(((TMP_REG1 + ~TMP_REG2) + ((int32_t)(1)))));
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)))
			__gtmp_21 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
				__gtmp_20 = 1;
			else {
				if(((((uint32_t)(arm_bit32(result, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_19 = 1;
				else
					__gtmp_19 = 0;
				__gtmp_20 = __gtmp_19;
			}
			__gtmp_21 = __gtmp_20;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_21)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
			__gtmp_23 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(result, 31))) == 1)))
				__gtmp_22 = 1;
			else
				__gtmp_22 = 0;
			__gtmp_23 = __gtmp_22;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_23)), 28, 28);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(result, 31), 31, 31);
		ARM_APSR = arm_set_field32(ARM_APSR, (result == 0), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMPS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t result;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		result = ((ARM_GPR[ARM_CMPS_RD__RD_i_x_rn_ro] + ~ARM_GPR[ARM_CMPS_RD__RD_i_x_rm_ro]) + 1);
		if(((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_RD__RD_i_x_rn_ro], 31))) == 1) && (((uint32_t)(arm_bit32(~ARM_GPR[ARM_CMPS_RD__RD_i_x_rm_ro], 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~ARM_GPR[ARM_CMPS_RD__RD_i_x_rm_ro], 31))) == 1) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(result, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_RD__RD_i_x_rn_ro], 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_RD__RD_i_x_rn_ro], 31))) == 1) && (((uint32_t)(arm_bit32(~ARM_GPR[ARM_CMPS_RD__RD_i_x_rm_ro], 31))) == 1)) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_RD__RD_i_x_rn_ro], 31))) == 0) && (((uint32_t)(arm_bit32(~ARM_GPR[ARM_CMPS_RD__RD_i_x_rm_ro], 31))) == 0)) && (((uint32_t)(arm_bit32(result, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(result, 31), 31, 31);
		ARM_APSR = arm_set_field32(ARM_APSR, (result == 0), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMPS_RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t result;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		result = ((ARM_GPR[ARM_CMPS_RD___ID_i_x_rn_ro] + ~((uint32_t)(ARM_CMPS_RD___ID_i_x_imm_n))) + 1);
		if(((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_RD___ID_i_x_rn_ro], 31))) == 1) && (((uint32_t)(arm_bit32(~((uint32_t)(ARM_CMPS_RD___ID_i_x_imm_n)), 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~((uint32_t)(ARM_CMPS_RD___ID_i_x_imm_n)), 31))) == 1) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(result, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_RD___ID_i_x_rn_ro], 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_RD___ID_i_x_rn_ro], 31))) == 1) && (((uint32_t)(arm_bit32(~((uint32_t)(ARM_CMPS_RD___ID_i_x_imm_n)), 31))) == 1)) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_RD___ID_i_x_rn_ro], 31))) == 0) && (((uint32_t)(arm_bit32(~((uint32_t)(ARM_CMPS_RD___ID_i_x_imm_n)), 31))) == 0)) && (((uint32_t)(arm_bit32(result, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(result, 31), 31, 31);
		ARM_APSR = arm_set_field32(ARM_APSR, (result == 0), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMNS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_CMNS_RD__RD_i_x_rn_ro]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_CMNS_RD__RD_i_x_rm_ro]));
		Temp = ((uint32_t)((TMP_REG1 + TMP_REG2)));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CBZS_RD__D_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((ARM_CBZS_RD__D_i_x_op_ ^ ((uint8_t)((ARM_GPR[(ARM_CBZS_RD__D_i_x_rn_ro + 0)] == 0))))) {
			if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
				ARM_NPC = arm_concat32(arm_field32((ARM_GPR[15] + ((uint32_t)(arm_concat8(arm_concat8(ARM_CBZS_RD__D_i_x_i, ARM_CBZS_RD__D_i_x_imm5, 1, 5), 0, 6, 1)))), 31, 2), 0, 30, 2);
			else {
				if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
					if(0)
						ARM_NPC = arm_field32((ARM_GPR[15] + ((uint32_t)(arm_concat8(arm_concat8(ARM_CBZS_RD__D_i_x_i, ARM_CBZS_RD__D_i_x_imm5, 1, 5), 0, 6, 1)))), 31, 0);
					else {
						newaddress = (ARM_GPR[15] + ((uint32_t)(arm_concat8(arm_concat8(ARM_CBZS_RD__D_i_x_i, ARM_CBZS_RD__D_i_x_imm5, 1, 5), 0, 6, 1))));
						ARM_NPC = newaddress;
					}
				}
				else
					ARM_NPC = arm_concat32(arm_field32((ARM_GPR[15] + ((uint32_t)(arm_concat8(arm_concat8(ARM_CBZS_RD__D_i_x_i, ARM_CBZS_RD__D_i_x_imm5, 1, 5), 0, 6, 1)))), 31, 1), 0, 31, 1);
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BXS_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BXS_S_i_x_rm_r]));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 0), 5, 5);
		ARM_NPC = (((uint32_t)(arm_field32(TMP_REG1, 31, 1))) << 1);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BLXS_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((14 == 15))
			ARM_NPC = ((ARM_BLXS_S___IADDR + 2) | 1);
		else
			ARM_GPR[14] = ((ARM_BLXS_S___IADDR + 2) | 1);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BLXS_S_i_x_rm_r]));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 0), 5, 5);
		ARM_NPC = (((uint32_t)(TMP_REG1)) & 0xfffffffeLU);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BKPT__ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BICS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BICS_RD__RD_i_x_rd_ro]));
		ARM_GPR[ARM_BICS_RD__RD_i_x_rd_ro] = (TMP_REG1 & TMP_REG2);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[ARM_BICS_RD__RD_i_x_rd_ro], 31), 31, 31);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BICS_RD__RD_i_x_rd_ro]));
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BS_N__40_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		ARM_NPC = arm_concat32(arm_field32((((int32_t)((ARM_BS_N__40___IADDR + 4))) + __ARM_EXTS16(20, ((int32_t)(arm_concat16(ARM_BS_N__40_i_x_imm11, arm_bit32(0, 0), 11, 1))))), 31, 1), 0, 31, 1);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_S_N_08X_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	uint8_t TMP_IMM;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((((uint32_t)(ARM_S_N_08X_i_x_cond)) == 15))
			swi_impl(ARM_S_N_08X_i_x_simm_n);
		else {
			switch(ARM_S_N_08X_i_x_cond) {
			case 0:
				__gtmp_18 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
				break;
			case 1:
				__gtmp_18 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
				break;
			case 2:
				__gtmp_18 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
				break;
			case 3:
				__gtmp_18 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
				break;
			case 4:
				__gtmp_18 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
				break;
			case 5:
				__gtmp_18 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
				break;
			case 6:
				__gtmp_18 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
				break;
			case 7:
				__gtmp_18 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
				break;
			case 8:
				__gtmp_18 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
				break;
			case 9:
				__gtmp_18 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
				break;
			case 10:
				__gtmp_18 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
				break;
			case 11:
				__gtmp_18 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
				break;
			case 12:
				__gtmp_18 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
				break;
			case 13:
				__gtmp_18 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
				break;
			case 14:
				__gtmp_18 = (1 == 1);
				break;
			case 15:
				__gtmp_18 = (1 == 0);
				break;
			}
			if(__gtmp_18) {
				TMP_REG1 = ((int32_t)((ARM_S_N_08X___IADDR + 4)));
				TMP_IMM = ((uint8_t)((((int32_t)(ARM_S_N_08X_i_x_simm_n)) << 1)));
				TMP_REG2 = (TMP_REG1 + ((int32_t)(TMP_IMM)));
				ARM_NPC = ((uint32_t)(TMP_REG2));
			}
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ASRS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_IMM2;
	int32_t TMP_REG1;
	uint8_t TMP_IMM;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_IMM = arm_field32(ARM_GPR[ARM_ASRS_RD__RD_i_x_rs_ro], 7, 0);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ASRS_RD__RD_i_x_rd_ro]));
		if((((uint32_t)(TMP_IMM)) == 0))
			;
		else {
			if((((uint32_t)(TMP_IMM)) < 32)) {
				TMP_IMM2 = ((uint8_t)((((uint32_t)(TMP_IMM)) - 1)));
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(ARM_GPR[ARM_ASRS_RD__RD_i_x_rd_ro], TMP_IMM2, TMP_IMM2, 1 ))), 29, 29);
				ARM_GPR[ARM_ASRS_RD__RD_i_x_rd_ro] = (TMP_REG1 >> TMP_IMM);
			}
			else {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 29, 29);
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0))
					ARM_GPR[ARM_ASRS_RD__RD_i_x_rd_ro] = 0;
				else
					ARM_GPR[ARM_ASRS_RD__RD_i_x_rd_ro] = 0xffffffffLU;
			}
		}
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_GPR[ARM_ASRS_RD__RD_i_x_rd_ro], 31), 31, 31);
		if((ARM_GPR[ARM_ASRS_RD__RD_i_x_rd_ro] == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ASRS_RD__RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t TMP_BIT;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ASRS_RD__RD___ID_i_x_rm_ro]));
		if((ARM_ASRS_RD__RD___ID_i_x_imm_n == 0)) {
			TMP_BIT = arm_bit32(TMP_REG1, 31);
			if((((uint32_t)(TMP_BIT)) == 0))
				TMP_REG2 = ((int32_t)(0));
			else
				TMP_REG2 = ((int32_t)(0xffffffffLU));
		}
		else {
			TMP_REG2 = ((int32_t)((TMP_REG1 >> ARM_ASRS_RD__RD___ID_i_x_imm_n)));
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(arm_field32_generic(TMP_REG1, (((uint32_t)(ARM_ASRS_RD__RD___ID_i_x_imm_n)) - 1), (((uint32_t)(ARM_ASRS_RD__RD___ID_i_x_imm_n)) - 1), 1 ))), 29, 29);
		}
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG2, 31), 31, 31);
		ARM_APSR = arm_set_field32(ARM_APSR, (TMP_REG2 == ((int32_t)(0))), 30, 30);
		ARM_GPR[ARM_ASRS_RD__RD___ID_i_x_rd_ro] = ((uint32_t)(TMP_REG2));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ANDS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)((ARM_GPR[ARM_ANDS_RD__RD_i_x_rd_ro] & ARM_GPR[ARM_ANDS_RD__RD_i_x_rm_ro])));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		ARM_GPR[ARM_ANDS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_REG1));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDS_S__S_i_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDS_S__S_i_x_rd_r]));
		if((ARM_ADDS_S__S_i_x_rd_r == 15))
			ARM_NPC = ((uint32_t)((TMP_REG2 + TMP_REG1)));
		else
			ARM_GPR[ARM_ADDS_S__S_i_x_rd_r] = ((uint32_t)((TMP_REG2 + TMP_REG1)));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDS_RD__RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDS_RD__RD__RD_i_x_rm_ro]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDS_RD__RD__RD_i_x_rn_ro]));
		TMP_SWORD = (TMP_REG2 + TMP_REG1);
		ARM_GPR[ARM_ADDS_RD__RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_SWORD));
		if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDS_RD__RD__RD_i_x_rd_ro]));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDS_SP__SP___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		if((13 == 15))
			ARM_NPC = (ARM_GPR[13] + (((uint32_t)(ARM_ADDS_SP__SP___ID_i_x_imm_n)) << 2));
		else
			ARM_GPR[13] = (ARM_GPR[13] + (((uint32_t)(ARM_ADDS_SP__SP___ID_i_x_imm_n)) << 2));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDS_RD__SP___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		ARM_GPR[ARM_ADDS_RD__SP___ID_i_x_rd_ro] = (ARM_GPR[13] + (((uint32_t)(ARM_ADDS_RD__SP___ID_i_x_imm_n)) << 2));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDS_RD__PC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		ARM_GPR[ARM_ADDS_RD__PC___ID_i_x_rd_ro] = (((ARM_ADDS_RD__PC___ID___IADDR + 4) & 0xfffffffcLU) + (((uint32_t)(ARM_ADDS_RD__PC___ID_i_x_imm_n)) << 2));
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDS_RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t overflow;
	uint8_t carry;
	uint32_t result;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		result = ((ARM_GPR[(ARM_ADDS_RD___ID_i_x_rd_ro + 0)] + ((uint32_t)(ARM_ADDS_RD___ID_i_x_imm_n))) + 0);
		if(((((uint32_t)(arm_bit32(ARM_GPR[(ARM_ADDS_RD___ID_i_x_rd_ro + 0)], 31))) == 1) && (((uint32_t)(arm_bit32(((uint32_t)(ARM_ADDS_RD___ID_i_x_imm_n)), 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(((uint32_t)(ARM_ADDS_RD___ID_i_x_imm_n)), 31))) == 1) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(result, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_GPR[(ARM_ADDS_RD___ID_i_x_rd_ro + 0)], 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		carry = (0 != (__gtmp_20));
		if((((((uint32_t)(arm_bit32(ARM_GPR[(ARM_ADDS_RD___ID_i_x_rd_ro + 0)], 31))) == 1) && (((uint32_t)(arm_bit32(((uint32_t)(ARM_ADDS_RD___ID_i_x_imm_n)), 31))) == 1)) && (((uint32_t)(arm_bit32(result, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(ARM_GPR[(ARM_ADDS_RD___ID_i_x_rd_ro + 0)], 31))) == 0) && (((uint32_t)(arm_bit32(((uint32_t)(ARM_ADDS_RD___ID_i_x_imm_n)), 31))) == 0)) && (((uint32_t)(arm_bit32(result, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		overflow = (0 != (__gtmp_22));
		ARM_GPR[(ARM_ADDS_RD___ID_i_x_rd_ro + 0)] = result;
		if(!(((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(result, 31), 31, 31);
			ARM_APSR = arm_set_field32(ARM_APSR, (result == 0), 30, 30);
			ARM_APSR = arm_set_field32(ARM_APSR, carry, 29, 29);
			ARM_APSR = arm_set_field32(ARM_APSR, overflow, 28, 28);
		}
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDS_RD__RD___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDS_RD__RD___ID_i_x_rn_ro]));
		TMP_SWORD = (TMP_REG2 + __ARM_EXTS8(29, ((int32_t)(ARM_ADDS_RD__RD___ID_i_x_imm_n))));
		ARM_GPR[ARM_ADDS_RD__RD___ID_i_x_rd_ro] = ((uint32_t)(TMP_SWORD));
		if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit8(ARM_ADDS_RD__RD___ID_i_x_imm_n, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit8(ARM_ADDS_RD__RD___ID_i_x_imm_n, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit8(ARM_ADDS_RD__RD___ID_i_x_imm_n, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit8(ARM_ADDS_RD__RD___ID_i_x_imm_n, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_SWORD, 31), 31, 31);
		if((TMP_SWORD == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADCS_RD__RD_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	//no_collect_regs();
	ARM_NPC = (ARM_GPR[15] + 2);
	ARM_GPR[15] = (ARM_GPR[15] + 4);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		//do_collect_regs();
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADCS_RD__RD_i_x_rd_ro]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADCS_RD__RD_i_x_rn_ro]));
		TMP_SWORD = ((TMP_REG2 + TMP_REG1) + __ARM_EXTS8(31, ((int32_t)(arm_bit32(ARM_APSR, 29)))));
		ARM_GPR[ARM_ADCS_RD__RD_i_x_rd_ro] = ((uint32_t)(TMP_SWORD));
		if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
			__gtmp_20 = 1;
		else {
			if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
				__gtmp_19 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
					__gtmp_18 = 1;
				else
					__gtmp_18 = 0;
				__gtmp_19 = __gtmp_18;
			}
			__gtmp_20 = __gtmp_19;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_20)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 0)))
			__gtmp_22 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
				__gtmp_21 = 1;
			else
				__gtmp_21 = 0;
			__gtmp_22 = __gtmp_21;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_22)), 28, 28);
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADCS_RD__RD_i_x_rd_ro]));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
		if((TMP_REG1 == ((int32_t)(0))))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	if((((uint32_t)(arm_field8(ARM_ITSTATE, 3, 0))) != 0)) {
		if((((uint32_t)(arm_field8(ARM_ITSTATE, 2, 0))) == 0))
			ARM_ITSTATE = ((uint8_t)(0));
		else
			ARM_ITSTATE = arm_set_field8(ARM_ITSTATE, ((uint8_t)(__ARM_MASK32(5, (arm_field8(ARM_ITSTATE, 4, 0) << 1)))), 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MRCS_D__D__S__CRD__CRD__D_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDCSSS_D__D___LT_RD_RT___D_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDCSSS_D__D___LT_RD_RT____ISD_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDCSSS_D__D___LT_RD___ISD_RT__21_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDCSSS_D__D___LT_RD___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STCSSS_D__D___LT_RD_RT___D_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STCSSS_D__D___LT_RD_RT____ISD_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STCSSS_D__D___LT_RD___ISD_RT__21_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STCSSS_D__D___LT_RD___ISD_RT__code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSTRS_SD___LT_S___ISD_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_U)
			__gtmp_18 = (ARM_GPR[(((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Rn_r)) + 0)] + ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2))));
		else
			__gtmp_18 = (ARM_GPR[(((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Rn_r)) + 0)] - ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2))));
		address = __gtmp_18;
		if(1)
			arm_mem_write32(ARM_M, address, arm_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1)))], 31, 0));
		else {
			arm_mem_write32(ARM_M, address, arm_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1)))], 31, 0));
			arm_mem_write32(ARM_M, (address + 4), arm_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1)))], 63, 32));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSTRS_DD___LT_S___ISD_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t address;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_U)
			__gtmp_18 = (ARM_GPR[(((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Rn_r)) + 0)] + ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2))));
		else
			__gtmp_18 = (ARM_GPR[(((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Rn_r)) + 0)] - ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2))));
		address = __gtmp_18;
		if(0)
			arm_mem_write32(ARM_M, address, arm_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4)))], 31, 0));
		else {
			arm_mem_write32(ARM_M, address, arm_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4)))], 31, 0));
			arm_mem_write32(ARM_M, (address + 4), arm_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4)))], 63, 32));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSTMSSS_SS___LB_S_RB__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17)
		;
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSTMSSS_SS___LB_S_RB__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17)
		;
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSTMSSS_SS___LB_S_RB__1_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17)
		;
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSTMSSS_SS___LB_S_RB__2_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17)
		;
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMULS_F64_DD__DD__DD_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMULS_F32_SD__SD__SD_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMUL_F32_QD__QD__QD_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMUL_F32_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_DD__S__S_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_SD__S_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if(ARM_VMOVS_SD__S_0_x_op_)
			ARM_GPR[(((uint32_t)(ARM_VMOVS_SD__S_0_x_Rt_r)) + 0)] = arm_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_SD__S_0_x_Vn__r, ARM_VMOVS_SD__S_0_x_Vn__p, 4, 1)))], 31, 0);
		else
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_SD__S_0_x_Vn__r, ARM_VMOVS_SD__S_0_x_Vn__p, 4, 1)))] = arm_set_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_SD__S_0_x_Vn__r, ARM_VMOVS_SD__S_0_x_Vn__p, 4, 1)))], ARM_GPR[(((uint32_t)(ARM_VMOVS_SD__S_0_x_Rt_r)) + 0)], 31, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_F64_DD__DD_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t r_;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if(0)
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD__DD_0_x_x_Vd__p, ARM_VMOVS_F64_DD__DD_0_x_x_Vd__r, 1, 4)))] = ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD__DD_0_x_x_Vm__p, ARM_VMOVS_F64_DD__DD_0_x_x_Vm__r, 1, 4)))];
		else {
			r_ = ((uint8_t)(0));
gliss_VMOVS_F64_DD__DD_0_0_:
			if((((uint32_t)(r_)) <= (1 - 1))) {
				ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD__DD_0_x_x_Vd__p, ARM_VMOVS_F64_DD__DD_0_x_x_Vd__r, 1, 4))) + ((uint32_t)(r_)))] = ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD__DD_0_x_x_Vm__p, ARM_VMOVS_F64_DD__DD_0_x_x_Vm__r, 1, 4))) + ((uint32_t)(r_)))];
				r_ = ((uint8_t)((((uint32_t)(r_)) + 1)));
goto gliss_VMOVS_F64_DD__DD_0_0_;
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_F32_SD__SD_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t r_;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if(1)
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD__SD_0_x_x_Vd__r, ARM_VMOVS_F32_SD__SD_0_x_x_Vd__p, 4, 1)))] = ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD__SD_0_x_x_Vm__r, ARM_VMOVS_F32_SD__SD_0_x_x_Vm__p, 4, 1)))];
		else {
			r_ = ((uint8_t)(0));
gliss_VMOVS_F32_SD__SD_0_0_:
			if((((uint32_t)(r_)) <= (0 - 1))) {
				ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD__SD_0_x_x_Vd__r, ARM_VMOVS_F32_SD__SD_0_x_x_Vd__p, 4, 1))) + ((uint32_t)(r_)))] = ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD__SD_0_x_x_Vm__r, ARM_VMOVS_F32_SD__SD_0_x_x_Vm__p, 4, 1))) + ((uint32_t)(r_)))];
				r_ = ((uint8_t)((((uint32_t)(r_)) + 1)));
goto gliss_VMOVS_F32_SD__SD_0_0_;
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_F64_DD___ID_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t r_;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if(0)
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD___ID_0_x_x_Vd__p, ARM_VMOVS_F64_DD___ID_0_x_x_Vd__r, 1, 4)))] = ((float)(0));
		else {
			r_ = ((uint8_t)(0));
gliss_VMOVS_F64_DD___ID_0_0_:
			if((((uint32_t)(r_)) <= (1 - 1))) {
				ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F64_DD___ID_0_x_x_Vd__p, ARM_VMOVS_F64_DD___ID_0_x_x_Vd__r, 1, 4))) + ((uint32_t)(r_)))] = ((double)(arm_concat8(ARM_VMOVS_F64_DD___ID_0_x_x_imm4H, ARM_VMOVS_F64_DD___ID_0_x_x_imm4L, 4, 4)));
				r_ = ((uint8_t)((((uint32_t)(r_)) + 1)));
goto gliss_VMOVS_F64_DD___ID_0_0_;
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VMOVS_F32_SD___ID_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint8_t r_;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if(1)
			ARM_S[((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD___ID_0_x_x_Vd__r, ARM_VMOVS_F32_SD___ID_0_x_x_Vd__p, 4, 1)))] = ((float)(arm_concat8(ARM_VMOVS_F32_SD___ID_0_x_x_imm4H, ARM_VMOVS_F32_SD___ID_0_x_x_imm4L, 4, 4)));
		else {
			r_ = ((uint8_t)(0));
gliss_VMOVS_F32_SD___ID_0_0_:
			if((((uint32_t)(r_)) <= (0 - 1))) {
				ARM_D[(((uint32_t)(arm_concat8(ARM_VMOVS_F32_SD___ID_0_x_x_Vd__r, ARM_VMOVS_F32_SD___ID_0_x_x_Vd__p, 4, 1))) + ((uint32_t)(r_)))] = ((double)(0));
				r_ = ((uint8_t)((((uint32_t)(r_)) + 1)));
goto gliss_VMOVS_F32_SD___ID_0_0_;
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSS_F64_DD__DD__DD_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VSS_F32_SD__SD__SD_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VS_F32_QD__QD__QD_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VS_F32_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VLDRS_DD___LT_S___ISD_RT__1_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t word2;
	uint32_t word1;
	uint32_t address;
	uint32_t base;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if((((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Rn_r)) == 15))
			__gtmp_18 = (ARM_GPR[15] & ~(4 - 1));
		else
			__gtmp_18 = ARM_GPR[(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Rn_r)) + 0)];
		base = __gtmp_18;
		if(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_U)
			__gtmp_19 = (base + ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_imm8, 0, 8, 2))));
		else
			__gtmp_19 = (base - ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_imm8, 0, 8, 2))));
		address = __gtmp_19;
		if(1)
			ARM_S[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1)))] = arm_set_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1)))], arm_mem_read32(ARM_M, address), 31, 0);
		else {
			word1 = arm_mem_read32(ARM_M, address);
			word2 = arm_mem_read32(ARM_M, (address + 4));
			ARM_D[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1)))] = arm_set_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1)))], arm_concat64(word2, word1, 32, 32), 63, 0);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VLDRS_DD___LT_S___ISD_RT__2_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t word2;
	uint32_t word1;
	uint32_t address;
	uint32_t base;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if((((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Rn_r)) == 15))
			__gtmp_18 = (ARM_GPR[15] & ~(4 - 1));
		else
			__gtmp_18 = ARM_GPR[(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Rn_r)) + 0)];
		base = __gtmp_18;
		if(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_U)
			__gtmp_19 = (base + ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_imm8, 0, 8, 2))));
		else
			__gtmp_19 = (base - ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_imm8, 0, 8, 2))));
		address = __gtmp_19;
		if(0)
			ARM_S[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4)))] = arm_set_fieldf(ARM_S[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4)))], arm_mem_read32(ARM_M, address), 31, 0);
		else {
			word1 = arm_mem_read32(ARM_M, address);
			word2 = arm_mem_read32(ARM_M, (address + 4));
			ARM_D[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4)))] = arm_set_fieldd(ARM_D[((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4)))], arm_concat64(word2, word1, 32, 32), 63, 0);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VLDMDBS_S_21___LB_S_RB__code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VLDMIAS_SS___LB_S_RB__code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VLDMDBS_S_21___LB_S_RB__0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VLDMIAS_SS___LB_S_RB__0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VDIVS_F64_DD__DD__DD_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VDIVS_F32_SD__SD__SD_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VCVT_FD_FD_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if((((uint32_t)(ARM_VCVT_FD_FD_S__S_x_sz)) == 1)) {
			if((((uint32_t)(ARM_VCVT_FD_FD_S__S_x_sz)) == 1))
				__gtmp_20 = ((uint32_t)(arm_concat8(ARM_VCVT_FD_FD_S__S_x_M, ARM_VCVT_FD_FD_S__S_x_Vm, 1, 4)));
			else
				__gtmp_20 = ((uint32_t)(arm_concat8(ARM_VCVT_FD_FD_S__S_x_Vm, ARM_VCVT_FD_FD_S__S_x_M, 4, 1)));
			if((((uint32_t)(ARM_VCVT_FD_FD_S__S_x_sz)) == 1))
				__gtmp_21 = ((uint32_t)(arm_concat8(ARM_VCVT_FD_FD_S__S_x_Vd, ARM_VCVT_FD_FD_S__S_x_D_, 4, 1)));
			else
				__gtmp_21 = ((uint32_t)(arm_concat8(ARM_VCVT_FD_FD_S__S_x_D_, ARM_VCVT_FD_FD_S__S_x_Vd, 1, 4)));
			ARM_S[__gtmp_21] = ((float)(ARM_D[__gtmp_20]));
		}
		else {
			if((((uint32_t)(ARM_VCVT_FD_FD_S__S_x_sz)) == 1))
				__gtmp_18 = ((uint32_t)(arm_concat8(ARM_VCVT_FD_FD_S__S_x_M, ARM_VCVT_FD_FD_S__S_x_Vm, 1, 4)));
			else
				__gtmp_18 = ((uint32_t)(arm_concat8(ARM_VCVT_FD_FD_S__S_x_Vm, ARM_VCVT_FD_FD_S__S_x_M, 4, 1)));
			if((((uint32_t)(ARM_VCVT_FD_FD_S__S_x_sz)) == 1))
				__gtmp_19 = ((uint32_t)(arm_concat8(ARM_VCVT_FD_FD_S__S_x_Vd, ARM_VCVT_FD_FD_S__S_x_D_, 4, 1)));
			else
				__gtmp_19 = ((uint32_t)(arm_concat8(ARM_VCVT_FD_FD_S__S_x_D_, ARM_VCVT_FD_FD_S__S_x_Vd, 1, 4)));
			ARM_D[__gtmp_19] = ((double)(ARM_S[__gtmp_18]));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VCVTSS_S_S_S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_49;
	uint32_t __gtmp_48;
	int32_t __gtmp_47;
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint8_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	int32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint8_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	int64_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint8_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	int32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint8_t __gtmp_18;
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
			if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1)) {
				if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1))
					__gtmp_42 = (((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 0))) == 0);
				else
					__gtmp_42 = (((uint32_t)(ARM_VCVTSS_S_S_S_S_x_op_)) == 0);
				if(__gtmp_42) {
					if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
						if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
							__gtmp_43 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_M, ARM_VCVTSS_S_S_S_S_x_Vm, 1, 4)));
						else
							__gtmp_43 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
						__gtmp_44 = __gtmp_43;
					}
					else
						__gtmp_44 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
					__gtmp_47 = ((int32_t)(((uint32_t)(ARM_D[__gtmp_44]))));
				}
				else {
					if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
						if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
							__gtmp_45 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_M, ARM_VCVTSS_S_S_S_S_x_Vm, 1, 4)));
						else
							__gtmp_45 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
						__gtmp_46 = __gtmp_45;
					}
					else
						__gtmp_46 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
					__gtmp_47 = ((int32_t)(ARM_D[__gtmp_46]));
				}
				if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1))
					__gtmp_49 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vd, ARM_VCVTSS_S_S_S_S_x_D_, 4, 1)));
				else {
					if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
						__gtmp_48 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_D_, ARM_VCVTSS_S_S_S_S_x_Vd, 1, 4)));
					else
						__gtmp_48 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vd, ARM_VCVTSS_S_S_S_S_x_D_, 4, 1)));
					__gtmp_49 = __gtmp_48;
				}
				ARM_S[__gtmp_49] = arm_cast_32tof(__gtmp_47);
			}
			else {
				if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1))
					__gtmp_34 = (((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 0))) == 0);
				else
					__gtmp_34 = (((uint32_t)(ARM_VCVTSS_S_S_S_S_x_op_)) == 0);
				if(__gtmp_34) {
					if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
						if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
							__gtmp_35 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_M, ARM_VCVTSS_S_S_S_S_x_Vm, 1, 4)));
						else
							__gtmp_35 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
						__gtmp_36 = __gtmp_35;
					}
					else
						__gtmp_36 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
					__gtmp_39 = ((int32_t)(((uint32_t)(ARM_S[__gtmp_36]))));
				}
				else {
					if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
						if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
							__gtmp_37 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_M, ARM_VCVTSS_S_S_S_S_x_Vm, 1, 4)));
						else
							__gtmp_37 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
						__gtmp_38 = __gtmp_37;
					}
					else
						__gtmp_38 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
					__gtmp_39 = ((int32_t)(ARM_S[__gtmp_38]));
				}
				if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1))
					__gtmp_41 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vd, ARM_VCVTSS_S_S_S_S_x_D_, 4, 1)));
				else {
					if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
						__gtmp_40 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_D_, ARM_VCVTSS_S_S_S_S_x_Vd, 1, 4)));
					else
						__gtmp_40 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vd, ARM_VCVTSS_S_S_S_S_x_D_, 4, 1)));
					__gtmp_41 = __gtmp_40;
				}
				ARM_S[__gtmp_41] = arm_cast_32tof(__gtmp_39);
			}
		}
		else {
			if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1)) {
				if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1))
					__gtmp_26 = (((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 0))) == 0);
				else
					__gtmp_26 = (((uint32_t)(ARM_VCVTSS_S_S_S_S_x_op_)) == 0);
				if(__gtmp_26) {
					if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
						if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
							__gtmp_27 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_M, ARM_VCVTSS_S_S_S_S_x_Vm, 1, 4)));
						else
							__gtmp_27 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
						__gtmp_28 = __gtmp_27;
					}
					else
						__gtmp_28 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
					__gtmp_31 = ((int64_t)(((uint64_t)(ARM_S[__gtmp_28]))));
				}
				else {
					if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
						if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
							__gtmp_29 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_M, ARM_VCVTSS_S_S_S_S_x_Vm, 1, 4)));
						else
							__gtmp_29 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
					__gtmp_31 = ((int64_t)(ARM_S[__gtmp_30]));
				}
				if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1))
					__gtmp_33 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vd, ARM_VCVTSS_S_S_S_S_x_D_, 4, 1)));
				else {
					if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
						__gtmp_32 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_D_, ARM_VCVTSS_S_S_S_S_x_Vd, 1, 4)));
					else
						__gtmp_32 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vd, ARM_VCVTSS_S_S_S_S_x_D_, 4, 1)));
					__gtmp_33 = __gtmp_32;
				}
				ARM_D[__gtmp_33] = ((double)(__gtmp_31));
			}
			else {
				if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1))
					__gtmp_18 = (((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 0))) == 0);
				else
					__gtmp_18 = (((uint32_t)(ARM_VCVTSS_S_S_S_S_x_op_)) == 0);
				if(__gtmp_18) {
					if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
						if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
							__gtmp_19 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_M, ARM_VCVTSS_S_S_S_S_x_Vm, 1, 4)));
						else
							__gtmp_19 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
						__gtmp_20 = __gtmp_19;
					}
					else
						__gtmp_20 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
					__gtmp_23 = ((int32_t)(((uint32_t)(ARM_S[__gtmp_20]))));
				}
				else {
					if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1)) {
						if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
							__gtmp_21 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_M, ARM_VCVTSS_S_S_S_S_x_Vm, 1, 4)));
						else
							__gtmp_21 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
						__gtmp_22 = __gtmp_21;
					}
					else
						__gtmp_22 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vm, ARM_VCVTSS_S_S_S_S_x_M, 4, 1)));
					__gtmp_23 = ((int32_t)(ARM_S[__gtmp_22]));
				}
				if((((uint32_t)(arm_bit8(ARM_VCVTSS_S_S_S_S_x_opc2, 2))) == 1))
					__gtmp_25 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vd, ARM_VCVTSS_S_S_S_S_x_D_, 4, 1)));
				else {
					if((((uint32_t)(ARM_VCVTSS_S_S_S_S_x_sz)) == 1))
						__gtmp_24 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_D_, ARM_VCVTSS_S_S_S_S_x_Vd, 1, 4)));
					else
						__gtmp_24 = ((uint32_t)(arm_concat8(ARM_VCVTSS_S_S_S_S_x_Vd, ARM_VCVTSS_S_S_S_S_x_D_, 4, 1)));
					__gtmp_25 = __gtmp_24;
				}
				ARM_S[__gtmp_25] = ((float)(((double)(__gtmp_23))));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VADDS_F64_DD__DD__DD_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VADDS_F32_SD__SD__SD_0_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VADD_F32_QD__QD__QD_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_VADD_F32_DD__DD__DD_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_DMB_S_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MRSS_S__CPSR_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MRSS_S__CPSR_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((ARM_MRSS_S__CPSR_x_rn_r == 15))
				ARM_NPC = ARM_APSR;
			else
				ARM_GPR[ARM_MRSS_S__CPSR_x_rn_r] = ARM_APSR;
		}
		else {
			TMP_REG3 = ((int32_t)(ARM_SPSR));
			if((ARM_MRSS_S__CPSR_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG3));
			else
				ARM_GPR[ARM_MRSS_S__CPSR_x_rn_r] = ((uint32_t)(TMP_REG3));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MRSS_S__SPSR_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MRSS_S__SPSR_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((ARM_MRSS_S__SPSR_x_rn_r == 15))
				ARM_NPC = ARM_APSR;
			else
				ARM_GPR[ARM_MRSS_S__SPSR_x_rn_r] = ARM_APSR;
		}
		else {
			TMP_REG3 = ((int32_t)(ARM_SPSR));
			if((ARM_MRSS_S__SPSR_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG3));
			else
				ARM_GPR[ARM_MRSS_S__SPSR_x_rn_r] = ((uint32_t)(TMP_REG3));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR___S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR___S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR___S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FSXC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FSXC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_FSXC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_SXC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_SXC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_SXC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FXC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FXC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_FXC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FSX__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FSX__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_FSX__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_XC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_XC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_XC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_SC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_SC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_SC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_SX__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_SX__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_SX__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_F__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_F__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_F__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FX__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FX__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_FX__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FS__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FS__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_FS__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_C__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_C__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_C__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_X__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_X__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_X__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_S__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_F__S_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_F__S_0_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_CPSR_F__S_0_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR___S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR___S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR___S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FSXC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FSXC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_FSXC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_SXC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_SXC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_SXC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FXC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FXC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_FXC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FSX__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FSX__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_FSX__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_XC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_XC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_XC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_SC__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_SC__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_SC__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_SX__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_SX__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_SX__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_F__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_F__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_F__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FX__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FX__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_FX__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FS__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FS__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_FS__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_C__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_C__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_C__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_X__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_X__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_X__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_S__S_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_F__S_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_F__S_0_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = ((int32_t)(ARM_GPR[ARM_MSRS_SPSR_F__S_0_x_rn_r]));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRSMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRXMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
			if((((uint32_t)(ARM_PSRCMODE)) == 1)) {
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
				ARM_SPSR = ((uint32_t)(TMP_REG3));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR____ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR____ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_CPSR____ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR____ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR____ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR____ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR____ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FSXC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FSXC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_CPSR_FSXC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FSXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FSXC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FSXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FSXC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_SXC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_SXC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_CPSR_SXC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_SXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_SXC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_SXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_SXC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FXC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FXC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_CPSR_FXC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FXC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FXC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FSX___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FSX___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_CPSR_FSX___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FSX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FSX___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FSX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FSX___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_XC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_XC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_CPSR_XC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_XC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_XC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_XC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_XC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_SC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_SC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_CPSR_SC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_SC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_SC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_SC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_SC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_SX___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_SX___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_CPSR_SX___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_SX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_SX___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_SX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_SX___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_F___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_F___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_CPSR_F___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_F___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_F___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_F___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_F___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FX___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FX___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_CPSR_FX___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FX___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FX___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_FS___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_FS___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_CPSR_FS___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FS___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FS___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_FS___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_FS___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_C___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_C___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_CPSR_C___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_C___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_C___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_C___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_C___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_X___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_X___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_CPSR_X___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_X___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_X___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_X___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_X___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_CPSR_S___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_S___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_S___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_CPSR_F___ID_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_CPSR_F___ID_0_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(0));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_CPSR_F___ID_0_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_F___ID_0_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_F___ID_0_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_CPSR_F___ID_0_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_CPSR_F___ID_0_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR____ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR____ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_SPSR____ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR____ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR____ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR____ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR____ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FSXC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FSXC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_SPSR_FSXC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FSXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FSXC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FSXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FSXC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_SXC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_SXC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_SPSR_SXC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_SXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_SXC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_SXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_SXC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FXC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FXC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_SPSR_FXC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FXC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FXC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FXC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FSX___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FSX___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_SPSR_FSX___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FSX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FSX___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FSX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FSX___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_XC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_XC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_SPSR_XC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_XC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_XC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_XC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_XC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_SC___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_SC___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_SPSR_SC___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_SC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_SC___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_SC___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_SC___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_SX___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_SX___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_SPSR_SX___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_SX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_SX___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_SX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_SX___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_F___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_F___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_SPSR_F___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_F___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_F___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_F___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_F___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FX___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FX___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_SPSR_FX___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FX___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FX___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FX___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_FS___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_FS___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_SPSR_FS___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FS___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FS___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_FS___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_FS___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_C___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_C___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(1));
		if((((uint32_t)(ARM_MSRS_SPSR_C___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_C___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_C___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_C___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_C___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_X___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_X___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(1));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_SPSR_X___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_X___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_X___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_X___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_X___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(0));
		ARM_PSRSMODE = ((uint8_t)(1));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_SPSR_S___ID_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_S___ID_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_S___ID_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MSRS_SPSR_F___ID_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MSRS_SPSR_F___ID_0_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_RBIT = ((uint8_t)(1));
		ARM_PSRFMODE = ((uint8_t)(1));
		ARM_PSRSMODE = ((uint8_t)(0));
		ARM_PSRXMODE = ((uint8_t)(0));
		ARM_PSRCMODE = ((uint8_t)(0));
		if((((uint32_t)(ARM_MSRS_SPSR_F___ID_0_x_shifter_operand_rotate)) == 0))
			__gtmp_1 = arm_bit32(ARM_APSR, 29);
		else
			__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_F___ID_0_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_F___ID_0_x_shifter_operand_rotate)) << 1)), 31);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		TMP_REG3 = ((int32_t)(ARM_SPSR));
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MSRS_SPSR_F___ID_0_x_shifter_operand_v)), (((uint32_t)(ARM_MSRS_SPSR_F___ID_0_x_shifter_operand_rotate)) << 1));
		if((((uint32_t)(ARM_RBIT)) == 0)) {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
		else {
			if((((uint32_t)(ARM_PSRFMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 7, 0))), 7, 0);
			if((((uint32_t)(ARM_PSRSMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 15, 8))), 15, 8);
			if((((uint32_t)(ARM_PSRXMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 23, 16))), 23, 16);
			if((((uint32_t)(ARM_PSRCMODE)) == 1))
				TMP_REG3 = arm_set_field32(TMP_REG3, ((int32_t)(arm_field32(TMP_SWORD, 31, 24))), 31, 24);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CDPSS_D__D__D__D__D__D_code(arm_state_t *state, arm_inst_t *inst) {
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BFIS_S___ID___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_BFIS_S___ID___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((ARM_BFIS_S___ID___ID_x_msb >= ARM_BFIS_S___ID___ID_x_lsb)) {
			if((((uint32_t)(ARM_BFIS_S___ID___ID_x_rn_r)) == 15))
				ARM_GPR[ARM_BFIS_S___ID___ID_x_rd_r] = arm_set_field32_generic(ARM_GPR[ARM_BFIS_S___ID___ID_x_rd_r], 0, ARM_BFIS_S___ID___ID_x_msb, ARM_BFIS_S___ID___ID_x_lsb, 1);
			else
				ARM_GPR[ARM_BFIS_S___ID___ID_x_rd_r] = arm_set_field32_generic(ARM_GPR[ARM_BFIS_S___ID___ID_x_rd_r], ARM_BFIS_S___ID___ID_x_rn_r, ARM_BFIS_S___ID___ID_x_msb, ARM_BFIS_S___ID___ID_x_lsb, 1);
		}
		else
			arm_error(state, inst, "UNPREDICTABLE");
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CLZS_S__S_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int8_t TMP_INC;
	int32_t TMP_SWORD;
	int8_t TMP_BYTE;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_CLZS_S__S_0_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((ARM_GPR[ARM_CLZS_S__S_0_x_rm_r] == 0))
			ARM_GPR[ARM_CLZS_S__S_0_x_rd_r] = 0;
		else {
			TMP_BYTE = ((int8_t)(32));
			TMP_SWORD = ((int32_t)(ARM_GPR[ARM_CLZS_S__S_0_x_rm_r]));
gliss_CLZS_S__S_0_0_:
			if((((int32_t)(TMP_BYTE)) != ((int32_t)(0)))) {
				if((TMP_SWORD & ((uint32_t)((0x80000000LU == 1)))))
					TMP_INC = ((int8_t)((((int32_t)(TMP_BYTE)) - ((int32_t)(1)))));
				else {
					TMP_SWORD = ((int32_t)((TMP_SWORD << 1)));
					TMP_BYTE = ((int8_t)((((int32_t)(TMP_BYTE)) - ((int32_t)(1)))));
goto gliss_CLZS_S__S_0_0_;
				}
			}
			ARM_GPR[ARM_CLZS_S__S_0_x_rd_r] = ((uint32_t)((((int32_t)(31)) - ((int32_t)(TMP_INC)))));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SWPS_S__S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int8_t TMP_BYTE;
	int32_t TMP_REG3;
	int32_t TMP_SWORD;
	int32_t TMP_REGSWORD;
	int32_t TMP_EA;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_BBIT = ((uint8_t)(0));
	switch(arm_field32(ARM_SWPS_S__S___LT_S_RT__x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_BBIT)) == 1)) {
			TMP_EA = ((int32_t)(ARM_GPR[ARM_SWPS_S__S___LT_S_RT__x_rn_r]));
			TMP_BYTE = ((int8_t)(arm_mem_read8(ARM_M, TMP_EA)));
			arm_mem_write8(ARM_M, TMP_EA, ((uint8_t)(ARM_GPR[ARM_SWPS_S__S___LT_S_RT__x_rm_r])));
			if((ARM_SWPS_S__S___LT_S_RT__x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_BYTE));
			else
				ARM_GPR[ARM_SWPS_S__S___LT_S_RT__x_rd_r] = ((uint32_t)(TMP_BYTE));
		}
		else {
			TMP_EA = ((int32_t)(ARM_GPR[ARM_SWPS_S__S___LT_S_RT__x_rn_r]));
			TMP_REGSWORD = ((int32_t)(arm_mem_read32(ARM_M, TMP_EA)));
			if((arm_field32(TMP_EA, 1, 0) == 0))
				TMP_SWORD = TMP_REGSWORD;
			else {
				if((arm_field32(TMP_EA, 1, 0) == 1))
					TMP_SWORD = ((int32_t)(arm_rotate_right32(32, TMP_REGSWORD, 8)));
				else {
					if((arm_field32(TMP_EA, 1, 0) == 2))
						TMP_SWORD = ((int32_t)(arm_rotate_right32(32, TMP_REGSWORD, 16)));
					else {
						if((arm_field32(TMP_EA, 1, 0) == 3))
							TMP_SWORD = ((int32_t)(arm_rotate_right32(32, TMP_REGSWORD, 24)));
					}
				}
			}
			TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SWPS_S__S___LT_S_RT__x_rm_r]));
			arm_mem_write32(ARM_M, TMP_EA, ((uint32_t)(TMP_REG3)));
			if((ARM_SWPS_S__S___LT_S_RT__x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_SWORD));
			else
				ARM_GPR[ARM_SWPS_S__S___LT_S_RT__x_rd_r] = ((uint32_t)(TMP_SWORD));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SWPSB_S__S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int8_t TMP_BYTE;
	int32_t TMP_REG3;
	int32_t TMP_SWORD;
	int32_t TMP_REGSWORD;
	int32_t TMP_EA;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	ARM_BBIT = ((uint8_t)(1));
	switch(arm_field32(ARM_SWPSB_S__S___LT_S_RT__x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_BBIT)) == 1)) {
			TMP_EA = ((int32_t)(ARM_GPR[ARM_SWPSB_S__S___LT_S_RT__x_rn_r]));
			TMP_BYTE = ((int8_t)(arm_mem_read8(ARM_M, TMP_EA)));
			arm_mem_write8(ARM_M, TMP_EA, ((uint8_t)(ARM_GPR[ARM_SWPSB_S__S___LT_S_RT__x_rm_r])));
			if((ARM_SWPSB_S__S___LT_S_RT__x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_BYTE));
			else
				ARM_GPR[ARM_SWPSB_S__S___LT_S_RT__x_rd_r] = ((uint32_t)(TMP_BYTE));
		}
		else {
			TMP_EA = ((int32_t)(ARM_GPR[ARM_SWPSB_S__S___LT_S_RT__x_rn_r]));
			TMP_REGSWORD = ((int32_t)(arm_mem_read32(ARM_M, TMP_EA)));
			if((arm_field32(TMP_EA, 1, 0) == 0))
				TMP_SWORD = TMP_REGSWORD;
			else {
				if((arm_field32(TMP_EA, 1, 0) == 1))
					TMP_SWORD = ((int32_t)(arm_rotate_right32(32, TMP_REGSWORD, 8)));
				else {
					if((arm_field32(TMP_EA, 1, 0) == 2))
						TMP_SWORD = ((int32_t)(arm_rotate_right32(32, TMP_REGSWORD, 16)));
					else {
						if((arm_field32(TMP_EA, 1, 0) == 3))
							TMP_SWORD = ((int32_t)(arm_rotate_right32(32, TMP_REGSWORD, 24)));
					}
				}
			}
			TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SWPSB_S__S___LT_S_RT__x_rm_r]));
			arm_mem_write32(ARM_M, TMP_EA, ((uint32_t)(TMP_REG3)));
			if((ARM_SWPSB_S__S___LT_S_RT__x_rd_r == 15))
				ARM_NPC = ((uint32_t)(TMP_SWORD));
			else
				ARM_GPR[ARM_SWPSB_S__S___LT_S_RT__x_rd_r] = ((uint32_t)(TMP_SWORD));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UMLALSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t TMP_UREG5;
	int32_t TMP_SWORD;
	uint32_t TMP_UREG6;
	uint64_t TMP_UDWORD;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint64_t TMP64_UREG2;
	uint64_t TMP64_UREG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_UMLALSS_S__S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_UMLALSS_S__S__S__S_x_sets_set;
		TMP64_UREG1 = ((uint64_t)(ARM_GPR[ARM_UMLALSS_S__S__S__S_x_rm_r]));
		TMP64_UREG2 = ((uint64_t)(ARM_GPR[ARM_UMLALSS_S__S__S__S_x_rs_r]));
		TMP_UREG3 = ARM_GPR[ARM_UMLALSS_S__S__S__S_x_rdhi_r];
		TMP_UREG4 = ARM_GPR[ARM_UMLALSS_S__S__S__S_x_rdlo_r];
		TMP_UDWORD = (TMP64_UREG1 * TMP64_UREG2);
		TMP_UREG6 = (arm_field64(TMP_UDWORD, 31, 0) + TMP_UREG4);
		if((ARM_UMLALSS_S__S__S__S_x_rdlo_r == 15))
			ARM_NPC = TMP_UREG6;
		else
			ARM_GPR[ARM_UMLALSS_S__S__S__S_x_rdlo_r] = TMP_UREG6;
		TMP_SWORD = ((int32_t)(arm_field64(TMP_UDWORD, 31, 0)));
		if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_UREG4, 31))) == 1)))
			__gtmp_3 = 1;
		else {
			if(((((uint32_t)(arm_bit32(TMP_UREG4, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_UREG6, 31))) == 0)))
				__gtmp_2 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_UREG6, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_2 = __gtmp_1;
			}
			__gtmp_3 = __gtmp_2;
		}
		TMP_UREG5 = ((arm_field64(TMP_UDWORD, 63, 32) + TMP_UREG3) + __gtmp_3);
		if((ARM_UMLALSS_S__S__S__S_x_rdhi_r == 15))
			ARM_NPC = TMP_UREG5;
		else
			ARM_GPR[ARM_UMLALSS_S__S__S__S_x_rdhi_r] = TMP_UREG5;
		if((((uint32_t)(ARM_SBIT)) == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_UREG5, 31), 31, 31);
			if((TMP_UREG5 == 0)) {
				if((TMP_UREG6 == 0))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMLALSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG5;
	int32_t TMP_SWORD;
	int32_t TMP_REG6;
	int64_t TMP_DWORD;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SMLALSS_S__S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_SMLALSS_S__S__S__S_x_sets_set;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMLALSS_S__S__S__S_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMLALSS_S__S__S__S_x_rs_r]));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_SMLALSS_S__S__S__S_x_rdhi_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_SMLALSS_S__S__S__S_x_rdlo_r]));
		TMP_DWORD = (((int64_t)(TMP_REG1)) * ((int64_t)(TMP_REG2)));
		TMP_REG6 = (((int32_t)(arm_field64(TMP_DWORD, 31, 0))) + TMP_REG4);
		if((ARM_SMLALSS_S__S__S__S_x_rdlo_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG6));
		else
			ARM_GPR[ARM_SMLALSS_S__S__S__S_x_rdlo_r] = ((uint32_t)(TMP_REG6));
		TMP_SWORD = ((int32_t)(arm_field64(TMP_DWORD, 31, 0)));
		if(((((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG4, 31))) == 1)))
			__gtmp_3 = 1;
		else {
			if(((((uint32_t)(arm_bit32(TMP_REG4, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG6, 31))) == 0)))
				__gtmp_2 = 1;
			else {
				if(((((uint32_t)(arm_bit32(TMP_REG6, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_SWORD, 31))) == 1)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_2 = __gtmp_1;
			}
			__gtmp_3 = __gtmp_2;
		}
		TMP_REG5 = ((((int32_t)(arm_field64(TMP_DWORD, 63, 32))) + TMP_REG3) + ((int32_t)(__gtmp_3)));
		if((ARM_SMLALSS_S__S__S__S_x_rdhi_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG5));
		else
			ARM_GPR[ARM_SMLALSS_S__S__S__S_x_rdhi_r] = ((uint32_t)(TMP_REG5));
		if((((uint32_t)(ARM_SBIT)) == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG5, 31), 31, 31);
			if((TMP_REG5 == ((int32_t)(0)))) {
				if((TMP_REG6 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_UMULLSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	uint32_t TMP_UREG4;
	uint32_t TMP_UREG3;
	uint64_t TMP_UDWORD;
	uint64_t TMP64_UREG2;
	uint64_t TMP64_UREG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_UMULLSS_S__S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_UMULLSS_S__S__S__S_x_sets_set;
		TMP64_UREG1 = ((uint64_t)(ARM_GPR[ARM_UMULLSS_S__S__S__S_x_rm_r]));
		TMP64_UREG2 = ((uint64_t)(ARM_GPR[ARM_UMULLSS_S__S__S__S_x_rs_r]));
		TMP_UDWORD = (TMP64_UREG1 * TMP64_UREG2);
		TMP_UREG3 = arm_field64(TMP_UDWORD, 31, 0);
		if((ARM_UMULLSS_S__S__S__S_x_rdlo_r == 15))
			ARM_NPC = TMP_UREG3;
		else
			ARM_GPR[ARM_UMULLSS_S__S__S__S_x_rdlo_r] = TMP_UREG3;
		TMP_UREG4 = arm_field64(TMP_UDWORD, 63, 32);
		if((ARM_UMULLSS_S__S__S__S_x_rdhi_r == 15))
			ARM_NPC = TMP_UREG4;
		else
			ARM_GPR[ARM_UMULLSS_S__S__S__S_x_rdhi_r] = TMP_UREG4;
		if((((uint32_t)(ARM_SBIT)) == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_UREG4, 31), 31, 31);
			if((TMP_UREG4 == 0)) {
				if((TMP_UREG3 == 0))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SMULLSS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_REG4;
	int32_t TMP_REG3;
	int64_t TMP_DWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SMULLSS_S__S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_SMULLSS_S__S__S__S_x_sets_set;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SMULLSS_S__S__S__S_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SMULLSS_S__S__S__S_x_rs_r]));
		TMP_DWORD = (((int64_t)(TMP_REG1)) * ((int64_t)(TMP_REG2)));
		TMP_REG3 = ((int32_t)(arm_field64(TMP_DWORD, 31, 0)));
		if((ARM_SMULLSS_S__S__S__S_x_rdlo_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG3));
		else
			ARM_GPR[ARM_SMULLSS_S__S__S__S_x_rdlo_r] = ((uint32_t)(TMP_REG3));
		TMP_REG4 = ((int32_t)(arm_field64(TMP_DWORD, 63, 32)));
		if((ARM_SMULLSS_S__S__S__S_x_rdhi_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_SMULLSS_S__S__S__S_x_rdhi_r] = ((uint32_t)(TMP_REG4));
		if((((uint32_t)(ARM_SBIT)) == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG4, 31), 31, 31);
			if((TMP_REG4 == ((int32_t)(0)))) {
				if((TMP_REG3 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MULSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	int32_t TMP_REG4;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MULSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_MULSS_S__S__S_x_sets_set;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_MULSS_S__S__S_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_MULSS_S__S__S_x_rs_r]));
		TMP_DOUBLE = ((uint64_t)((TMP_REG1 * TMP_REG2)));
		TMP_REG4 = ((int32_t)(arm_field64(TMP_DOUBLE, 31, 0)));
		if((ARM_MULSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_MULSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_REG4));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_MULSS_S__S__S_x_rd_r]));
		if((((uint32_t)(ARM_SBIT)) == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG3, 31), 31, 31);
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG3, 31), 31, 31);
				if((TMP_REG3 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MLASS_S__S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_REG3;
	uint64_t TMP_DOUBLE;
	int32_t TMP_REG4;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MLASS_S__S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_MLASS_S__S__S__S_x_sets_set;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_MLASS_S__S__S__S_x_rm_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_MLASS_S__S__S__S_x_rs_r]));
		TMP_REG4 = ((int32_t)(ARM_GPR[ARM_MLASS_S__S__S__S_x_rn_r]));
		TMP_DOUBLE = ((uint64_t)(((TMP_REG1 * TMP_REG2) + TMP_REG4)));
		TMP_REG4 = ((int32_t)(arm_field64(TMP_DOUBLE, 31, 0)));
		if((ARM_MLASS_S__S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG4));
		else
			ARM_GPR[ARM_MLASS_S__S__S__S_x_rd_r] = ((uint32_t)(TMP_REG4));
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_MLASS_S__S__S__S_x_rd_r]));
		if((((uint32_t)(ARM_SBIT)) == 1)) {
			ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG3, 31), 31, 31);
			if((TMP_REG3 == ((int32_t)(0))))
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
			else
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SWIS_D_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SWIS_D_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((arm_field32(ARM_APSR, 4, 0) == 19))
			ARM_GPR[14] = (ARM_SWIS_D___IADDR + 4);
		else
			ARM_LR_SAVED[arm_field8(19, 3, 0)] = (ARM_SWIS_D___IADDR + 4);
		ARM_SPSR = arm_set_field32(ARM_SPSR, ARM_APSR, 0, (0 - (32 - 1)));
		ARM_APSR = arm_set_field32(ARM_APSR, 19, 4, 0);
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 5, 5);
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 7, 7);
		ARM_NPC = 8;
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDMSS_SS___LB_S_RB_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_EA;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int32_t TMP_REG3;
	int8_t TMP_SETBIT;
	int8_t TMP_BYTE;
	uint16_t TMP_REGLIST;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_LDMSS_SS___LB_S_RB_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		TMP_REGLIST = ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r;
		TMP_BYTE = ((int8_t)(0));
		TMP_SETBIT = ((int8_t)(0));
		ARM_B15SET = ((uint8_t)(0));
gliss_LDMSS_SS___LB_S_RB_S_0_:
		if((((int32_t)(TMP_BYTE)) != ((int32_t)(16)))) {
			if(((((uint32_t)(TMP_REGLIST)) & 1) == 1)) {
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
				if((((int32_t)(TMP_BYTE)) == ((int32_t)(15))))
					ARM_B15SET = ((uint8_t)(1));
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_BYTE = ((int8_t)((((int32_t)(TMP_BYTE)) + ((int32_t)(1)))));
goto gliss_LDMSS_SS___LB_S_RB_S_0_;
		}
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_LDMSS_SS___LB_S_RB_S_x_rn_r]));
		TMP_START_ADDR = ((uint32_t)(TMP_REG3));
		TMP_REGLIST = ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r;
		switch(ARM_LDMSS_SS___LB_S_RB_S_x_adr_mode) {
		case 0:
			TMP_START_ADDR = ((uint32_t)(((((int32_t)(TMP_START_ADDR)) - (((int32_t)(4)) * ((int32_t)(TMP_SETBIT)))) + ((int32_t)(4)))));
			TMP_END_ADDR = (TMP_START_ADDR - 4);
			break;
		case 1:
			TMP_START_ADDR = TMP_START_ADDR;
			TMP_END_ADDR = ((uint32_t)((((int32_t)(TMP_START_ADDR)) + (((int32_t)(4)) * ((int32_t)(TMP_SETBIT))))));
			break;
		case 2:
			TMP_START_ADDR = ((uint32_t)((((int32_t)(TMP_START_ADDR)) - (((int32_t)(4)) * ((int32_t)(TMP_SETBIT))))));
			TMP_END_ADDR = TMP_START_ADDR;
			break;
		case 3:
			TMP_START_ADDR = (TMP_START_ADDR + 4);
			TMP_END_ADDR = ((uint32_t)(((((int32_t)(TMP_START_ADDR)) + (((int32_t)(4)) * ((int32_t)(TMP_SETBIT)))) - ((int32_t)(4)))));
			break;
		}
		TMP_BYTE = ((int8_t)(0));
gliss_LDMSS_SS___LB_S_RB_S_1_:
		if((((int32_t)(TMP_BYTE)) != ((int32_t)(15)))) {
			if(((((uint32_t)(TMP_REGLIST)) & 1) == 1)) {
				TMP_EA = ((int32_t)(TMP_START_ADDR));
				if((((int32_t)(TMP_BYTE)) == ((int32_t)(15))))
					ARM_NPC = arm_mem_read32(ARM_M, TMP_EA);
				else
					ARM_GPR[TMP_BYTE] = arm_mem_read32(ARM_M, TMP_EA);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_BYTE = ((int8_t)((((int32_t)(TMP_BYTE)) + ((int32_t)(1)))));
goto gliss_LDMSS_SS___LB_S_RB_S_1_;
		}
		if((((uint32_t)(ARM_B15SET)) == 1)) {
			if((((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_sets)) == 0)) {
				TMP_EA = ((int32_t)(TMP_START_ADDR));
				TMP_SWORD = ((int32_t)(arm_mem_read32(ARM_M, TMP_EA)));
				if((TMP_SWORD == ((int32_t)(0))))
					ARM_GPR[0] = ((2 << 16) + 38);
				else
					ARM_NPC = (((uint32_t)(TMP_SWORD)) & 0xfffffffeLU);
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)((((uint32_t)(TMP_SWORD)) & 1))), 5, 5);
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_APSR, 5), 5, 5);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			else {
				TMP_SWORD = ((int32_t)(ARM_SPSR));
				ARM_APSR = ((uint32_t)(TMP_SWORD));
				TMP_EA = ((int32_t)(TMP_START_ADDR));
				TMP_SWORD = ((int32_t)(arm_mem_read32(ARM_M, TMP_EA)));
				if((TMP_SWORD == ((int32_t)(0))))
					ARM_GPR[0] = ((2 << 16) + 38);
				if((((uint32_t)(arm_bit32(ARM_APSR, 5))) == 1))
					ARM_NPC = (((uint32_t)(TMP_SWORD)) & 0xfffffffeLU);
				else
					ARM_NPC = (((uint32_t)(TMP_SWORD)) & 0xfffffffcLU);
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
		}
		if((((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_setw)) == 1)) {
			if((ARM_LDMSS_SS___LB_S_RB_S_x_rn_r == 15))
				ARM_NPC = TMP_END_ADDR;
			else
				ARM_GPR[ARM_LDMSS_SS___LB_S_RB_S_x_rn_r] = TMP_END_ADDR;
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STMSS_SS___LB_S_RB_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_EA;
	uint32_t TMP_END_ADDR;
	uint32_t TMP_START_ADDR;
	int32_t TMP_REG3;
	int8_t TMP_SETBIT;
	int8_t TMP_BYTE;
	uint16_t TMP_REGLIST;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_STMSS_SS___LB_S_RB_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		TMP_REGLIST = ARM_STMSS_SS___LB_S_RB_S_x_reglist_r;
		TMP_BYTE = ((int8_t)(0));
		TMP_SETBIT = ((int8_t)(0));
		ARM_B15SET = ((uint8_t)(0));
gliss_STMSS_SS___LB_S_RB_S_0_:
		if((((int32_t)(TMP_BYTE)) != ((int32_t)(16)))) {
			if(((((uint32_t)(TMP_REGLIST)) & 1) == 1)) {
				TMP_SETBIT = ((int8_t)((((int32_t)(TMP_SETBIT)) + ((int32_t)(1)))));
				if((((int32_t)(TMP_BYTE)) == ((int32_t)(15))))
					ARM_B15SET = ((uint8_t)(1));
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_BYTE = ((int8_t)((((int32_t)(TMP_BYTE)) + ((int32_t)(1)))));
goto gliss_STMSS_SS___LB_S_RB_S_0_;
		}
		TMP_REG3 = ((int32_t)(ARM_GPR[ARM_STMSS_SS___LB_S_RB_S_x_rn_r]));
		TMP_START_ADDR = ((uint32_t)(TMP_REG3));
		TMP_REGLIST = ARM_STMSS_SS___LB_S_RB_S_x_reglist_r;
		switch(ARM_STMSS_SS___LB_S_RB_S_x_adr_mode) {
		case 0:
			TMP_START_ADDR = ((uint32_t)(((((int32_t)(TMP_START_ADDR)) - (((int32_t)(4)) * ((int32_t)(TMP_SETBIT)))) + ((int32_t)(4)))));
			TMP_END_ADDR = (TMP_START_ADDR - 4);
			break;
		case 1:
			TMP_START_ADDR = TMP_START_ADDR;
			TMP_END_ADDR = ((uint32_t)((((int32_t)(TMP_START_ADDR)) + (((int32_t)(4)) * ((int32_t)(TMP_SETBIT))))));
			break;
		case 2:
			TMP_START_ADDR = ((uint32_t)((((int32_t)(TMP_START_ADDR)) - (((int32_t)(4)) * ((int32_t)(TMP_SETBIT))))));
			TMP_END_ADDR = TMP_START_ADDR;
			break;
		case 3:
			TMP_START_ADDR = (TMP_START_ADDR + 4);
			TMP_END_ADDR = ((uint32_t)(((((int32_t)(TMP_START_ADDR)) + (((int32_t)(4)) * ((int32_t)(TMP_SETBIT)))) - ((int32_t)(4)))));
			break;
		}
		TMP_BYTE = ((int8_t)(0));
gliss_STMSS_SS___LB_S_RB_S_1_:
		if((((int32_t)(TMP_BYTE)) != ((int32_t)(16)))) {
			if(((((uint32_t)(TMP_REGLIST)) & 1) == 1)) {
				TMP_EA = ((int32_t)(TMP_START_ADDR));
				if((((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_sets)) == 0))
					TMP_SWORD = ((int32_t)(ARM_GPR[TMP_BYTE]));
				else {
					if((((int32_t)(TMP_BYTE)) <= ((int32_t)(14))))
						__gtmp_1 = ARM_GPR[TMP_BYTE];
					else
						__gtmp_1 = (ARM_STMSS_SS___LB_S_RB_S___IADDR + 8);
					TMP_SWORD = ((int32_t)(__gtmp_1));
				}
				arm_mem_write32(ARM_M, TMP_EA, ((uint32_t)(TMP_SWORD)));
				TMP_START_ADDR = (TMP_START_ADDR + 4);
			}
			TMP_REGLIST = (TMP_REGLIST >> 1);
			TMP_BYTE = ((int8_t)((((int32_t)(TMP_BYTE)) + ((int32_t)(1)))));
goto gliss_STMSS_SS___LB_S_RB_S_1_;
		}
		if((((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_setw)) == 1)) {
			if((ARM_STMSS_SS___LB_S_RB_S_x_rn_r == 15))
				ARM_NPC = TMP_END_ADDR;
			else
				ARM_GPR[ARM_STMSS_SS___LB_S_RB_S_x_rn_r] = TMP_END_ADDR;
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STREXHS_S__S___LT_S_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STREXHS_S__S___LT_S_RT__0_x_rn_r]));
		arm_mem_write16(ARM_M, TMP_REG1, ((uint16_t)(ARM_GPR[ARM_STREXHS_S__S___LT_S_RT__0_x_rt_r])));
		if((ARM_STREXHS_S__S___LT_S_RT__0_x_rd_r == 15))
			ARM_NPC = 0;
		else
			ARM_GPR[ARM_STREXHS_S__S___LT_S_RT__0_x_rd_r] = 0;
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STREXDS_S__S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int64_t TMP64_REG1;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STREXDS_S__S___LT_S_RT__x_rn_r]));
		TMP64_REG1 = ((int64_t)(arm_concat64(ARM_GPR[(ARM_STREXDS_S__S___LT_S_RT__x_rt_r + 0)], ARM_GPR[((((uint32_t)(ARM_STREXDS_S__S___LT_S_RT__x_rt_r)) + 1) + 0)], 32, 32)));
		arm_mem_write64(ARM_M, TMP_REG1, ((uint64_t)(TMP64_REG1)));
		if((ARM_STREXDS_S__S___LT_S_RT__x_rd_r == 15))
			ARM_NPC = 0;
		else
			ARM_GPR[ARM_STREXDS_S__S___LT_S_RT__x_rd_r] = 0;
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STREXBS_S__S___LT_S_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STREXBS_S__S___LT_S_RT__0_x_rn_r]));
		arm_mem_write8(ARM_M, TMP_REG1, ((uint8_t)(ARM_GPR[ARM_STREXBS_S__S___LT_S_RT__0_x_rt_r])));
		if((ARM_STREXBS_S__S___LT_S_RT__0_x_rd_r == 15))
			ARM_NPC = 0;
		else
			ARM_GPR[ARM_STREXBS_S__S___LT_S_RT__0_x_rd_r] = 0;
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STREXS_S__S___LT_S_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STREXS_S__S___LT_S_RT__0_x_rn_r]));
		arm_mem_write32(ARM_M, TMP_REG1, ARM_GPR[ARM_STREXS_S__S___LT_S_RT__0_x_rt_r]);
		if((ARM_STREXS_S__S___LT_S_RT__0_x_rd_r == 15))
			ARM_NPC = 0;
		else
			ARM_GPR[ARM_STREXS_S__S___LT_S_RT__0_x_rd_r] = 0;
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDREXHS_S___LT_S_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDREXHS_S___LT_S_RT__0_x_rn_r]));
		if((ARM_LDREXHS_S___LT_S_RT__0_x_rt_r == 15))
			ARM_NPC = ((uint32_t)(arm_mem_read16(ARM_M, TMP_REG1)));
		else
			ARM_GPR[ARM_LDREXHS_S___LT_S_RT__0_x_rt_r] = ((uint32_t)(arm_mem_read16(ARM_M, TMP_REG1)));
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDREXDS_S___LT_S_RT__code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDREXDS_S___LT_S_RT__x_rn_r]));
		if((ARM_LDREXDS_S___LT_S_RT__x_rt_r == 15))
			ARM_NPC = arm_mem_read32(ARM_M, TMP_REG1);
		else
			ARM_GPR[ARM_LDREXDS_S___LT_S_RT__x_rt_r] = arm_mem_read32(ARM_M, TMP_REG1);
		if(((((uint32_t)(ARM_LDREXDS_S___LT_S_RT__x_rt_r)) + 1) == 15))
			ARM_NPC = arm_mem_read32(ARM_M, (TMP_REG1 + ((int32_t)(4))));
		else
			ARM_GPR[(((uint32_t)(ARM_LDREXDS_S___LT_S_RT__x_rt_r)) + 1)] = arm_mem_read32(ARM_M, (TMP_REG1 + ((int32_t)(4))));
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDREXBS_S___LT_S_RT__1_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDREXBS_S___LT_S_RT__1_x_rn_r]));
		if((ARM_LDREXBS_S___LT_S_RT__1_x_rt_r == 15))
			ARM_NPC = ((uint32_t)(arm_mem_read8(ARM_M, TMP_REG1)));
		else
			ARM_GPR[ARM_LDREXBS_S___LT_S_RT__1_x_rt_r] = ((uint32_t)(arm_mem_read8(ARM_M, TMP_REG1)));
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDREXS_S___LT_S_RT__0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_17;
	uint8_t __gtmp_16;
	uint8_t __gtmp_15;
	uint8_t __gtmp_14;
	uint8_t __gtmp_13;
	uint8_t __gtmp_12;
	uint8_t __gtmp_11;
	uint8_t __gtmp_10;
	uint8_t __gtmp_9;
	uint8_t __gtmp_8;
	uint8_t __gtmp_7;
	uint8_t __gtmp_6;
	uint8_t __gtmp_5;
	uint8_t __gtmp_4;
	uint8_t __gtmp_3;
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((arm_field8(ARM_ITSTATE, 3, 0) != 0)) {
		if(((arm_bit8(ARM_ITSTATE, 4) == 1) && (arm_field8(ARM_ITSTATE, 7, 4) != 15))) {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_7 = 1;
				else
					__gtmp_7 = 0;
				__gtmp_0 = __gtmp_7;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_6 = 1;
				else
					__gtmp_6 = 0;
				__gtmp_0 = __gtmp_6;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_5 = 1;
				else
					__gtmp_5 = 0;
				__gtmp_0 = __gtmp_5;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_4 = 1;
				else
					__gtmp_4 = 0;
				__gtmp_0 = __gtmp_4;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_3 = 1;
				else
					__gtmp_3 = 0;
				__gtmp_0 = __gtmp_3;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_0 = __gtmp_2;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_1 = 1;
				else
					__gtmp_1 = 0;
				__gtmp_0 = __gtmp_1;
				break;
			case 7:
				__gtmp_0 = 1;
				break;
			}
			__gtmp_16 = !__gtmp_0;
		}
		else {
			switch(arm_field8(ARM_ITSTATE, 7, 5)) {
			case 0:
				if((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1))
					__gtmp_15 = 1;
				else
					__gtmp_15 = 0;
				__gtmp_8 = __gtmp_15;
				break;
			case 1:
				if((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1))
					__gtmp_14 = 1;
				else
					__gtmp_14 = 0;
				__gtmp_8 = __gtmp_14;
				break;
			case 2:
				if((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1))
					__gtmp_13 = 1;
				else
					__gtmp_13 = 0;
				__gtmp_8 = __gtmp_13;
				break;
			case 3:
				if((((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))
					__gtmp_12 = 1;
				else
					__gtmp_12 = 0;
				__gtmp_8 = __gtmp_12;
				break;
			case 4:
				if(((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_11 = 1;
				else
					__gtmp_11 = 0;
				__gtmp_8 = __gtmp_11;
				break;
			case 5:
				if((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)))
					__gtmp_10 = 1;
				else
					__gtmp_10 = 0;
				__gtmp_8 = __gtmp_10;
				break;
			case 6:
				if(((arm_bit32(ARM_APSR, 31) == arm_bit32(ARM_APSR, 28)) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0)))
					__gtmp_9 = 1;
				else
					__gtmp_9 = 0;
				__gtmp_8 = __gtmp_9;
				break;
			case 7:
				__gtmp_8 = 1;
				break;
			}
			__gtmp_16 = __gtmp_8;
		}
		__gtmp_17 = __gtmp_16;
	}
	else
		__gtmp_17 = 1;
	if(__gtmp_17) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDREXS_S___LT_S_RT__0_x_rn_r]));
		if((ARM_LDREXS_S___LT_S_RT__0_x_rt_r == 15))
			ARM_NPC = arm_mem_read32(ARM_M, TMP_REG1);
		else
			ARM_GPR[ARM_LDREXS_S___LT_S_RT__0_x_rt_r] = arm_mem_read32(ARM_M, TMP_REG1);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRDS_S___LT_SS__S_IUSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(arm_concat8(ARM_STRDS_S___LT_SS__S_IUSS_x_immh, ARM_STRDS_S___LT_SS__S_IUSS_x_imml, 4, 4)));
	switch(arm_field32(ARM_STRDS_S___LT_SS__S_IUSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_STRDS_S___LT_SS__S_IUSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STRDS_S___LT_SS__S_IUSS_x_rt_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_STRDS_S___LT_SS__S_IUSS_x_rn_r]));
		if((((uint32_t)(ARM_STRDS_S___LT_SS__S_IUSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		if((((uint32_t)(ARM_STRDS_S___LT_SS__S_IUSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_STRDS_S___LT_SS__S_IUSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_STRDS_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_STRDS_S___LT_SS__S_IUSS_x_setw)) == 1)) {
				if((ARM_STRDS_S___LT_SS__S_IUSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_STRDS_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSSH_S___LT_SS__SSSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int16_t TMP_HALF;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_LDRSSH_S___LT_SS__SSSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDRSSH_S___LT_SS__SSSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r]));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		TMP_EA = TMP_REG2;
		TMP_HALF = ((int16_t)(arm_mem_read8(ARM_M, TMP_EA)));
		if((ARM_LDRSSH_S___LT_SS__SSSS_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(((int32_t)(TMP_HALF))));
		else
			ARM_GPR[ARM_LDRSSH_S___LT_SS__SSSS_x_rd_r] = ((uint32_t)(((int32_t)(TMP_HALF))));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_setw)) == 1)) {
				if((ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSSH_S___LT_SS__S_IUSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int16_t TMP_HALF;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(arm_concat8(ARM_LDRSSH_S___LT_SS__S_IUSS_x_immh, ARM_LDRSSH_S___LT_SS__S_IUSS_x_imml, 4, 4)));
	switch(arm_field32(ARM_LDRSSH_S___LT_SS__S_IUSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDRSSH_S___LT_SS__S_IUSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r]));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		TMP_EA = TMP_REG2;
		TMP_HALF = ((int16_t)(arm_mem_read8(ARM_M, TMP_EA)));
		if((ARM_LDRSSH_S___LT_SS__S_IUSS_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(((int32_t)(TMP_HALF))));
		else
			ARM_GPR[ARM_LDRSSH_S___LT_SS__S_IUSS_x_rd_r] = ((uint32_t)(((int32_t)(TMP_HALF))));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setw)) == 1)) {
				if((ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSSB_S___LT_SS__SSSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int8_t TMP_BYTE;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(ARM_GPR[ARM_LDRSSB_S___LT_SS__SSSS_x_rm_r]));
	switch(arm_field32(ARM_LDRSSB_S___LT_SS__SSSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDRSSB_S___LT_SS__SSSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r]));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		TMP_EA = TMP_REG2;
		TMP_BYTE = ((int8_t)(arm_mem_read8(ARM_M, TMP_EA)));
		if((ARM_LDRSSB_S___LT_SS__SSSS_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(((int32_t)(TMP_BYTE))));
		else
			ARM_GPR[ARM_LDRSSB_S___LT_SS__SSSS_x_rd_r] = ((uint32_t)(((int32_t)(TMP_BYTE))));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_setw)) == 1)) {
				if((ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSSB_S___LT_SS__S_IUSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int8_t TMP_BYTE;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(arm_concat8(ARM_LDRSSB_S___LT_SS__S_IUSS_x_immh, ARM_LDRSSB_S___LT_SS__S_IUSS_x_imml, 4, 4)));
	switch(arm_field32(ARM_LDRSSB_S___LT_SS__S_IUSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDRSSB_S___LT_SS__S_IUSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r]));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		TMP_EA = TMP_REG2;
		TMP_BYTE = ((int8_t)(arm_mem_read8(ARM_M, TMP_EA)));
		if((ARM_LDRSSB_S___LT_SS__S_IUSS_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(((int32_t)(TMP_BYTE))));
		else
			ARM_GPR[ARM_LDRSSB_S___LT_SS__S_IUSS_x_rd_r] = ((uint32_t)(((int32_t)(TMP_BYTE))));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setw)) == 1)) {
				if((ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSH_S___LT_SS__SSSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int16_t TMP_HALF;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(ARM_GPR[ARM_LDRSH_S___LT_SS__SSSS_x_rm_r]));
	switch(arm_field32(ARM_LDRSH_S___LT_SS__SSSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDRSH_S___LT_SS__SSSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_LDRSH_S___LT_SS__SSSS_x_rn_r]));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		TMP_EA = TMP_REG2;
		if((((uint32_t)(arm_bit32(TMP_EA, 0))) == 0))
			TMP_HALF = ((int16_t)(arm_mem_read16(ARM_M, TMP_EA)));
		else
			TMP_HALF = ((int16_t)(0));
		TMP_REG1 = ((int32_t)(((uint16_t)(TMP_HALF))));
		if(((ARM_LDRSH_S___LT_SS__SSSS_x_rd_r == 15) && (TMP_REG1 == ((int32_t)(0)))))
			ARM_GPR[0] = ((2 << 16) + 38);
		if((ARM_LDRSH_S___LT_SS__SSSS_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG1));
		else
			ARM_GPR[ARM_LDRSH_S___LT_SS__SSSS_x_rd_r] = ((uint32_t)(TMP_REG1));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_LDRSH_S___LT_SS__SSSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_LDRSH_S___LT_SS__SSSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_setw)) == 1)) {
				if((ARM_LDRSH_S___LT_SS__SSSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_LDRSH_S___LT_SS__SSSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSH_S___LT_SS__S_IUSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int16_t TMP_HALF;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(arm_concat8(ARM_LDRSH_S___LT_SS__S_IUSS_x_immh, ARM_LDRSH_S___LT_SS__S_IUSS_x_imml, 4, 4)));
	switch(arm_field32(ARM_LDRSH_S___LT_SS__S_IUSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDRSH_S___LT_SS__S_IUSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r]));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		TMP_EA = TMP_REG2;
		if((((uint32_t)(arm_bit32(TMP_EA, 0))) == 0))
			TMP_HALF = ((int16_t)(arm_mem_read16(ARM_M, TMP_EA)));
		else
			TMP_HALF = ((int16_t)(0));
		TMP_REG1 = ((int32_t)(((uint16_t)(TMP_HALF))));
		if(((ARM_LDRSH_S___LT_SS__S_IUSS_x_rd_r == 15) && (TMP_REG1 == ((int32_t)(0)))))
			ARM_GPR[0] = ((2 << 16) + 38);
		if((ARM_LDRSH_S___LT_SS__S_IUSS_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_REG1));
		else
			ARM_GPR[ARM_LDRSH_S___LT_SS__S_IUSS_x_rd_r] = ((uint32_t)(TMP_REG1));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_setw)) == 1)) {
				if((ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRHS_S___LT_SS__SSSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(ARM_GPR[ARM_STRHS_S___LT_SS__SSSS_x_rm_r]));
	switch(arm_field32(ARM_STRHS_S___LT_SS__SSSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STRHS_S___LT_SS__SSSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_STRHS_S___LT_SS__SSSS_x_rn_r]));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		TMP_EA = TMP_REG2;
		arm_mem_write16(ARM_M, TMP_EA, ((uint16_t)(TMP_REG1)));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_STRHS_S___LT_SS__SSSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_STRHS_S___LT_SS__SSSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_setw)) == 1)) {
				if((ARM_STRHS_S___LT_SS__SSSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_STRHS_S___LT_SS__SSSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRHS_S___LT_SS__S_IUSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(arm_concat8(ARM_STRHS_S___LT_SS__S_IUSS_x_immh, ARM_STRHS_S___LT_SS__S_IUSS_x_imml, 4, 4)));
	switch(arm_field32(ARM_STRHS_S___LT_SS__S_IUSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STRHS_S___LT_SS__S_IUSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r]));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		TMP_EA = TMP_REG2;
		arm_mem_write16(ARM_M, TMP_EA, ((uint16_t)(TMP_REG1)));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_setw)) == 1)) {
				if((ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRSSS_S___LT_SS__SS__S__IDSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG3;
	int32_t TMP_REG1;
	uint8_t TMP_FIVE;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0) && (((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1))) {
			TMP_FIVE = arm_field32(ARM_APSR, 4, 0);
			ARM_APSR = arm_set_field32(ARM_APSR, 16, 4, 0);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rd_r]));
		switch(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftKind) {
		case 0:
			__gtmp_1 = (ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r] << ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt);
			break;
		case 1:
			if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_5 = 0;
			else
				__gtmp_5 = (ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r] >> ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt);
			__gtmp_1 = __gtmp_5;
			break;
		case 2:
			if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r], 31))) == 1))
					__gtmp_3 = 0xffffffffLU;
				else
					__gtmp_3 = 0;
				__gtmp_4 = __gtmp_3;
			}
			else
				__gtmp_4 = (((int32_t)(ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r])) >> ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt);
			__gtmp_1 = __gtmp_4;
			break;
		case 3:
			if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_2 = arm_field64(arm_concat64(arm_bit32(ARM_APSR, 29), ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r], 1, 32), 32, 1);
			else
				__gtmp_2 = arm_rotate_right32(32, ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r], ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt);
			__gtmp_1 = __gtmp_2;
			break;
		}
		TMP_REG3 = __gtmp_1;
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r]));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setb)) == 1)) {
			TMP_EA = TMP_REG2;
			arm_mem_write8(ARM_M, TMP_EA, ((uint8_t)(TMP_REG1)));
		}
		else {
			TMP_EA = TMP_REG2;
			TMP_SWORD = TMP_REG1;
			arm_mem_write32(ARM_M, TMP_EA, ((uint32_t)(TMP_SWORD)));
		}
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1)) {
				if((ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
		if(((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0) && (((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1)))
			ARM_APSR = arm_set_field32(ARM_APSR, TMP_FIVE, 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSSS_S___LT_SS__SS__S__IDSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG3;
	int32_t TMP_REG1;
	uint8_t TMP_FIVE;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0) && (((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1))) {
			TMP_FIVE = arm_field32(ARM_APSR, 4, 0);
			ARM_APSR = arm_set_field32(ARM_APSR, 16, 4, 0);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r]));
		switch(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftKind) {
		case 0:
			__gtmp_1 = (ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r] << ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt);
			break;
		case 1:
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_5 = 0;
			else
				__gtmp_5 = (ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r] >> ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt);
			__gtmp_1 = __gtmp_5;
			break;
		case 2:
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r], 31))) == 1))
					__gtmp_3 = 0xffffffffLU;
				else
					__gtmp_3 = 0;
				__gtmp_4 = __gtmp_3;
			}
			else
				__gtmp_4 = (((int32_t)(ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r])) >> ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt);
			__gtmp_1 = __gtmp_4;
			break;
		case 3:
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_2 = arm_field64(arm_concat64(arm_bit32(ARM_APSR, 29), ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r], 1, 32), 32, 1);
			else
				__gtmp_2 = arm_rotate_right32(32, ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r], ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt);
			__gtmp_1 = __gtmp_2;
			break;
		}
		TMP_REG3 = __gtmp_1;
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r]));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setb)) == 1)) {
			TMP_EA = TMP_REG2;
			if((ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r == 15))
				ARM_NPC = ((uint32_t)(arm_mem_read8(ARM_M, TMP_EA)));
			else
				ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r] = ((uint32_t)(arm_mem_read8(ARM_M, TMP_EA)));
		}
		else {
			TMP_EA = TMP_REG2;
			TMP_SWORD = ((int32_t)(arm_mem_read32(ARM_M, TMP_EA)));
			if((ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r == 15)) {
				ARM_NPC = (((uint32_t)(TMP_SWORD)) & 0xfffffffeLU);
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_SWORD, 0), 5, 5);
			}
			else {
				if((ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r == 15))
					ARM_NPC = ((uint32_t)(TMP_SWORD));
				else
					ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r] = ((uint32_t)(TMP_SWORD));
			}
		}
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1)) {
				if((ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
		if(((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0) && (((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1)))
			ARM_APSR = arm_set_field32(ARM_APSR, TMP_FIVE, 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_STRSSS_S___LT_SS__S_IDSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	uint8_t TMP_FIVE;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_offset12_n))));
	switch(arm_field32(ARM_STRSSS_S___LT_SS__S_IDSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		if(((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0) && (((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setw)) == 1))) {
			TMP_FIVE = arm_field32(ARM_APSR, 4, 0);
			ARM_APSR = arm_set_field32(ARM_APSR, 16, 4, 0);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_STRSSS_S___LT_SS__S_IDSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r]));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setb)) == 1)) {
			TMP_EA = TMP_REG2;
			arm_mem_write8(ARM_M, TMP_EA, ((uint8_t)(TMP_REG1)));
		}
		else {
			TMP_EA = TMP_REG2;
			TMP_SWORD = TMP_REG1;
			arm_mem_write32(ARM_M, TMP_EA, ((uint32_t)(TMP_SWORD)));
		}
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setw)) == 1)) {
				if((ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
		if(((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0) && (((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setw)) == 1)))
			ARM_APSR = arm_set_field32(ARM_APSR, TMP_FIVE, 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_LDRSSS_S___LT_SS__S_IDSS_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_EA;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	uint8_t TMP_FIVE;
	int32_t TMP_REG3;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	TMP_REG3 = ((int32_t)(((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_offset12_n))));
	switch(arm_field32(ARM_LDRSSS_S___LT_SS__S_IDSS_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setu)) == 0))
			TMP_REG3 = -TMP_REG3;
		if(((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0) && (((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setw)) == 1))) {
			TMP_FIVE = arm_field32(ARM_APSR, 4, 0);
			ARM_APSR = arm_set_field32(ARM_APSR, 16, 4, 0);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r]));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setpre)) == 1))
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setb)) == 1)) {
			TMP_EA = TMP_REG2;
			if((ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r == 15))
				ARM_NPC = ((uint32_t)(arm_mem_read8(ARM_M, TMP_EA)));
			else
				ARM_GPR[ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r] = ((uint32_t)(arm_mem_read8(ARM_M, TMP_EA)));
		}
		else {
			TMP_EA = TMP_REG2;
			TMP_SWORD = ((int32_t)(arm_mem_read32(ARM_M, TMP_EA)));
			if((ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r == 15)) {
				ARM_NPC = (((uint32_t)(TMP_SWORD)) & 0xfffffffeLU);
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_SWORD, 0), 5, 5);
			}
			else {
				if((ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r == 15))
					ARM_NPC = ((uint32_t)(TMP_SWORD));
				else
					ARM_GPR[ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r] = ((uint32_t)(TMP_SWORD));
			}
		}
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0)) {
			TMP_REG2 = (TMP_REG2 + TMP_REG3);
			if((ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r == 15))
				ARM_NPC = ((uint32_t)(TMP_REG2));
			else
				ARM_GPR[ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r] = ((uint32_t)(TMP_REG2));
		}
		else {
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setw)) == 1)) {
				if((ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r == 15))
					ARM_NPC = ((uint32_t)(TMP_REG2));
				else
					ARM_GPR[ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r] = ((uint32_t)(TMP_REG2));
			}
		}
		if(((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0) && (((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setw)) == 1)))
			ARM_APSR = arm_set_field32(ARM_APSR, TMP_FIVE, 4, 0);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BSS__40_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t newaddress;
	uint32_t targetAddress;
	uint8_t targetInstrSet;
	uint32_t imm32;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	if((ARM_BSS__40_x_cond_cond == 15)) {
		imm32 = ((uint32_t)(__ARM_EXTS32(6, ((int32_t)(arm_concat32(arm_concat32(ARM_BSS__40_x_signed_immed_24_n, ARM_BSS__40_x_setl, 24, 1), 0, 25, 1))))));
		targetInstrSet = 1;
		if(ARM_BSS__40_x_setl) {
			if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
				ARM_GPR[14] = (ARM_GPR[15] - 4);
			else
				ARM_GPR[14] = arm_concat32(arm_field32(ARM_GPR[15], 31, 1), 1, 31, 1);
		}
		if((targetInstrSet == 0))
			targetAddress = ((ARM_GPR[15] & ~(4 - 1)) + imm32);
		else
			targetAddress = (ARM_GPR[15] + imm32);
		__gtmp_1 = targetInstrSet;
		ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_1 >> 1), 24, 24);
		ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 5, 5);
		if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 0))
			ARM_NPC = arm_concat32(arm_field32(targetAddress, 31, 2), 0, 30, 2);
		else {
			if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 2)) {
				if(0)
					ARM_NPC = arm_field32(targetAddress, 31, 0);
				else {
					newaddress = targetAddress;
					ARM_NPC = newaddress;
				}
			}
			else
				ARM_NPC = arm_concat32(arm_field32(targetAddress, 31, 1), 0, 31, 1);
		}
	}
	else {
		switch(ARM_BSS__40_x_cond_cond) {
		case 0:
			__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
			break;
		case 1:
			__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
			break;
		case 2:
			__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
			break;
		case 3:
			__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
			break;
		case 4:
			__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
			break;
		case 5:
			__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
			break;
		case 6:
			__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
			break;
		case 7:
			__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
			break;
		case 8:
			__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
			break;
		case 9:
			__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
			break;
		case 10:
			__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
			break;
		case 11:
			__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
			break;
		case 12:
			__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
			break;
		case 13:
			__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
			break;
		case 14:
			__gtmp_0 = (1 == 1);
			break;
		case 15:
			__gtmp_0 = (1 == 0);
			break;
		}
		if(__gtmp_0) {
			if((((uint32_t)(ARM_BSS__40_x_setl)) == 1))
				ARM_GPR[14] = (ARM_BSS__40___IADDR + 4);
			TMP_SWORD = ((int32_t)(arm_concat32(((int32_t)(ARM_BSS__40_x_signed_immed_24_n)), 0, 30, 2)));
			ARM_NPC = ((uint32_t)((((int32_t)(ARM_GPR[15])) + TMP_SWORD)));
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BLXS_S_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_BLXS_S_0_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_GPR[14] = (ARM_BLXS_S_0___IADDR + 4);
		if((arm_concat8(arm_bit32(ARM_APSR, 24), arm_bit32(ARM_APSR, 5), 1, 1) == 3)) {
			if((((uint32_t)(arm_bit32(ARM_GPR[ARM_BLXS_S_0_x_rd_r], 0))) == 1))
				ARM_NPC = arm_concat32(arm_field32(ARM_GPR[ARM_BLXS_S_0_x_rd_r], 31, 1), 0, 31, 1);
		}
		else {
			if((((uint32_t)(arm_bit32(ARM_GPR[ARM_BLXS_S_0_x_rd_r], 0))) == 1)) {
				__gtmp_2 = 1;
				ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_2 >> 1), 24, 24);
				ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_2, 5, 5);
				ARM_NPC = arm_concat32(arm_field32(ARM_GPR[ARM_BLXS_S_0_x_rd_r], 31, 1), 0, 31, 1);
			}
			else {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_BLXS_S_0_x_rd_r], 1))) == 0)) {
					__gtmp_1 = 0;
					ARM_APSR = arm_set_field32(ARM_APSR, (__gtmp_1 >> 1), 24, 24);
					ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 5, 5);
					ARM_NPC = ARM_GPR[ARM_BLXS_S_0_x_rd_r];
				}
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BXS_S_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_BXS_S_0_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BXS_S_0_x_rd_r]));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 0), 5, 5);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(ARM_APSR, 5), 5, 5);
		ARM_NPC = (((uint32_t)(TMP_REG1)) & 0xfffffffeLU);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MOVS_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		TMP_SWORD = ((int32_t)(arm_concat16(ARM_MOVS_S___ID_x_imm4, ARM_MOVS_S___ID_x_imm12, 4, 12)));
		if((ARM_MOVS_S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_MOVS_S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((TMP_SWORD == ((int32_t)(0))) && (ARM_MOVS_S___ID_x_rd_r == 15)))
			ARM_GPR[0] = ((2 << 16) + 38);
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_MOVS_S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVTS_S___ID_0_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MOVTS_S___ID_0_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		TMP_SWORD = ((int32_t)(arm_concat32(arm_concat16(ARM_MOVTS_S___ID_0_x_imm4, ARM_MOVTS_S___ID_0_x_imm12, 4, 12), arm_field32(ARM_GPR[ARM_MOVTS_S___ID_0_x_rd_r], 15, 0), 16, 16)));
		if((ARM_MOVTS_S___ID_0_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_MOVTS_S___ID_0_x_rd_r] = ((uint32_t)(TMP_SWORD));
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_TSTS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG2;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_TSTS_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_TSTS_S___ID_x_rn_r]));
		Temp = (((uint32_t)(TMP_REG2)) & arm_rotate_right32(32, ((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_rotate)) << 1)));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_TSTS_S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG2;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_TSTS_S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_TSTS_S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		Temp = (((uint32_t)(TMP_REG2)) & __gtmp_13);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_TSTS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG2;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_TSTS_S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			switch(ARM_TSTS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_TSTS_S__S_x_rn_r]));
		switch(ARM_TSTS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r] << ARM_TSTS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r] >> ARM_TSTS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r])) >> ARM_TSTS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_TSTS_S__S_x_shifter_operand_r_r], ARM_TSTS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		Temp = (((uint32_t)(TMP_REG2)) & __gtmp_6);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_TEQS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG2;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_TEQS_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_TEQS_S___ID_x_rn_r]));
		Temp = (((uint32_t)(TMP_REG2)) ^ arm_rotate_right32(32, ((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_rotate)) << 1)));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_TEQS_S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG2;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_TEQS_S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_TEQS_S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		Temp = (((uint32_t)(TMP_REG2)) ^ __gtmp_13);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_TEQS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG2;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_TEQS_S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			switch(ARM_TEQS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_TEQS_S__S_x_rn_r]));
		switch(ARM_TEQS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r] << ARM_TEQS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r] >> ARM_TEQS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r])) >> ARM_TEQS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_TEQS_S__S_x_shifter_operand_r_r], ARM_TEQS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		Temp = (((uint32_t)(TMP_REG2)) ^ __gtmp_6);
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SUBSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_SUBSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SUBSS_S__S___ID_x_rn_r]));
		TMP_SWORD = (TMP_REG2 - ((int32_t)(arm_rotate_right32(32, ((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) << 1)))));
		if((ARM_SUBSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SUBSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SUBSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~arm_rotate_right32(32, ((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)))
					__gtmp_4 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~arm_rotate_right32(32, ((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_3 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_2 = 1;
						else
							__gtmp_2 = 0;
						__gtmp_3 = __gtmp_2;
					}
					__gtmp_4 = __gtmp_3;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_4)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_6 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_5 = 1;
					else
						__gtmp_5 = 0;
					__gtmp_6 = __gtmp_5;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SUBSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_SUBSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = (TMP_REG2 - ((int32_t)(__gtmp_13)));
		if((ARM_SUBSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SUBSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_20 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_19 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_19 = 0;
						__gtmp_14 = __gtmp_19;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_18 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_18 = 0;
						__gtmp_14 = __gtmp_18;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_17 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_16 = 0;
							else
								__gtmp_16 = 0xffffffffLU;
							__gtmp_17 = __gtmp_16;
						}
						__gtmp_14 = __gtmp_17;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_15 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_15 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_14 = __gtmp_15;
						break;
					}
					__gtmp_20 = __gtmp_14;
				}
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~__gtmp_20, 31))) == 1)))
					__gtmp_30 = 1;
				else {
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
						__gtmp_27 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
					else {
						switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_26 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_26 = 0;
							__gtmp_21 = __gtmp_26;
							break;
						case 1:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_25 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_25 = 0;
							__gtmp_21 = __gtmp_25;
							break;
						case 2:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_24 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_23 = 0;
								else
									__gtmp_23 = 0xffffffffLU;
								__gtmp_24 = __gtmp_23;
							}
							__gtmp_21 = __gtmp_24;
							break;
						case 3:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
								__gtmp_22 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
							else
								__gtmp_22 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
							__gtmp_21 = __gtmp_22;
							break;
						}
						__gtmp_27 = __gtmp_21;
					}
					if(((((uint32_t)(arm_bit32(~__gtmp_27, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_29 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_28 = 1;
						else
							__gtmp_28 = 0;
						__gtmp_29 = __gtmp_28;
					}
					__gtmp_30 = __gtmp_29;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_30)), 29, 29);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_37 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_36 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_36 = 0;
						__gtmp_31 = __gtmp_36;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_35 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_35 = 0;
						__gtmp_31 = __gtmp_35;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_34 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_33 = 0;
							else
								__gtmp_33 = 0xffffffffLU;
							__gtmp_34 = __gtmp_33;
						}
						__gtmp_31 = __gtmp_34;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_32 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_32 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_31 = __gtmp_32;
						break;
					}
					__gtmp_37 = __gtmp_31;
				}
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_37, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_46 = 1;
				else {
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
						__gtmp_44 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
					else {
						switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_43 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_43 = 0;
							__gtmp_38 = __gtmp_43;
							break;
						case 1:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_42 = (ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_42 = 0;
							__gtmp_38 = __gtmp_42;
							break;
						case 2:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_41 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_40 = 0;
								else
									__gtmp_40 = 0xffffffffLU;
								__gtmp_41 = __gtmp_40;
							}
							__gtmp_38 = __gtmp_41;
							break;
						case 3:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
								__gtmp_39 = ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r];
							else
								__gtmp_39 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
							__gtmp_38 = __gtmp_39;
							break;
						}
						__gtmp_44 = __gtmp_38;
					}
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_44, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_45 = 1;
					else
						__gtmp_45 = 0;
					__gtmp_46 = __gtmp_45;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_46)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SUBSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SUBSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_SUBSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S_x_rn_r]));
		switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] << ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = (TMP_REG2 - ((int32_t)(__gtmp_6)));
		if((ARM_SUBSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SUBSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SUBSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_17 = ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_17 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] << ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_17;
					break;
				case 1:
					if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_16 = 0;
					else
						__gtmp_16 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_16;
					break;
				case 2:
					if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_14 = 0;
						else
							__gtmp_14 = 0xffffffffLU;
						__gtmp_15 = __gtmp_14;
					}
					else
						__gtmp_15 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_15;
					break;
				case 3:
					if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_13 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_13 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_13;
					break;
				}
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~__gtmp_12, 31))) == 1)))
					__gtmp_26 = 1;
				else {
					switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_23 = ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r];
						else
							__gtmp_23 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] << ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_23;
						break;
					case 1:
						if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_22 = 0;
						else
							__gtmp_22 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_22;
						break;
					case 2:
						if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_20 = 0;
							else
								__gtmp_20 = 0xffffffffLU;
							__gtmp_21 = __gtmp_20;
						}
						else
							__gtmp_21 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_21;
						break;
					case 3:
						if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_19 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> 1));
						else
							__gtmp_19 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_19;
						break;
					}
					if(((((uint32_t)(arm_bit32(~__gtmp_18, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_25 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_24 = 1;
						else
							__gtmp_24 = 0;
						__gtmp_25 = __gtmp_24;
					}
					__gtmp_26 = __gtmp_25;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
				switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_32 = ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_32 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] << ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_32;
					break;
				case 1:
					if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_31 = 0;
					else
						__gtmp_31 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_31;
					break;
				case 2:
					if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_29 = 0;
						else
							__gtmp_29 = 0xffffffffLU;
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_30;
					break;
				case 3:
					if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_28 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_28 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_28;
					break;
				}
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_27, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_40 = 1;
				else {
					switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_38 = ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r];
						else
							__gtmp_38 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] << ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_38;
						break;
					case 1:
						if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_37 = 0;
						else
							__gtmp_37 = (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_37;
						break;
					case 2:
						if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_35 = 0;
							else
								__gtmp_35 = 0xffffffffLU;
							__gtmp_36 = __gtmp_35;
						}
						else
							__gtmp_36 = (((int32_t)(ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_36;
						break;
					case 3:
						if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_34 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r] >> 1));
						else
							__gtmp_34 = arm_rotate_right32(32, ARM_GPR[ARM_SUBSS_S__S__S_x_shifter_operand_r_r], ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_34;
						break;
					}
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_33, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_39 = 1;
					else
						__gtmp_39 = 0;
					__gtmp_40 = __gtmp_39;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_40)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SBCSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SBCSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_SBCSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_SBCSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_SBCSS_S__S___ID_x_rn_r]));
		TMP_SWORD = (TMP_REG2 - ((int32_t)(arm_rotate_right32(32, ((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_rotate)) << 1)))));
		if((ARM_SBCSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_SBCSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_SBCSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(~arm_rotate_right32(32, ((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)))
					__gtmp_4 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~arm_rotate_right32(32, ((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_3 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_2 = 1;
						else
							__gtmp_2 = 0;
						__gtmp_3 = __gtmp_2;
					}
					__gtmp_4 = __gtmp_3;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_4)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_6 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SBCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_5 = 1;
					else
						__gtmp_5 = 0;
					__gtmp_6 = __gtmp_5;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SBCSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SBCSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_SBCSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_SBCSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_SBCSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_SBCSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_SBCSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_SBCSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SBCSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_SBCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SBCSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_SBCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_SBCSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_SBCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSCSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_RSCSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_RSCSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSCSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_RSCSS_S__S___ID_x_rn_r]));
		TMP_REG2 = (TMP_REG2 + __ARM_EXTS8(31, ((int32_t)(!arm_bit32(ARM_APSR, 29)))));
		TMP_SWORD = (((int32_t)(arm_rotate_right32(32, ((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_rotate)) << 1)))) - TMP_REG2);
		if((ARM_RSCSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_RSCSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_RSCSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)))
					__gtmp_4 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_3 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)))
							__gtmp_2 = 1;
						else
							__gtmp_2 = 0;
						__gtmp_3 = __gtmp_2;
					}
					__gtmp_4 = __gtmp_3;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_4)), 29, 29);
				if((((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_6 = 1;
				else {
					if((((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_5 = 1;
					else
						__gtmp_5 = 0;
					__gtmp_6 = __gtmp_5;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSCSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_RSCSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_RSCSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_rn_r]));
		TMP_REG2 = (TMP_REG2 + __ARM_EXTS8(31, ((int32_t)(!arm_bit32(ARM_APSR, 29)))));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = (((int32_t)(__gtmp_13)) - TMP_REG2);
		if((ARM_RSCSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_RSCSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_20 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_19 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_19 = 0;
						__gtmp_14 = __gtmp_19;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_18 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_18 = 0;
						__gtmp_14 = __gtmp_18;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_17 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_16 = 0;
							else
								__gtmp_16 = 0xffffffffLU;
							__gtmp_17 = __gtmp_16;
						}
						__gtmp_14 = __gtmp_17;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_15 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_15 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_14 = __gtmp_15;
						break;
					}
					__gtmp_20 = __gtmp_14;
				}
				if(((((uint32_t)(arm_bit32(__gtmp_20, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)))
					__gtmp_30 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_29 = 1;
					else {
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
							__gtmp_27 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
						else {
							switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
							case 0:
								if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
									__gtmp_26 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
								else
									__gtmp_26 = 0;
								__gtmp_21 = __gtmp_26;
								break;
							case 1:
								if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
									__gtmp_25 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
								else
									__gtmp_25 = 0;
								__gtmp_21 = __gtmp_25;
								break;
							case 2:
								if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
									__gtmp_24 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
								else {
									if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
										__gtmp_23 = 0;
									else
										__gtmp_23 = 0xffffffffLU;
									__gtmp_24 = __gtmp_23;
								}
								__gtmp_21 = __gtmp_24;
								break;
							case 3:
								if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
									__gtmp_22 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
								else
									__gtmp_22 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
								__gtmp_21 = __gtmp_22;
								break;
							}
							__gtmp_27 = __gtmp_21;
						}
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1)))
							__gtmp_28 = 1;
						else
							__gtmp_28 = 0;
						__gtmp_29 = __gtmp_28;
					}
					__gtmp_30 = __gtmp_29;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_30)), 29, 29);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_37 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_36 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_36 = 0;
						__gtmp_31 = __gtmp_36;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_35 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_35 = 0;
						__gtmp_31 = __gtmp_35;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_34 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_33 = 0;
							else
								__gtmp_33 = 0xffffffffLU;
							__gtmp_34 = __gtmp_33;
						}
						__gtmp_31 = __gtmp_34;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_32 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_32 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_31 = __gtmp_32;
						break;
					}
					__gtmp_37 = __gtmp_31;
				}
				if((((((uint32_t)(arm_bit32(__gtmp_37, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_46 = 1;
				else {
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
						__gtmp_44 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
					else {
						switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_43 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_43 = 0;
							__gtmp_38 = __gtmp_43;
							break;
						case 1:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_42 = (ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_42 = 0;
							__gtmp_38 = __gtmp_42;
							break;
						case 2:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_41 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_40 = 0;
								else
									__gtmp_40 = 0xffffffffLU;
								__gtmp_41 = __gtmp_40;
							}
							__gtmp_38 = __gtmp_41;
							break;
						case 3:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
								__gtmp_39 = ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r];
							else
								__gtmp_39 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
							__gtmp_38 = __gtmp_39;
							break;
						}
						__gtmp_44 = __gtmp_38;
					}
					if((((((uint32_t)(arm_bit32(__gtmp_44, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_45 = 1;
					else
						__gtmp_45 = 0;
					__gtmp_46 = __gtmp_45;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_46)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSCSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_RSCSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_RSCSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S_x_rn_r]));
		TMP_REG2 = (TMP_REG2 + __ARM_EXTS8(31, ((int32_t)(!arm_bit32(ARM_APSR, 29)))));
		switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] << ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = (((int32_t)(__gtmp_6)) - TMP_REG2);
		if((ARM_RSCSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_RSCSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_RSCSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_17 = ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_17 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] << ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_17;
					break;
				case 1:
					if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_16 = 0;
					else
						__gtmp_16 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_16;
					break;
				case 2:
					if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_14 = 0;
						else
							__gtmp_14 = 0xffffffffLU;
						__gtmp_15 = __gtmp_14;
					}
					else
						__gtmp_15 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_15;
					break;
				case 3:
					if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_13 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_13 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_13;
					break;
				}
				if(((((uint32_t)(arm_bit32(__gtmp_12, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)))
					__gtmp_26 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_25 = 1;
					else {
						switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
								__gtmp_23 = ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r];
							else
								__gtmp_23 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] << ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
							__gtmp_18 = __gtmp_23;
							break;
						case 1:
							if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
								__gtmp_22 = 0;
							else
								__gtmp_22 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
							__gtmp_18 = __gtmp_22;
							break;
						case 2:
							if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_20 = 0;
								else
									__gtmp_20 = 0xffffffffLU;
								__gtmp_21 = __gtmp_20;
							}
							else
								__gtmp_21 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
							__gtmp_18 = __gtmp_21;
							break;
						case 3:
							if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
								__gtmp_19 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> 1));
							else
								__gtmp_19 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
							__gtmp_18 = __gtmp_19;
							break;
						}
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_18, 31))) == 1)))
							__gtmp_24 = 1;
						else
							__gtmp_24 = 0;
						__gtmp_25 = __gtmp_24;
					}
					__gtmp_26 = __gtmp_25;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
				switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_32 = ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_32 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] << ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_32;
					break;
				case 1:
					if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_31 = 0;
					else
						__gtmp_31 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_31;
					break;
				case 2:
					if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_29 = 0;
						else
							__gtmp_29 = 0xffffffffLU;
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_30;
					break;
				case 3:
					if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_28 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_28 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_28;
					break;
				}
				if((((((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_40 = 1;
				else {
					switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_38 = ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r];
						else
							__gtmp_38 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] << ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_38;
						break;
					case 1:
						if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_37 = 0;
						else
							__gtmp_37 = (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_37;
						break;
					case 2:
						if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_35 = 0;
							else
								__gtmp_35 = 0xffffffffLU;
							__gtmp_36 = __gtmp_35;
						}
						else
							__gtmp_36 = (((int32_t)(ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_36;
						break;
					case 3:
						if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_34 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r] >> 1));
						else
							__gtmp_34 = arm_rotate_right32(32, ARM_GPR[ARM_RSCSS_S__S__S_x_shifter_operand_r_r], ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_34;
						break;
					}
					if((((((uint32_t)(arm_bit32(__gtmp_33, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_39 = 1;
					else
						__gtmp_39 = 0;
					__gtmp_40 = __gtmp_39;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_40)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSBSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_RSBSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_RSBSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S___ID_x_rn_r]));
		TMP_SWORD = (((int32_t)(arm_rotate_right32(32, ((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) << 1)))) - TMP_REG2);
		if((ARM_RSBSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_RSBSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_RSBSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)))
					__gtmp_4 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_3 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)))
							__gtmp_2 = 1;
						else
							__gtmp_2 = 0;
						__gtmp_3 = __gtmp_2;
					}
					__gtmp_4 = __gtmp_3;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_4)), 29, 29);
				if((((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_6 = 1;
				else {
					if((((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_5 = 1;
					else
						__gtmp_5 = 0;
					__gtmp_6 = __gtmp_5;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSBSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_RSBSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_RSBSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = (((int32_t)(__gtmp_13)) - TMP_REG2);
		if((ARM_RSBSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_RSBSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_20 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_19 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_19 = 0;
						__gtmp_14 = __gtmp_19;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_18 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_18 = 0;
						__gtmp_14 = __gtmp_18;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_17 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_16 = 0;
							else
								__gtmp_16 = 0xffffffffLU;
							__gtmp_17 = __gtmp_16;
						}
						__gtmp_14 = __gtmp_17;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_15 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_15 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_14 = __gtmp_15;
						break;
					}
					__gtmp_20 = __gtmp_14;
				}
				if(((((uint32_t)(arm_bit32(__gtmp_20, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)))
					__gtmp_30 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_29 = 1;
					else {
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
							__gtmp_27 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
						else {
							switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
							case 0:
								if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
									__gtmp_26 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
								else
									__gtmp_26 = 0;
								__gtmp_21 = __gtmp_26;
								break;
							case 1:
								if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
									__gtmp_25 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
								else
									__gtmp_25 = 0;
								__gtmp_21 = __gtmp_25;
								break;
							case 2:
								if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
									__gtmp_24 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
								else {
									if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
										__gtmp_23 = 0;
									else
										__gtmp_23 = 0xffffffffLU;
									__gtmp_24 = __gtmp_23;
								}
								__gtmp_21 = __gtmp_24;
								break;
							case 3:
								if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
									__gtmp_22 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
								else
									__gtmp_22 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
								__gtmp_21 = __gtmp_22;
								break;
							}
							__gtmp_27 = __gtmp_21;
						}
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1)))
							__gtmp_28 = 1;
						else
							__gtmp_28 = 0;
						__gtmp_29 = __gtmp_28;
					}
					__gtmp_30 = __gtmp_29;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_30)), 29, 29);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_37 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_36 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_36 = 0;
						__gtmp_31 = __gtmp_36;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_35 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_35 = 0;
						__gtmp_31 = __gtmp_35;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_34 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_33 = 0;
							else
								__gtmp_33 = 0xffffffffLU;
							__gtmp_34 = __gtmp_33;
						}
						__gtmp_31 = __gtmp_34;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_32 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_32 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_31 = __gtmp_32;
						break;
					}
					__gtmp_37 = __gtmp_31;
				}
				if((((((uint32_t)(arm_bit32(__gtmp_37, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_46 = 1;
				else {
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
						__gtmp_44 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
					else {
						switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_43 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_43 = 0;
							__gtmp_38 = __gtmp_43;
							break;
						case 1:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_42 = (ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_42 = 0;
							__gtmp_38 = __gtmp_42;
							break;
						case 2:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_41 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_40 = 0;
								else
									__gtmp_40 = 0xffffffffLU;
								__gtmp_41 = __gtmp_40;
							}
							__gtmp_38 = __gtmp_41;
							break;
						case 3:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
								__gtmp_39 = ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r];
							else
								__gtmp_39 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
							__gtmp_38 = __gtmp_39;
							break;
						}
						__gtmp_44 = __gtmp_38;
					}
					if((((((uint32_t)(arm_bit32(__gtmp_44, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_45 = 1;
					else
						__gtmp_45 = 0;
					__gtmp_46 = __gtmp_45;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_46)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_RSBSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_RSBSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_RSBSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S_x_rn_r]));
		switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] << ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = (((int32_t)(__gtmp_6)) - TMP_REG2);
		if((ARM_RSBSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_RSBSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_RSBSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_17 = ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_17 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] << ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_17;
					break;
				case 1:
					if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_16 = 0;
					else
						__gtmp_16 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_16;
					break;
				case 2:
					if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_14 = 0;
						else
							__gtmp_14 = 0xffffffffLU;
						__gtmp_15 = __gtmp_14;
					}
					else
						__gtmp_15 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_15;
					break;
				case 3:
					if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_13 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_13 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_13;
					break;
				}
				if(((((uint32_t)(arm_bit32(__gtmp_12, 31))) == 1) && (((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1)))
					__gtmp_26 = 1;
				else {
					if(((((uint32_t)(arm_bit32(~TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_25 = 1;
					else {
						switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
								__gtmp_23 = ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r];
							else
								__gtmp_23 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] << ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
							__gtmp_18 = __gtmp_23;
							break;
						case 1:
							if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
								__gtmp_22 = 0;
							else
								__gtmp_22 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
							__gtmp_18 = __gtmp_22;
							break;
						case 2:
							if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_20 = 0;
								else
									__gtmp_20 = 0xffffffffLU;
								__gtmp_21 = __gtmp_20;
							}
							else
								__gtmp_21 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
							__gtmp_18 = __gtmp_21;
							break;
						case 3:
							if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
								__gtmp_19 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> 1));
							else
								__gtmp_19 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
							__gtmp_18 = __gtmp_19;
							break;
						}
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_18, 31))) == 1)))
							__gtmp_24 = 1;
						else
							__gtmp_24 = 0;
						__gtmp_25 = __gtmp_24;
					}
					__gtmp_26 = __gtmp_25;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
				switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_32 = ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_32 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] << ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_32;
					break;
				case 1:
					if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_31 = 0;
					else
						__gtmp_31 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_31;
					break;
				case 2:
					if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_29 = 0;
						else
							__gtmp_29 = 0xffffffffLU;
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_30;
					break;
				case 3:
					if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_28 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_28 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_28;
					break;
				}
				if((((((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_40 = 1;
				else {
					switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_38 = ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r];
						else
							__gtmp_38 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] << ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_38;
						break;
					case 1:
						if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_37 = 0;
						else
							__gtmp_37 = (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_37;
						break;
					case 2:
						if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_35 = 0;
							else
								__gtmp_35 = 0xffffffffLU;
							__gtmp_36 = __gtmp_35;
						}
						else
							__gtmp_36 = (((int32_t)(ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r])) >> ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_36;
						break;
					case 3:
						if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_34 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r] >> 1));
						else
							__gtmp_34 = arm_rotate_right32(32, ARM_GPR[ARM_RSBSS_S__S__S_x_shifter_operand_r_r], ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_34;
						break;
					}
					if((((((uint32_t)(arm_bit32(__gtmp_33, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_39 = 1;
					else
						__gtmp_39 = 0;
					__gtmp_40 = __gtmp_39;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_40)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ORRSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ORRSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ORRSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ORRSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ORRSS_S__S___ID_x_rn_r]));
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) | arm_rotate_right32(32, ((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_rotate)) << 1)))));
		if((ARM_ORRSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ORRSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ORRSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ORRSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ORRSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ORRSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) | __gtmp_13)));
		if((ARM_ORRSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ORRSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ORRSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ORRSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ORRSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ORRSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_ORRSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ORRSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ORRSS_S__S__S_x_rn_r]));
		switch(ARM_ORRSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r] << ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r] >> ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_ORRSS_S__S__S_x_shifter_operand_r_r], ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) | __gtmp_6)));
		if((ARM_ORRSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ORRSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ORRSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MVNSS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MVNSS_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_MVNSS_S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_SWORD = ((int32_t)(~arm_rotate_right32(32, ((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_rotate)) << 1))));
		if((ARM_MVNSS_S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_MVNSS_S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_MVNSS_S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MVNSS_S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MVNSS_S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_MVNSS_S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = ((int32_t)(~__gtmp_13));
		if((ARM_MVNSS_S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_MVNSS_S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_MVNSS_S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MVNSS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MVNSS_S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_MVNSS_S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_MVNSS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		switch(ARM_MVNSS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r] << ARM_MVNSS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r] >> ARM_MVNSS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r])) >> ARM_MVNSS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_MVNSS_S__S_x_shifter_operand_r_r], ARM_MVNSS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = ((int32_t)(~__gtmp_6));
		if((ARM_MVNSS_S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_MVNSS_S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_MVNSS_S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVSS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MOVSS_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_MOVSS_S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_SWORD = arm_rotate_right32(32, ((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_rotate)) << 1));
		if((ARM_MOVSS_S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_MOVSS_S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((TMP_SWORD == ((int32_t)(0))) && (ARM_MOVSS_S___ID_x_rd_r == 15)))
			ARM_GPR[0] = ((2 << 16) + 38);
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_MOVSS_S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVSS_S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MOVSS_S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_MOVSS_S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = __gtmp_13;
		if((ARM_MOVSS_S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_MOVSS_S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((TMP_SWORD == ((int32_t)(0))) && (ARM_MOVSS_S__S__S_S_x_rd_r == 15)))
			ARM_GPR[0] = ((2 << 16) + 38);
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_MOVSS_S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_MOVSS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_REG1;
	int32_t TMP_SWORD;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_MOVSS_S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_MOVSS_S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_MOVSS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		switch(ARM_MOVSS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r] << ARM_MOVSS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r] >> ARM_MOVSS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r])) >> ARM_MOVSS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_MOVSS_S__S_x_shifter_operand_r_r], ARM_MOVSS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = __gtmp_6;
		if((ARM_MOVSS_S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_MOVSS_S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((TMP_SWORD == ((int32_t)(0))) && (ARM_MOVSS_S__S_x_rd_r == 15)))
			ARM_GPR[0] = ((2 << 16) + 38);
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_MOVSS_S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_EORSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_EORSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_EORSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_EORSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_EORSS_S__S___ID_x_rn_r]));
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) ^ arm_rotate_right32(32, ((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_rotate)) << 1)))));
		if((ARM_EORSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_EORSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_EORSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_EORSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_EORSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_EORSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) ^ __gtmp_13)));
		if((ARM_EORSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_EORSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_EORSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_EORSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_EORSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_EORSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_EORSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_EORSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_EORSS_S__S__S_x_rn_r]));
		switch(ARM_EORSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r] << ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r] >> ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r])) >> ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_EORSS_S__S__S_x_shifter_operand_r_r], ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) ^ __gtmp_6)));
		if((ARM_EORSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_EORSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_EORSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMPS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_CMPS_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_CMPS_S___ID_x_rn_r]));
		Temp = ((uint32_t)((TMP_REG1 - ((int32_t)(arm_rotate_right32(32, ((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) << 1)))))));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(~arm_rotate_right32(32, ((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)))
			__gtmp_4 = 1;
		else {
			if(((((uint32_t)(arm_bit32(~arm_rotate_right32(32, ((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_3 = 1;
			else {
				if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_3 = __gtmp_2;
			}
			__gtmp_4 = __gtmp_3;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_4)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
			__gtmp_6 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
				__gtmp_5 = 1;
			else
				__gtmp_5 = 0;
			__gtmp_6 = __gtmp_5;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 28, 28);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMPS_S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_CMPS_S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_CMPS_S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		Temp = ((uint32_t)((TMP_REG1 - ((int32_t)(__gtmp_13)))));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_20 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_19 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_19 = 0;
				__gtmp_14 = __gtmp_19;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_18 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_18 = 0;
				__gtmp_14 = __gtmp_18;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_17 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_16 = 0;
					else
						__gtmp_16 = 0xffffffffLU;
					__gtmp_17 = __gtmp_16;
				}
				__gtmp_14 = __gtmp_17;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_15 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_15 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_14 = __gtmp_15;
				break;
			}
			__gtmp_20 = __gtmp_14;
		}
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(~__gtmp_20, 31))) == 1)))
			__gtmp_30 = 1;
		else {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_27 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
			else {
				switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_26 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else
						__gtmp_26 = 0;
					__gtmp_21 = __gtmp_26;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_25 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else
						__gtmp_25 = 0;
					__gtmp_21 = __gtmp_25;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_24 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_23 = 0;
						else
							__gtmp_23 = 0xffffffffLU;
						__gtmp_24 = __gtmp_23;
					}
					__gtmp_21 = __gtmp_24;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
						__gtmp_22 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
					else
						__gtmp_22 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
					__gtmp_21 = __gtmp_22;
					break;
				}
				__gtmp_27 = __gtmp_21;
			}
			if(((((uint32_t)(arm_bit32(~__gtmp_27, 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_29 = 1;
			else {
				if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_28 = 1;
				else
					__gtmp_28 = 0;
				__gtmp_29 = __gtmp_28;
			}
			__gtmp_30 = __gtmp_29;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_30)), 29, 29);
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_37 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_36 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_36 = 0;
				__gtmp_31 = __gtmp_36;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_35 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_35 = 0;
				__gtmp_31 = __gtmp_35;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_34 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_33 = 0;
					else
						__gtmp_33 = 0xffffffffLU;
					__gtmp_34 = __gtmp_33;
				}
				__gtmp_31 = __gtmp_34;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_32 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_32 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_31 = __gtmp_32;
				break;
			}
			__gtmp_37 = __gtmp_31;
		}
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_37, 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
			__gtmp_46 = 1;
		else {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_44 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
			else {
				switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_43 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else
						__gtmp_43 = 0;
					__gtmp_38 = __gtmp_43;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_42 = (ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else
						__gtmp_42 = 0;
					__gtmp_38 = __gtmp_42;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_41 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_40 = 0;
						else
							__gtmp_40 = 0xffffffffLU;
						__gtmp_41 = __gtmp_40;
					}
					__gtmp_38 = __gtmp_41;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
						__gtmp_39 = ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r];
					else
						__gtmp_39 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
					__gtmp_38 = __gtmp_39;
					break;
				}
				__gtmp_44 = __gtmp_38;
			}
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_44, 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
				__gtmp_45 = 1;
			else
				__gtmp_45 = 0;
			__gtmp_46 = __gtmp_45;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_46)), 28, 28);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMPS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_CMPS_S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_CMPS_S__S_x_rn_r]));
		switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] << ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r])) >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		Temp = ((uint32_t)((TMP_REG1 - ((int32_t)(__gtmp_6)))));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_17 = ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_17 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] << ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_12 = __gtmp_17;
			break;
		case 1:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_16 = 0;
			else
				__gtmp_16 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_12 = __gtmp_16;
			break;
		case 2:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_14 = 0;
				else
					__gtmp_14 = 0xffffffffLU;
				__gtmp_15 = __gtmp_14;
			}
			else
				__gtmp_15 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r])) >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_12 = __gtmp_15;
			break;
		case 3:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_13 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_13 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_12 = __gtmp_13;
			break;
		}
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(~__gtmp_12, 31))) == 1)))
			__gtmp_26 = 1;
		else {
			switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_23 = ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r];
				else
					__gtmp_23 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] << ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_18 = __gtmp_23;
				break;
			case 1:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_22 = 0;
				else
					__gtmp_22 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_18 = __gtmp_22;
				break;
			case 2:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_20 = 0;
					else
						__gtmp_20 = 0xffffffffLU;
					__gtmp_21 = __gtmp_20;
				}
				else
					__gtmp_21 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r])) >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_18 = __gtmp_21;
				break;
			case 3:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_19 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> 1));
				else
					__gtmp_19 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_18 = __gtmp_19;
				break;
			}
			if(((((uint32_t)(arm_bit32(~__gtmp_18, 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_25 = 1;
			else {
				if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_24 = 1;
				else
					__gtmp_24 = 0;
				__gtmp_25 = __gtmp_24;
			}
			__gtmp_26 = __gtmp_25;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
		switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_32 = ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_32 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] << ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_27 = __gtmp_32;
			break;
		case 1:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_31 = 0;
			else
				__gtmp_31 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_27 = __gtmp_31;
			break;
		case 2:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_29 = 0;
				else
					__gtmp_29 = 0xffffffffLU;
				__gtmp_30 = __gtmp_29;
			}
			else
				__gtmp_30 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r])) >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_27 = __gtmp_30;
			break;
		case 3:
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_28 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_28 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_27 = __gtmp_28;
			break;
		}
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_27, 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
			__gtmp_40 = 1;
		else {
			switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_38 = ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r];
				else
					__gtmp_38 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] << ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_33 = __gtmp_38;
				break;
			case 1:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_37 = 0;
				else
					__gtmp_37 = (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_33 = __gtmp_37;
				break;
			case 2:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_35 = 0;
					else
						__gtmp_35 = 0xffffffffLU;
					__gtmp_36 = __gtmp_35;
				}
				else
					__gtmp_36 = (((int32_t)(ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r])) >> ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_33 = __gtmp_36;
				break;
			case 3:
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_34 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r] >> 1));
				else
					__gtmp_34 = arm_rotate_right32(32, ARM_GPR[ARM_CMPS_S__S_x_shifter_operand_r_r], ARM_CMPS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_33 = __gtmp_34;
				break;
			}
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_33, 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
				__gtmp_39 = 1;
			else
				__gtmp_39 = 0;
			__gtmp_40 = __gtmp_39;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_40)), 28, 28);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMNS_S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_CMNS_S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_CMNS_S___ID_x_rn_r]));
		Temp = ((uint32_t)((TMP_REG1 + ((int32_t)(arm_rotate_right32(32, ((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) << 1)))))));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)))
			__gtmp_4 = 1;
		else {
			if(((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_3 = 1;
			else {
				if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_2 = 1;
				else
					__gtmp_2 = 0;
				__gtmp_3 = __gtmp_2;
			}
			__gtmp_4 = __gtmp_3;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_4)), 29, 29);
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
			__gtmp_6 = 1;
		else {
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
				__gtmp_5 = 1;
			else
				__gtmp_5 = 0;
			__gtmp_6 = __gtmp_5;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 28, 28);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMNS_S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_CMNS_S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_CMNS_S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		Temp = ((uint32_t)((TMP_REG1 + ((int32_t)(__gtmp_13)))));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_20 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_19 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_19 = 0;
				__gtmp_14 = __gtmp_19;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_18 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_18 = 0;
				__gtmp_14 = __gtmp_18;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_17 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_16 = 0;
					else
						__gtmp_16 = 0xffffffffLU;
					__gtmp_17 = __gtmp_16;
				}
				__gtmp_14 = __gtmp_17;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_15 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_15 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_14 = __gtmp_15;
				break;
			}
			__gtmp_20 = __gtmp_14;
		}
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_20, 31))) == 1)))
			__gtmp_30 = 1;
		else {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_27 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
			else {
				switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_26 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else
						__gtmp_26 = 0;
					__gtmp_21 = __gtmp_26;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_25 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else
						__gtmp_25 = 0;
					__gtmp_21 = __gtmp_25;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_24 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_23 = 0;
						else
							__gtmp_23 = 0xffffffffLU;
						__gtmp_24 = __gtmp_23;
					}
					__gtmp_21 = __gtmp_24;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
						__gtmp_22 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
					else
						__gtmp_22 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
					__gtmp_21 = __gtmp_22;
					break;
				}
				__gtmp_27 = __gtmp_21;
			}
			if(((((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_29 = 1;
			else {
				if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_28 = 1;
				else
					__gtmp_28 = 0;
				__gtmp_29 = __gtmp_28;
			}
			__gtmp_30 = __gtmp_29;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_30)), 29, 29);
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_37 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_36 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_36 = 0;
				__gtmp_31 = __gtmp_36;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_35 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_35 = 0;
				__gtmp_31 = __gtmp_35;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_34 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_33 = 0;
					else
						__gtmp_33 = 0xffffffffLU;
					__gtmp_34 = __gtmp_33;
				}
				__gtmp_31 = __gtmp_34;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_32 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_32 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_31 = __gtmp_32;
				break;
			}
			__gtmp_37 = __gtmp_31;
		}
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_37, 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
			__gtmp_46 = 1;
		else {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_44 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
			else {
				switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_43 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else
						__gtmp_43 = 0;
					__gtmp_38 = __gtmp_43;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_42 = (ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else
						__gtmp_42 = 0;
					__gtmp_38 = __gtmp_42;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_41 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
					else {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_40 = 0;
						else
							__gtmp_40 = 0xffffffffLU;
						__gtmp_41 = __gtmp_40;
					}
					__gtmp_38 = __gtmp_41;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
						__gtmp_39 = ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r];
					else
						__gtmp_39 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
					__gtmp_38 = __gtmp_39;
					break;
				}
				__gtmp_44 = __gtmp_38;
			}
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_44, 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
				__gtmp_45 = 1;
			else
				__gtmp_45 = 0;
			__gtmp_46 = __gtmp_45;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_46)), 28, 28);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_CMNS_S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	uint32_t Temp;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_CMNS_S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		if(ARM_SBIT) {
			switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_CMNS_S__S_x_rn_r]));
		switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] << ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r])) >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		Temp = ((uint32_t)((TMP_REG1 + ((int32_t)(__gtmp_6)))));
		ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(Temp, 31), 31, 31);
		if((Temp == 0))
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
		else
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
		switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_17 = ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_17 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] << ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_12 = __gtmp_17;
			break;
		case 1:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_16 = 0;
			else
				__gtmp_16 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_12 = __gtmp_16;
			break;
		case 2:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_14 = 0;
				else
					__gtmp_14 = 0xffffffffLU;
				__gtmp_15 = __gtmp_14;
			}
			else
				__gtmp_15 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r])) >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_12 = __gtmp_15;
			break;
		case 3:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_13 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_13 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_12 = __gtmp_13;
			break;
		}
		if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_12, 31))) == 1)))
			__gtmp_26 = 1;
		else {
			switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_23 = ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r];
				else
					__gtmp_23 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] << ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_18 = __gtmp_23;
				break;
			case 1:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_22 = 0;
				else
					__gtmp_22 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_18 = __gtmp_22;
				break;
			case 2:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_20 = 0;
					else
						__gtmp_20 = 0xffffffffLU;
					__gtmp_21 = __gtmp_20;
				}
				else
					__gtmp_21 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r])) >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_18 = __gtmp_21;
				break;
			case 3:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_19 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> 1));
				else
					__gtmp_19 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_18 = __gtmp_19;
				break;
			}
			if(((((uint32_t)(arm_bit32(__gtmp_18, 31))) == 1) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
				__gtmp_25 = 1;
			else {
				if(((((uint32_t)(arm_bit32(Temp, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
					__gtmp_24 = 1;
				else
					__gtmp_24 = 0;
				__gtmp_25 = __gtmp_24;
			}
			__gtmp_26 = __gtmp_25;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
		switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_32 = ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r];
			else
				__gtmp_32 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] << ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_27 = __gtmp_32;
			break;
		case 1:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_31 = 0;
			else
				__gtmp_31 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_27 = __gtmp_31;
			break;
		case 2:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_29 = 0;
				else
					__gtmp_29 = 0xffffffffLU;
				__gtmp_30 = __gtmp_29;
			}
			else
				__gtmp_30 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r])) >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_27 = __gtmp_30;
			break;
		case 3:
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_28 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_28 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
			__gtmp_27 = __gtmp_28;
			break;
		}
		if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1)) && (((uint32_t)(arm_bit32(Temp, 31))) == 0)))
			__gtmp_40 = 1;
		else {
			switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_38 = ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r];
				else
					__gtmp_38 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] << ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_33 = __gtmp_38;
				break;
			case 1:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_37 = 0;
				else
					__gtmp_37 = (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_33 = __gtmp_37;
				break;
			case 2:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0)) {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_35 = 0;
					else
						__gtmp_35 = 0xffffffffLU;
					__gtmp_36 = __gtmp_35;
				}
				else
					__gtmp_36 = (((int32_t)(ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r])) >> ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_33 = __gtmp_36;
				break;
			case 3:
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_34 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r] >> 1));
				else
					__gtmp_34 = arm_rotate_right32(32, ARM_GPR[ARM_CMNS_S__S_x_shifter_operand_r_r], ARM_CMNS_S__S_x_shifter_operand_shiftAmt);
				__gtmp_33 = __gtmp_34;
				break;
			}
			if((((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_33, 31))) == 0)) && (((uint32_t)(arm_bit32(Temp, 31))) == 1)))
				__gtmp_39 = 1;
			else
				__gtmp_39 = 0;
			__gtmp_40 = __gtmp_39;
		}
		ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_40)), 28, 28);
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BICSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_BICSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_BICSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BICSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_BICSS_S__S___ID_x_rn_r]));
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) & ~arm_rotate_right32(32, ((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_rotate)) << 1)))));
		if((ARM_BICSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_BICSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_BICSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BICSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_BICSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_BICSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) & ~__gtmp_13)));
		if((ARM_BICSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_BICSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_BICSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_BICSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_BICSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_BICSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_BICSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_BICSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_BICSS_S__S__S_x_rn_r]));
		switch(ARM_BICSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r] << ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r] >> ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r])) >> ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_BICSS_S__S__S_x_shifter_operand_r_r], ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) & ~__gtmp_6)));
		if((ARM_BICSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_BICSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_BICSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ANDSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ANDSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ANDSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ANDSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ANDSS_S__S___ID_x_rn_r]));
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) & arm_rotate_right32(32, ((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_rotate)) << 1)))));
		if((ARM_ANDSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ANDSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ANDSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ANDSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ANDSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ANDSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) & __gtmp_13)));
		if((ARM_ANDSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ANDSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ANDSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ANDSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ANDSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ANDSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_ANDSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ANDSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ANDSS_S__S__S_x_rn_r]));
		switch(ARM_ANDSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r] << ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r] >> ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_ANDSS_S__S__S_x_shifter_operand_r_r], ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = ((int32_t)((((uint32_t)(TMP_REG2)) & __gtmp_6)));
		if((ARM_ANDSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ANDSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ANDSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ADDSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ADDSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = (TMP_REG2 + ((int32_t)(__gtmp_13)));
		if((ARM_ADDSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADDSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_20 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_19 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_19 = 0;
						__gtmp_14 = __gtmp_19;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_18 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_18 = 0;
						__gtmp_14 = __gtmp_18;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_17 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_16 = 0;
							else
								__gtmp_16 = 0xffffffffLU;
							__gtmp_17 = __gtmp_16;
						}
						__gtmp_14 = __gtmp_17;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_15 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_15 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_14 = __gtmp_15;
						break;
					}
					__gtmp_20 = __gtmp_14;
				}
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_20, 31))) == 1)))
					__gtmp_30 = 1;
				else {
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
						__gtmp_27 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
					else {
						switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_26 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_26 = 0;
							__gtmp_21 = __gtmp_26;
							break;
						case 1:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_25 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_25 = 0;
							__gtmp_21 = __gtmp_25;
							break;
						case 2:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_24 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_23 = 0;
								else
									__gtmp_23 = 0xffffffffLU;
								__gtmp_24 = __gtmp_23;
							}
							__gtmp_21 = __gtmp_24;
							break;
						case 3:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
								__gtmp_22 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
							else
								__gtmp_22 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
							__gtmp_21 = __gtmp_22;
							break;
						}
						__gtmp_27 = __gtmp_21;
					}
					if(((((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_29 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_28 = 1;
						else
							__gtmp_28 = 0;
						__gtmp_29 = __gtmp_28;
					}
					__gtmp_30 = __gtmp_29;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_30)), 29, 29);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_37 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_36 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_36 = 0;
						__gtmp_31 = __gtmp_36;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_35 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_35 = 0;
						__gtmp_31 = __gtmp_35;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_34 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_33 = 0;
							else
								__gtmp_33 = 0xffffffffLU;
							__gtmp_34 = __gtmp_33;
						}
						__gtmp_31 = __gtmp_34;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_32 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_32 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_31 = __gtmp_32;
						break;
					}
					__gtmp_37 = __gtmp_31;
				}
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_37, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_46 = 1;
				else {
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
						__gtmp_44 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
					else {
						switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_43 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_43 = 0;
							__gtmp_38 = __gtmp_43;
							break;
						case 1:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_42 = (ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_42 = 0;
							__gtmp_38 = __gtmp_42;
							break;
						case 2:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_41 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_40 = 0;
								else
									__gtmp_40 = 0xffffffffLU;
								__gtmp_41 = __gtmp_40;
							}
							__gtmp_38 = __gtmp_41;
							break;
						case 3:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
								__gtmp_39 = ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r];
							else
								__gtmp_39 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
							__gtmp_38 = __gtmp_39;
							break;
						}
						__gtmp_44 = __gtmp_38;
					}
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_44, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_45 = 1;
					else
						__gtmp_45 = 0;
					__gtmp_46 = __gtmp_45;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_46)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ADDSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ADDSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S_x_rn_r]));
		switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] << ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = (TMP_REG2 + ((int32_t)(__gtmp_6)));
		if((ARM_ADDSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ADDSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADDSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_17 = ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_17 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] << ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_17;
					break;
				case 1:
					if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_16 = 0;
					else
						__gtmp_16 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_16;
					break;
				case 2:
					if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_14 = 0;
						else
							__gtmp_14 = 0xffffffffLU;
						__gtmp_15 = __gtmp_14;
					}
					else
						__gtmp_15 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_15;
					break;
				case 3:
					if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_13 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_13 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_13;
					break;
				}
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_12, 31))) == 1)))
					__gtmp_26 = 1;
				else {
					switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_23 = ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r];
						else
							__gtmp_23 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] << ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_23;
						break;
					case 1:
						if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_22 = 0;
						else
							__gtmp_22 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_22;
						break;
					case 2:
						if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_20 = 0;
							else
								__gtmp_20 = 0xffffffffLU;
							__gtmp_21 = __gtmp_20;
						}
						else
							__gtmp_21 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_21;
						break;
					case 3:
						if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_19 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> 1));
						else
							__gtmp_19 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_19;
						break;
					}
					if(((((uint32_t)(arm_bit32(__gtmp_18, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_25 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_24 = 1;
						else
							__gtmp_24 = 0;
						__gtmp_25 = __gtmp_24;
					}
					__gtmp_26 = __gtmp_25;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
				switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_32 = ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_32 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] << ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_32;
					break;
				case 1:
					if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_31 = 0;
					else
						__gtmp_31 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_31;
					break;
				case 2:
					if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_29 = 0;
						else
							__gtmp_29 = 0xffffffffLU;
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_30;
					break;
				case 3:
					if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_28 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_28 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_28;
					break;
				}
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_40 = 1;
				else {
					switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_38 = ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r];
						else
							__gtmp_38 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] << ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_38;
						break;
					case 1:
						if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_37 = 0;
						else
							__gtmp_37 = (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_37;
						break;
					case 2:
						if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_35 = 0;
							else
								__gtmp_35 = 0xffffffffLU;
							__gtmp_36 = __gtmp_35;
						}
						else
							__gtmp_36 = (((int32_t)(ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_36;
						break;
					case 3:
						if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_34 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r] >> 1));
						else
							__gtmp_34 = arm_rotate_right32(32, ARM_GPR[ARM_ADDSS_S__S__S_x_shifter_operand_r_r], ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_34;
						break;
					}
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_33, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_39 = 1;
					else
						__gtmp_39 = 0;
					__gtmp_40 = __gtmp_39;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_40)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADCSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ADCSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ADCSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADCSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADCSS_S__S___ID_x_rn_r]));
		TMP_SWORD = ((TMP_REG2 + ((int32_t)(arm_rotate_right32(32, ((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_rotate)) << 1))))) + __ARM_EXTS8(31, ((int32_t)(arm_bit32(ARM_APSR, 29)))));
		if((ARM_ADCSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ADCSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADCSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)))
					__gtmp_4 = 1;
				else {
					if(((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_3 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_2 = 1;
						else
							__gtmp_2 = 0;
						__gtmp_3 = __gtmp_2;
					}
					__gtmp_4 = __gtmp_3;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_4)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_6 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADCSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_5 = 1;
					else
						__gtmp_5 = 0;
					__gtmp_6 = __gtmp_5;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADCSS_S__S__S__S_S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_46;
	uint32_t __gtmp_45;
	uint32_t __gtmp_44;
	uint32_t __gtmp_43;
	uint32_t __gtmp_42;
	uint32_t __gtmp_41;
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ADCSS_S__S__S__S_S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ADCSS_S__S__S__S_S_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
				__gtmp_6 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
			else {
				switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_5 = ((ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_5 = 0;
					__gtmp_1 = __gtmp_5;
					break;
				case 1:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) <= 32))
						__gtmp_4 = ((ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_4 = 0;
					__gtmp_1 = __gtmp_4;
					break;
				case 2:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
						__gtmp_3 = ((ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> (32 - ((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))))) & 1);
					else
						__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_3;
					break;
				case 3:
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) != 0))
						__gtmp_2 = ((ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0)) & 1);
					else
						__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], 31)));
					__gtmp_1 = __gtmp_2;
					break;
				}
				__gtmp_6 = __gtmp_1;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_rn_r]));
		if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
			__gtmp_13 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
		else {
			switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_12 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_12 = 0;
				__gtmp_7 = __gtmp_12;
				break;
			case 1:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_11 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else
					__gtmp_11 = 0;
				__gtmp_7 = __gtmp_11;
				break;
			case 2:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
					__gtmp_10 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
				else {
					if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
						__gtmp_9 = 0;
					else
						__gtmp_9 = 0xffffffffLU;
					__gtmp_10 = __gtmp_9;
				}
				__gtmp_7 = __gtmp_10;
				break;
			case 3:
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
					__gtmp_8 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
				else
					__gtmp_8 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
				__gtmp_7 = __gtmp_8;
				break;
			}
			__gtmp_13 = __gtmp_7;
		}
		TMP_SWORD = ((TMP_REG2 + ((int32_t)(__gtmp_13))) + __ARM_EXTS8(31, ((int32_t)(arm_bit32(ARM_APSR, 29)))));
		if((ARM_ADCSS_S__S__S__S_S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADCSS_S__S__S__S_S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_20 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_19 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_19 = 0;
						__gtmp_14 = __gtmp_19;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_18 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_18 = 0;
						__gtmp_14 = __gtmp_18;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_17 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_16 = 0;
							else
								__gtmp_16 = 0xffffffffLU;
							__gtmp_17 = __gtmp_16;
						}
						__gtmp_14 = __gtmp_17;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_15 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_15 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_14 = __gtmp_15;
						break;
					}
					__gtmp_20 = __gtmp_14;
				}
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_20, 31))) == 1)))
					__gtmp_30 = 1;
				else {
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
						__gtmp_27 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
					else {
						switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_26 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_26 = 0;
							__gtmp_21 = __gtmp_26;
							break;
						case 1:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_25 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_25 = 0;
							__gtmp_21 = __gtmp_25;
							break;
						case 2:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_24 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_23 = 0;
								else
									__gtmp_23 = 0xffffffffLU;
								__gtmp_24 = __gtmp_23;
							}
							__gtmp_21 = __gtmp_24;
							break;
						case 3:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
								__gtmp_22 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
							else
								__gtmp_22 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
							__gtmp_21 = __gtmp_22;
							break;
						}
						__gtmp_27 = __gtmp_21;
					}
					if(((((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_29 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_28 = 1;
						else
							__gtmp_28 = 0;
						__gtmp_29 = __gtmp_28;
					}
					__gtmp_30 = __gtmp_29;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_30)), 29, 29);
				if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
					__gtmp_37 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
				else {
					switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_36 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_36 = 0;
						__gtmp_31 = __gtmp_36;
						break;
					case 1:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_35 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else
							__gtmp_35 = 0;
						__gtmp_31 = __gtmp_35;
						break;
					case 2:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
							__gtmp_34 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
						else {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_33 = 0;
							else
								__gtmp_33 = 0xffffffffLU;
							__gtmp_34 = __gtmp_33;
						}
						__gtmp_31 = __gtmp_34;
						break;
					case 3:
						if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
							__gtmp_32 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
						else
							__gtmp_32 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
						__gtmp_31 = __gtmp_32;
						break;
					}
					__gtmp_37 = __gtmp_31;
				}
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_37, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_46 = 1;
				else {
					if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) == 0))
						__gtmp_44 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
					else {
						switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
						case 0:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_43 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] << arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_43 = 0;
							__gtmp_38 = __gtmp_43;
							break;
						case 1:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_42 = (ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r] >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else
								__gtmp_42 = 0;
							__gtmp_38 = __gtmp_42;
							break;
						case 2:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0))) < 32))
								__gtmp_41 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r])) >> arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 7, 0));
							else {
								if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], 31))) == 0))
									__gtmp_40 = 0;
								else
									__gtmp_40 = 0xffffffffLU;
								__gtmp_41 = __gtmp_40;
							}
							__gtmp_38 = __gtmp_41;
							break;
						case 3:
							if((((uint32_t)(arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0))) == 0))
								__gtmp_39 = ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r];
							else
								__gtmp_39 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r], arm_field32(ARM_GPR[ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r], 4, 0));
							__gtmp_38 = __gtmp_39;
							break;
						}
						__gtmp_44 = __gtmp_38;
					}
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_44, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_45 = 1;
					else
						__gtmp_45 = 0;
					__gtmp_46 = __gtmp_45;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_46)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADCSS_S__S__S_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_40;
	uint32_t __gtmp_39;
	uint32_t __gtmp_38;
	uint32_t __gtmp_37;
	uint32_t __gtmp_36;
	uint32_t __gtmp_35;
	uint32_t __gtmp_34;
	uint32_t __gtmp_33;
	uint32_t __gtmp_32;
	uint32_t __gtmp_31;
	uint32_t __gtmp_30;
	uint32_t __gtmp_29;
	uint32_t __gtmp_28;
	uint32_t __gtmp_27;
	uint32_t __gtmp_26;
	uint32_t __gtmp_25;
	uint32_t __gtmp_24;
	uint32_t __gtmp_23;
	uint32_t __gtmp_22;
	uint32_t __gtmp_21;
	uint32_t __gtmp_20;
	uint32_t __gtmp_19;
	uint32_t __gtmp_18;
	uint32_t __gtmp_17;
	uint32_t __gtmp_16;
	uint32_t __gtmp_15;
	uint32_t __gtmp_14;
	uint32_t __gtmp_13;
	uint32_t __gtmp_12;
	uint32_t __gtmp_11;
	uint32_t __gtmp_10;
	uint32_t __gtmp_9;
	uint32_t __gtmp_8;
	uint32_t __gtmp_7;
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint32_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ADCSS_S__S__S_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ADCSS_S__S__S_x_sets_set;
		if(ARM_SBIT) {
			switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
			case 0:
				if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_5 = ((uint32_t)(arm_bit32(ARM_APSR, 29)));
				else
					__gtmp_5 = arm_field32_generic(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], (32 - ((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt))), (32 - ((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt))), 1 );
				__gtmp_1 = __gtmp_5;
				break;
			case 1:
				if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_4 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_4 = arm_field32_generic(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_4;
				break;
			case 2:
				if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_3 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], 31)));
				else
					__gtmp_3 = arm_field32_generic(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_3;
				break;
			case 3:
				if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					__gtmp_2 = ((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], 0)));
				else
					__gtmp_2 = arm_field32_generic(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], (((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), (((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) - 1), 1 );
				__gtmp_1 = __gtmp_2;
				break;
			}
			ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_1)), 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S_x_rn_r]));
		switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 0:
			if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_11 = ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r];
			else
				__gtmp_11 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] << ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_11;
			break;
		case 1:
			if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_10 = 0;
			else
				__gtmp_10 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_10;
			break;
		case 2:
			if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
				if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
					__gtmp_8 = 0;
				else
					__gtmp_8 = 0xffffffffLU;
				__gtmp_9 = __gtmp_8;
			}
			else
				__gtmp_9 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_9;
			break;
		case 3:
			if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				__gtmp_7 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> 1));
			else
				__gtmp_7 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
			__gtmp_6 = __gtmp_7;
			break;
		}
		TMP_SWORD = ((TMP_REG2 + ((int32_t)(__gtmp_6))) + __ARM_EXTS8(31, ((int32_t)(arm_bit32(ARM_APSR, 29)))));
		if((ARM_ADCSS_S__S__S_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ADCSS_S__S__S_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADCSS_S__S__S_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_17 = ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_17 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] << ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_17;
					break;
				case 1:
					if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_16 = 0;
					else
						__gtmp_16 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_16;
					break;
				case 2:
					if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_14 = 0;
						else
							__gtmp_14 = 0xffffffffLU;
						__gtmp_15 = __gtmp_14;
					}
					else
						__gtmp_15 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_15;
					break;
				case 3:
					if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_13 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_13 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_12 = __gtmp_13;
					break;
				}
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_12, 31))) == 1)))
					__gtmp_26 = 1;
				else {
					switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_23 = ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r];
						else
							__gtmp_23 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] << ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_23;
						break;
					case 1:
						if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_22 = 0;
						else
							__gtmp_22 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_22;
						break;
					case 2:
						if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_20 = 0;
							else
								__gtmp_20 = 0xffffffffLU;
							__gtmp_21 = __gtmp_20;
						}
						else
							__gtmp_21 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_21;
						break;
					case 3:
						if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_19 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> 1));
						else
							__gtmp_19 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_18 = __gtmp_19;
						break;
					}
					if(((((uint32_t)(arm_bit32(__gtmp_18, 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_25 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_24 = 1;
						else
							__gtmp_24 = 0;
						__gtmp_25 = __gtmp_24;
					}
					__gtmp_26 = __gtmp_25;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_26)), 29, 29);
				switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
				case 0:
					if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_32 = ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r];
					else
						__gtmp_32 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] << ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_32;
					break;
				case 1:
					if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_31 = 0;
					else
						__gtmp_31 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_31;
					break;
				case 2:
					if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
						if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
							__gtmp_29 = 0;
						else
							__gtmp_29 = 0xffffffffLU;
						__gtmp_30 = __gtmp_29;
					}
					else
						__gtmp_30 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_30;
					break;
				case 3:
					if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
						__gtmp_28 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> 1));
					else
						__gtmp_28 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
					__gtmp_27 = __gtmp_28;
					break;
				}
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(__gtmp_27, 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_40 = 1;
				else {
					switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
					case 0:
						if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_38 = ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r];
						else
							__gtmp_38 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] << ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_38;
						break;
					case 1:
						if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_37 = 0;
						else
							__gtmp_37 = (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_37;
						break;
					case 2:
						if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0)) {
							if((((uint32_t)(arm_bit32(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], 31))) == 0))
								__gtmp_35 = 0;
							else
								__gtmp_35 = 0xffffffffLU;
							__gtmp_36 = __gtmp_35;
						}
						else
							__gtmp_36 = (((int32_t)(ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r])) >> ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_36;
						break;
					case 3:
						if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
							__gtmp_34 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) << 31) | (ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r] >> 1));
						else
							__gtmp_34 = arm_rotate_right32(32, ARM_GPR[ARM_ADCSS_S__S__S_x_shifter_operand_r_r], ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt);
						__gtmp_33 = __gtmp_34;
						break;
					}
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(__gtmp_33, 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_39 = 1;
					else
						__gtmp_39 = 0;
					__gtmp_40 = __gtmp_39;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_40)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}

static void arm_instr_ADDSS_S__S___ID_code(arm_state_t *state, arm_inst_t *inst) {
	uint32_t __gtmp_6;
	uint32_t __gtmp_5;
	uint32_t __gtmp_4;
	uint32_t __gtmp_3;
	uint32_t __gtmp_2;
	uint8_t __gtmp_1;
	uint8_t __gtmp_0;
	int32_t TMP_SWORD;
	int32_t TMP_REG2;
	int32_t TMP_REG1;
	ARM_NPC = (ARM_GPR[15] + 4);
	ARM_GPR[15] = (ARM_GPR[15] + 8);
	switch(arm_field32(ARM_ADDSS_S__S___ID_x_cond_cond, 3, 0)) {
	case 0:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1);
		break;
	case 1:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0);
		break;
	case 2:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1);
		break;
	case 3:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0);
		break;
	case 4:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1);
		break;
	case 5:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0);
		break;
	case 6:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1);
		break;
	case 7:
		__gtmp_0 = (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0);
		break;
	case 8:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 29))) == 1));
		break;
	case 9:
		__gtmp_0 = ((((uint32_t)(arm_bit32(ARM_APSR, 29))) == 0) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 10:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)));
		break;
	case 11:
		__gtmp_0 = (((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)));
		break;
	case 12:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0))) && (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 0));
		break;
	case 13:
		__gtmp_0 = ((((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 1) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 0)) || ((((uint32_t)(arm_bit32(ARM_APSR, 31))) == 0) && (((uint32_t)(arm_bit32(ARM_APSR, 28))) == 1))) || (((uint32_t)(arm_bit32(ARM_APSR, 30))) == 1));
		break;
	case 14:
		__gtmp_0 = (1 == 1);
		break;
	case 15:
		__gtmp_0 = (1 == 0);
		break;
	}
	if(__gtmp_0) {
		ARM_SBIT = ARM_ADDSS_S__S___ID_x_sets_set;
		if(ARM_SBIT) {
			if((((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) == 0))
				__gtmp_1 = arm_bit32(ARM_APSR, 29);
			else
				__gtmp_1 = arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31);
			ARM_APSR = arm_set_field32(ARM_APSR, __gtmp_1, 29, 29);
		}
		TMP_REG1 = ((int32_t)(ARM_GPR[ARM_ADDSS_S__S___ID_x_rd_r]));
		TMP_REG2 = ((int32_t)(ARM_GPR[ARM_ADDSS_S__S___ID_x_rn_r]));
		TMP_SWORD = (TMP_REG2 + ((int32_t)(arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1)))));
		if((ARM_ADDSS_S__S___ID_x_rd_r == 15))
			ARM_NPC = ((uint32_t)(TMP_SWORD));
		else
			ARM_GPR[ARM_ADDSS_S__S___ID_x_rd_r] = ((uint32_t)(TMP_SWORD));
		TMP_REG1 = TMP_SWORD;
		if(((((uint32_t)(ARM_SBIT)) == 1) && (ARM_ADDSS_S__S___ID_x_rd_r == 15)))
			ARM_APSR = ARM_SPSR;
		else {
			if((((uint32_t)(ARM_SBIT)) == 1)) {
				ARM_APSR = arm_set_field32(ARM_APSR, arm_bit32(TMP_REG1, 31), 31, 31);
				if((TMP_REG1 == ((int32_t)(0))))
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(1)), 30, 30);
				else
					ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(0)), 30, 30);
				if(((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)))
					__gtmp_4 = 1;
				else {
					if(((((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
						__gtmp_3 = 1;
					else {
						if(((((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0) && (((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1)))
							__gtmp_2 = 1;
						else
							__gtmp_2 = 0;
						__gtmp_3 = __gtmp_2;
					}
					__gtmp_4 = __gtmp_3;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_4)), 29, 29);
				if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 1) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 1)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 0)))
					__gtmp_6 = 1;
				else {
					if((((((uint32_t)(arm_bit32(TMP_REG2, 31))) == 0) && (((uint32_t)(arm_bit32(arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1)), 31))) == 0)) && (((uint32_t)(arm_bit32(TMP_REG1, 31))) == 1)))
						__gtmp_5 = 1;
					else
						__gtmp_5 = 0;
					__gtmp_6 = __gtmp_5;
				}
				ARM_APSR = arm_set_field32(ARM_APSR, ((uint8_t)(__gtmp_6)), 28, 28);
			}
		}
	}
	ARM_GPR[15] = ARM_NPC;

}




typedef void (*arm_code_function_t)(arm_state_t *, arm_inst_t *);

arm_code_function_t arm_code_table[] =
{
	arm_instr_UNKNOWN_code,
	arm_instr_UXTAHS_S__S__SS_code,
	arm_instr_UXTAB16S_S__S__SS_code,
	arm_instr_UXTABS_S__S__SS_code,
	arm_instr_USUB8S_S__S__S_code,
	arm_instr_USUB16S_S__S__S_code,
	arm_instr_USAXS_S__S__S_code,
	arm_instr_USATS_S___ID__SS_code,
	arm_instr_USADA8S_S__S__S__S_code,
	arm_instr_UQSUB8S_S__S__S_code,
	arm_instr_UQSUB16S_S__S__S_code,
	arm_instr_UQSAXS_S__S__S_code,
	arm_instr_UQASXS_S__S__S_code,
	arm_instr_UQADD8S_S__S__S_code,
	arm_instr_UQADD16S_S__S__S_code,
	arm_instr_UMULLS_S__S__S__S_code,
	arm_instr_UMLALS_S__S__S__S_code,
	arm_instr_UMAALS_S__S__S__S_code,
	arm_instr_UHSUB8S_S__S__S_code,
	arm_instr_UHSUB16S_S__S__S_code,
	arm_instr_UHSAXS_S__S__S_code,
	arm_instr_UHASXS_S__S__S_code,
	arm_instr_UHADD8S_S__S__S_code,
	arm_instr_UHADD16S_S__S__S_code,
	arm_instr_UDIVS_S__S__S_code,
	arm_instr_UBFXS_S__S___ID___ID_code,
	arm_instr_UASXS_S__S__S_code,
	arm_instr_UADD8S_S__S__S_code,
	arm_instr_UADD16S_S__S__S_code,
	arm_instr_SXTAHS_S__S__SS_code,
	arm_instr_SXTAB16S_S__S__SS_code,
	arm_instr_SXTABS_S__S__SS_code,
	arm_instr_SUBSS_W_S__S__SS_code,
	arm_instr_SUBWS_S__S___ID__code,
	arm_instr_SUBSS_W_S__S___IU_code,
	arm_instr_SSUB8S_S__S__S_code,
	arm_instr_SSUB16S_S__S__S_code,
	arm_instr_SSAXS_S__S__S_code,
	arm_instr_SSATS_S___ID__SS_code,
	arm_instr_SMULLS_S__S__S__S_code,
	arm_instr_SMMLSSS_S__S__S__S_code,
	arm_instr_SMMLASS_S__S__S__S_code,
	arm_instr_SMLSLDSS_S__S__S__S_code,
	arm_instr_SMLSDSS_S__S__S__S_code,
	arm_instr_SMLAWSS_S__S__S__S_code,
	arm_instr_SMLALDSS_S__S__S__S_code,
	arm_instr_SMLALSSS_S__S__S__S_code,
	arm_instr_SMLALS_S__S__S__S_code,
	arm_instr_SMLADSS_S__S__S__S_code,
	arm_instr_SMLASSS_S__S__S__S_code,
	arm_instr_SHSUB8S_S__S__S_code,
	arm_instr_SHSUB16S_S__S__S_code,
	arm_instr_SHSAXS_S__S__S_code,
	arm_instr_SHASXS_S__S__S_code,
	arm_instr_SHADD8S_S__S__S_code,
	arm_instr_SHADD16S_S__S__S_code,
	arm_instr_SELS_S__S__S_code,
	arm_instr_SDIVS_S__S__S_code,
	arm_instr_SBFXS_S__S___ID___ID_code,
	arm_instr_SBCSS_W_S__S__SS_code,
	arm_instr_SBCSS_W_S__S___IU_code,
	arm_instr_SASXS_S__S__S_code,
	arm_instr_SADD8S_S__S__S_code,
	arm_instr_SADD16S_S__S__S_code,
	arm_instr_RSBSS_S__S__SS_code,
	arm_instr_RORSS_W_S__S__S_code,
	arm_instr_REVSHS_W_S__S_code,
	arm_instr_REV16S_W_S__S_code,
	arm_instr_REVS_W_S__S_code,
	arm_instr_RBITS_S__S_code,
	arm_instr_QSUB8S_S__S__S_code,
	arm_instr_QSUB16S_S__S__S_code,
	arm_instr_QSUBS_S__S__S_code,
	arm_instr_QSAXS_S__S__S_code,
	arm_instr_QDSUBS_S__S__S_code,
	arm_instr_QDADDS_S__S__S_code,
	arm_instr_QASXS_S__S__S_code,
	arm_instr_QADD8S_S__S__S_code,
	arm_instr_QADD16S_S__S__S_code,
	arm_instr_QADDS_S__S__S_code,
	arm_instr_PKHBTS_S__S__SS_code,
	arm_instr_ORNSS_S__S__SS_code,
	arm_instr_ORNSS_S__S___IU_code,
	arm_instr_MRRCSS_D__D__S__S__CRD_code,
	arm_instr_MRCSS_D__D__S__CRD__CRD___LB_D_RB__code,
	arm_instr_MLSS_S__S__S__S_code,
	arm_instr_MLAS_S__S__S__S_code,
	arm_instr_MCRRSS_D__D__S__S__CRD_code,
	arm_instr_MCRSS_D__D__S__CRD__CRD___LB_D_RB__code,
	arm_instr_LSRSS_W_S__S__S_code,
	arm_instr_LDMDBS_SS___LB_S_RB__code,
	arm_instr_EORSS_W_S__S__SS_code,
	arm_instr_EORSS_W_S__S___IU_code,
	arm_instr_CLZS_S__S_code,
	arm_instr_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__code,
	arm_instr_BICSS_W_S__S__SS_code,
	arm_instr_BICSS_W_S__S___IU_code,
	arm_instr_BFIS_S__S___ID___ID_code,
	arm_instr_BS_W_08X_code,
	arm_instr_BS_W_08X_0_code,
	arm_instr_MOVTS_S___ID_code,
	arm_instr_ORRS_W_S__S__SS_code,
	arm_instr_MOVWS_S___ID_code,
	arm_instr_ORRSS_W_S__S___IU_code,
	arm_instr_ASRSS_W_S__S__S_code,
	arm_instr_ANDSS_W_S__S__SS_code,
	arm_instr_ANDSS_W_S__S___IU_code,
	arm_instr_ADDSS_W_S__S__SS_code,
	arm_instr_ADDWS_S__S___ID__code,
	arm_instr_ADDSS_W_S__S___IU_code,
	arm_instr_ADCSS_W_S__S__SS_code,
	arm_instr_ADCSS_W_S__S___IU_code,
	arm_instr_PLIS__LT_S__S_RT__code,
	arm_instr_PLIS__LT_PC_RT__code,
	arm_instr_PLIS__LT_S_RT__code,
	arm_instr_PLIS__LT_S_RT__0_code,
	arm_instr_PLDSS__LT_S__S_RT__code,
	arm_instr_PLDSS__LT_S_RT__code,
	arm_instr_PLDSS__LT_S_RT__0_code,
	arm_instr_RSBSS_W_S__S___ID_code,
	arm_instr_LSLSS_W_S__S__S_code,
	arm_instr_LDRDS_S__S___LT_SS_code,
	arm_instr_STRDS_S__S___LT_SS_code,
	arm_instr_STREXHS_S__S___LT_S_RT__code,
	arm_instr_STREXBS_S__S__S___LT_S_RT__code,
	arm_instr_STREXBS_S__S___LT_S_RT__code,
	arm_instr_STREXS_S__S___LT_S_RT__code,
	arm_instr_LDREXHS_S___LT_S_RT__code,
	arm_instr_LDREXBS_S___LT_S_RT__code,
	arm_instr_LDREXBS_S___LT_S_RT__0_code,
	arm_instr_LDREXS_S___LT_S_RT__code,
	arm_instr_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__code,
	arm_instr_LDRSHS_S___LT_S_RT____IS0XX_code,
	arm_instr_LDRSHS_S___LT_S___I0XX_RT__code,
	arm_instr_LDRSBS_S___LT_PC_RT__code,
	arm_instr_LDRSBS_S___LT_S_RT____IS0XX_code,
	arm_instr_LDRSBS_S___LT_S___I0XX_RT__code,
	arm_instr_LDRBS_S___LT_S_RT____IS0XX_code,
	arm_instr_LDRBS_W_S___LT_S___I0XX_RT__code,
	arm_instr_STRBS_S___LT_SS_code,
	arm_instr_STRBS_W_S___LT_S___I0XX_RT__code,
	arm_instr_STRS_S___LT_S_RT____IS0XX_code,
	arm_instr_STRS_W_S___LT_S___I0XX_RT__code,
	arm_instr_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__code,
	arm_instr_STRHS_S___LT_S_RT____IS0XX_code,
	arm_instr_STRHS_W_S___LT_S_RT__code,
	arm_instr_LDRHS_S___LT_S_RT____IS0XX_code,
	arm_instr_LDRHS_W_S___LT_S_RT__code,
	arm_instr_LDRSHS_W_S___LT_S__S_RT__code,
	arm_instr_STRHS_W_S___LT_S__S_RT__code,
	arm_instr_LDRHS_W_S___LT_S__S_RT__code,
	arm_instr_LDRS_S___LT_S_RT____IS0XX_code,
	arm_instr_LDRS_W_S___LT_S___I0XX_RT__code,
	arm_instr_LDRSHTS_S___LT_S_RT__code,
	arm_instr_LDRSBTS_S___LT_S_RT__code,
	arm_instr_STRTS_S___LT_S_RT__code,
	arm_instr_LDRTS_S___LT_S_RT__code,
	arm_instr_STRHTS_S___LT_S_RT__code,
	arm_instr_LDRHTS_S___LT_S_RT__code,
	arm_instr_STRBTS_S___LT_S_RT__code,
	arm_instr_LDRBTS_S___LT_S_RT__code,
	arm_instr_LDRSBS_W_S___LT_S__S_RT__code,
	arm_instr_STRBS_W_S___LT_S__S_RT__code,
	arm_instr_LDRBS_W_S___LT_S__S_RT__code,
	arm_instr_STRS_W_S___LT_S__S_RT__code,
	arm_instr_LDRS_W_S___LT_S__S_RT__code,
	arm_instr_LDC2SS_D__D___LT_RD_RT___D_code,
	arm_instr_LDC2SS_D__D___LT_RD_RT____ISD_code,
	arm_instr_LDC2SS_D__D___LT_RD___ISD_RT__21_code,
	arm_instr_LDC2SS_D__D___LT_RD___ISD_RT__code,
	arm_instr_LDCSS_D__D___LT_RD_RT___D_code,
	arm_instr_LDCSS_D__D___LT_RD_RT____ISD_code,
	arm_instr_LDCSS_D__D___LT_RD___ISD_RT__21_code,
	arm_instr_LDCSS_D__D___LT_RD___ISD_RT__code,
	arm_instr_STC2SS_D__D___LT_RD_RT___D_code,
	arm_instr_STC2SS_D__D___LT_RD_RT____ISD_code,
	arm_instr_STC2SS_D__D___LT_RD___ISD_RT__21_code,
	arm_instr_STC2SS_D__D___LT_RD___ISD_RT__code,
	arm_instr_STCSS_D__D___LT_RD_RT___D_code,
	arm_instr_STCSS_D__D___LT_RD_RT____ISD_code,
	arm_instr_STCSS_D__D___LT_RD___ISD_RT__21_code,
	arm_instr_STCSS_D__D___LT_RD___ISD_RT__code,
	arm_instr_BLXS_0X08X_code,
	arm_instr_TBBS__LT_S__S_RT__code,
	arm_instr_BLS_0XX_code,
	arm_instr_VSS_F64_DD__DD__DD_code,
	arm_instr_VSS_F32_SD__SD__SD_code,
	arm_instr_VSS_F32_QD__QD__QD_code,
	arm_instr_VSS_F32_DD__DD__DD_code,
	arm_instr_VPOPS__LB_SD_RB__code,
	arm_instr_VPOPS__LB_DD_RB__code,
	arm_instr_VADDS_F64_DD__DD__DD_code,
	arm_instr_VADDS_F32_SD__SD__SD_code,
	arm_instr_VADDS_F32_QD__QD__QD_code,
	arm_instr_VADDS_F32_DD__DD__DD_code,
	arm_instr_VCVTS_F64_S_DD__SD_code,
	arm_instr_VCVTSS_U32_F64_SD__DD_code,
	arm_instr_VCVTS_F32_S_SD__SD_code,
	arm_instr_VPUSHS__LB_SD_RB__code,
	arm_instr_VPUSHS__LB_DD_RB__code,
	arm_instr_VMULS_F64_DD__DD__DD_code,
	arm_instr_VMULS_F32_SD__SD__SD_code,
	arm_instr_VMULS_F32_QD__QD__QD_code,
	arm_instr_VMULS_F32_DD__DD__DD_code,
	arm_instr_VMRSS_S__FPSCR_code,
	arm_instr_VSTRS_SD___LT_S___ISD_RT__code,
	arm_instr_VSTRS_DD___LT_S___ISD_RT__code,
	arm_instr_VLDRS_DD___LT_S___ISD_RT__code,
	arm_instr_VLDRS_DD___LT_S___ISD_RT__0_code,
	arm_instr_VDIVS_F64_DD__DD__DD_code,
	arm_instr_VDIVS_F32_SD__SD__SD_code,
	arm_instr_VSUBS_F64_DD__DD__DD_code,
	arm_instr_VSUBS_F32_SD__SD__SD_code,
	arm_instr_VMOVS_DD__S__S_code,
	arm_instr_VMOVS_SD__S_code,
	arm_instr_VMOVS_F64_DD__DD_code,
	arm_instr_VMOVS_F32_SD__SD_code,
	arm_instr_VMOVS_F64_DD___ID_code,
	arm_instr_VMOVS_F32_SD___ID_code,
	arm_instr_UXTHS_RD__RD_code,
	arm_instr_UXTBS_RD__RD_code,
	arm_instr_YIELDS_code,
	arm_instr_MOVS_S__S_code,
	arm_instr_MOVS_RD___ID_code,
	arm_instr_TSTS_RD__RD_code,
	arm_instr_SXTHS_RD__RD_code,
	arm_instr_SXTBS_RD__RD_code,
	arm_instr_SUBS_RD__RD__RD_code,
	arm_instr_SUBS_SP___ID_code,
	arm_instr_SUBS_RD___ID_code,
	arm_instr_SUBS_RD__RD___ID_code,
	arm_instr_STRHS_RD___LT_RD__RD__RT__code,
	arm_instr_STRHS_RD___LT_RD___I0XX_RT__code,
	arm_instr_STRBS_RD___LT_RD__RD_RT__code,
	arm_instr_STRBS_RD___LT_RD___ID_RT__code,
	arm_instr_STRS_RD___LT_SP___ID_RT__code,
	arm_instr_STRS_RD___LT_RD__RD_RT__code,
	arm_instr_STRS_RD___LT_RD___I0XX_RT__code,
	arm_instr_STMIAS_RD_21___LB_S_RB__code,
	arm_instr_SBCS_RD__RD_code,
	arm_instr_RORS_RD__RD_code,
	arm_instr_REVSHS_RD__RD_code,
	arm_instr_REV16S_RD__RD_code,
	arm_instr_REVS_RD__RD_code,
	arm_instr_PUSHS__LB_SS_RB__code,
	arm_instr_PUSHS__LB_SS_RB__0_code,
	arm_instr_POPS__LB_SS_RB__code,
	arm_instr_POPS__LB_SS_RB__0_code,
	arm_instr_ORRS_RD__RD_code,
	arm_instr_RSBS_RD__RD___I0_code,
	arm_instr_MVNS_RD__RD_code,
	arm_instr_MULS_RD__RD_code,
	arm_instr_LSRS_RD__RD_code,
	arm_instr_LSRS_RD__RD___ID_code,
	arm_instr_LSLS_RD__RD_code,
	arm_instr_LSLS_RD__RD___ID_code,
	arm_instr_LDRSHS_RD___LT_RD__RD_RT__code,
	arm_instr_LDRSBS_RD___LT_RD__RD_RT__code,
	arm_instr_LDRHS_RD___LT_RD__RD_RT__code,
	arm_instr_LDRHS_RD___LT_RD___I0XX_RT__code,
	arm_instr_LDRBS_RD___LT_RD__RD_RT__code,
	arm_instr_LDRBS_RD___LT_RD___ID_RT__code,
	arm_instr_LDRS_RD___LT_SP___I0XX_RT__code,
	arm_instr_LDRS_RD___LT_PC___I0XX_RT__code,
	arm_instr_LDRS_RD___LT_RD__RD_RT__code,
	arm_instr_LDRS_RD___LT_RD___I0XX_RT__code,
	arm_instr_LDMIAS_RD___LB_S_RB__code,
	arm_instr_EORS_RD__RD_code,
	arm_instr_CMPS_RD__S_code,
	arm_instr_CMPS_RD__RD_code,
	arm_instr_CMPS_RD___ID_code,
	arm_instr_CMNS_RD__RD_code,
	arm_instr_CBZS_RD__D_code,
	arm_instr_BXS_S_code,
	arm_instr_BLXS_S_code,
	arm_instr_BKPT__ID_code,
	arm_instr_BICS_RD__RD_code,
	arm_instr_BS_N__40_code,
	arm_instr_S_N_08X_code,
	arm_instr_ASRS_RD__RD_code,
	arm_instr_ASRS_RD__RD___ID_code,
	arm_instr_ANDS_RD__RD_code,
	arm_instr_ADDS_S__S_code,
	arm_instr_ADDS_RD__RD__RD_code,
	arm_instr_ADDS_SP__SP___ID_code,
	arm_instr_ADDS_RD__SP___ID_code,
	arm_instr_ADDS_RD__PC___ID_code,
	arm_instr_ADDS_RD___ID_code,
	arm_instr_ADDS_RD__RD___ID_code,
	arm_instr_ADCS_RD__RD_code,
	arm_instr_MRCS_D__D__S__CRD__CRD__D_code,
	arm_instr_LDCSSS_D__D___LT_RD_RT___D_code,
	arm_instr_LDCSSS_D__D___LT_RD_RT____ISD_code,
	arm_instr_LDCSSS_D__D___LT_RD___ISD_RT__21_code,
	arm_instr_LDCSSS_D__D___LT_RD___ISD_RT__code,
	arm_instr_STCSSS_D__D___LT_RD_RT___D_code,
	arm_instr_STCSSS_D__D___LT_RD_RT____ISD_code,
	arm_instr_STCSSS_D__D___LT_RD___ISD_RT__21_code,
	arm_instr_STCSSS_D__D___LT_RD___ISD_RT__code,
	arm_instr_VSTRS_SD___LT_S___ISD_RT__0_code,
	arm_instr_VSTRS_DD___LT_S___ISD_RT__0_code,
	arm_instr_VSTMSSS_SS___LB_S_RB__code,
	arm_instr_VSTMSSS_SS___LB_S_RB__0_code,
	arm_instr_VSTMSSS_SS___LB_S_RB__1_code,
	arm_instr_VSTMSSS_SS___LB_S_RB__2_code,
	arm_instr_VMULS_F64_DD__DD__DD_0_code,
	arm_instr_VMULS_F32_SD__SD__SD_0_code,
	arm_instr_VMUL_F32_QD__QD__QD_code,
	arm_instr_VMUL_F32_DD__DD__DD_code,
	arm_instr_VMOVS_DD__S__S_0_code,
	arm_instr_VMOVS_SD__S_0_code,
	arm_instr_VMOVS_F64_DD__DD_0_code,
	arm_instr_VMOVS_F32_SD__SD_0_code,
	arm_instr_VMOVS_F64_DD___ID_0_code,
	arm_instr_VMOVS_F32_SD___ID_0_code,
	arm_instr_VSS_F64_DD__DD__DD_0_code,
	arm_instr_VSS_F32_SD__SD__SD_0_code,
	arm_instr_VS_F32_QD__QD__QD_code,
	arm_instr_VS_F32_DD__DD__DD_code,
	arm_instr_VLDRS_DD___LT_S___ISD_RT__1_code,
	arm_instr_VLDRS_DD___LT_S___ISD_RT__2_code,
	arm_instr_VLDMDBS_S_21___LB_S_RB__code,
	arm_instr_VLDMIAS_SS___LB_S_RB__code,
	arm_instr_VLDMDBS_S_21___LB_S_RB__0_code,
	arm_instr_VLDMIAS_SS___LB_S_RB__0_code,
	arm_instr_VDIVS_F64_DD__DD__DD_0_code,
	arm_instr_VDIVS_F32_SD__SD__SD_0_code,
	arm_instr_VCVT_FD_FD_S__S_code,
	arm_instr_VCVTSS_S_S_S_S_code,
	arm_instr_VADDS_F64_DD__DD__DD_0_code,
	arm_instr_VADDS_F32_SD__SD__SD_0_code,
	arm_instr_VADD_F32_QD__QD__QD_code,
	arm_instr_VADD_F32_DD__DD__DD_code,
	arm_instr_DMB_S_code,
	arm_instr_MRSS_S__CPSR_code,
	arm_instr_MRSS_S__SPSR_code,
	arm_instr_MSRS_CPSR___S_code,
	arm_instr_MSRS_CPSR_FSXC__S_code,
	arm_instr_MSRS_CPSR_SXC__S_code,
	arm_instr_MSRS_CPSR_FXC__S_code,
	arm_instr_MSRS_CPSR_FSX__S_code,
	arm_instr_MSRS_CPSR_XC__S_code,
	arm_instr_MSRS_CPSR_SC__S_code,
	arm_instr_MSRS_CPSR_SX__S_code,
	arm_instr_MSRS_CPSR_F__S_code,
	arm_instr_MSRS_CPSR_FX__S_code,
	arm_instr_MSRS_CPSR_FS__S_code,
	arm_instr_MSRS_CPSR_C__S_code,
	arm_instr_MSRS_CPSR_X__S_code,
	arm_instr_MSRS_CPSR_S__S_code,
	arm_instr_MSRS_CPSR_F__S_0_code,
	arm_instr_MSRS_SPSR___S_code,
	arm_instr_MSRS_SPSR_FSXC__S_code,
	arm_instr_MSRS_SPSR_SXC__S_code,
	arm_instr_MSRS_SPSR_FXC__S_code,
	arm_instr_MSRS_SPSR_FSX__S_code,
	arm_instr_MSRS_SPSR_XC__S_code,
	arm_instr_MSRS_SPSR_SC__S_code,
	arm_instr_MSRS_SPSR_SX__S_code,
	arm_instr_MSRS_SPSR_F__S_code,
	arm_instr_MSRS_SPSR_FX__S_code,
	arm_instr_MSRS_SPSR_FS__S_code,
	arm_instr_MSRS_SPSR_C__S_code,
	arm_instr_MSRS_SPSR_X__S_code,
	arm_instr_MSRS_SPSR_S__S_code,
	arm_instr_MSRS_SPSR_F__S_0_code,
	arm_instr_MSRS_CPSR____ID_code,
	arm_instr_MSRS_CPSR_FSXC___ID_code,
	arm_instr_MSRS_CPSR_SXC___ID_code,
	arm_instr_MSRS_CPSR_FXC___ID_code,
	arm_instr_MSRS_CPSR_FSX___ID_code,
	arm_instr_MSRS_CPSR_XC___ID_code,
	arm_instr_MSRS_CPSR_SC___ID_code,
	arm_instr_MSRS_CPSR_SX___ID_code,
	arm_instr_MSRS_CPSR_F___ID_code,
	arm_instr_MSRS_CPSR_FX___ID_code,
	arm_instr_MSRS_CPSR_FS___ID_code,
	arm_instr_MSRS_CPSR_C___ID_code,
	arm_instr_MSRS_CPSR_X___ID_code,
	arm_instr_MSRS_CPSR_S___ID_code,
	arm_instr_MSRS_CPSR_F___ID_0_code,
	arm_instr_MSRS_SPSR____ID_code,
	arm_instr_MSRS_SPSR_FSXC___ID_code,
	arm_instr_MSRS_SPSR_SXC___ID_code,
	arm_instr_MSRS_SPSR_FXC___ID_code,
	arm_instr_MSRS_SPSR_FSX___ID_code,
	arm_instr_MSRS_SPSR_XC___ID_code,
	arm_instr_MSRS_SPSR_SC___ID_code,
	arm_instr_MSRS_SPSR_SX___ID_code,
	arm_instr_MSRS_SPSR_F___ID_code,
	arm_instr_MSRS_SPSR_FX___ID_code,
	arm_instr_MSRS_SPSR_FS___ID_code,
	arm_instr_MSRS_SPSR_C___ID_code,
	arm_instr_MSRS_SPSR_X___ID_code,
	arm_instr_MSRS_SPSR_S___ID_code,
	arm_instr_MSRS_SPSR_F___ID_0_code,
	arm_instr_CDPSS_D__D__D__D__D__D_code,
	arm_instr_BFIS_S___ID___ID_code,
	arm_instr_CLZS_S__S_0_code,
	arm_instr_SWPS_S__S___LT_S_RT__code,
	arm_instr_SWPSB_S__S___LT_S_RT__code,
	arm_instr_UMLALSS_S__S__S__S_code,
	arm_instr_SMLALSS_S__S__S__S_code,
	arm_instr_UMULLSS_S__S__S__S_code,
	arm_instr_SMULLSS_S__S__S__S_code,
	arm_instr_MULSS_S__S__S_code,
	arm_instr_MLASS_S__S__S__S_code,
	arm_instr_SWIS_D_code,
	arm_instr_LDMSS_SS___LB_S_RB_S_code,
	arm_instr_STMSS_SS___LB_S_RB_S_code,
	arm_instr_STREXHS_S__S___LT_S_RT__0_code,
	arm_instr_STREXDS_S__S___LT_S_RT__code,
	arm_instr_STREXBS_S__S___LT_S_RT__0_code,
	arm_instr_STREXS_S__S___LT_S_RT__0_code,
	arm_instr_LDREXHS_S___LT_S_RT__0_code,
	arm_instr_LDREXDS_S___LT_S_RT__code,
	arm_instr_LDREXBS_S___LT_S_RT__1_code,
	arm_instr_LDREXS_S___LT_S_RT__0_code,
	arm_instr_STRDS_S___LT_SS__S_IUSS_code,
	arm_instr_LDRSSH_S___LT_SS__SSSS_code,
	arm_instr_LDRSSH_S___LT_SS__S_IUSS_code,
	arm_instr_LDRSSB_S___LT_SS__SSSS_code,
	arm_instr_LDRSSB_S___LT_SS__S_IUSS_code,
	arm_instr_LDRSH_S___LT_SS__SSSS_code,
	arm_instr_LDRSH_S___LT_SS__S_IUSS_code,
	arm_instr_STRHS_S___LT_SS__SSSS_code,
	arm_instr_STRHS_S___LT_SS__S_IUSS_code,
	arm_instr_STRSSS_S___LT_SS__SS__S__IDSS_code,
	arm_instr_LDRSSS_S___LT_SS__SS__S__IDSS_code,
	arm_instr_STRSSS_S___LT_SS__S_IDSS_code,
	arm_instr_LDRSSS_S___LT_SS__S_IDSS_code,
	arm_instr_BSS__40_code,
	arm_instr_BLXS_S_0_code,
	arm_instr_BXS_S_0_code,
	arm_instr_MOVS_S___ID_code,
	arm_instr_MOVTS_S___ID_0_code,
	arm_instr_TSTS_S___ID_code,
	arm_instr_TSTS_S__S__S_S_code,
	arm_instr_TSTS_S__S_code,
	arm_instr_TEQS_S___ID_code,
	arm_instr_TEQS_S__S__S_S_code,
	arm_instr_TEQS_S__S_code,
	arm_instr_SUBSS_S__S___ID_code,
	arm_instr_SUBSS_S__S__S__S_S_code,
	arm_instr_SUBSS_S__S__S_code,
	arm_instr_SBCSS_S__S___ID_code,
	arm_instr_SBCSS_S__S__S__S_S_code,
	arm_instr_SBCSS_S__S__S_code,
	arm_instr_RSCSS_S__S___ID_code,
	arm_instr_RSCSS_S__S__S__S_S_code,
	arm_instr_RSCSS_S__S__S_code,
	arm_instr_RSBSS_S__S___ID_code,
	arm_instr_RSBSS_S__S__S__S_S_code,
	arm_instr_RSBSS_S__S__S_code,
	arm_instr_ORRSS_S__S___ID_code,
	arm_instr_ORRSS_S__S__S__S_S_code,
	arm_instr_ORRSS_S__S__S_code,
	arm_instr_MVNSS_S___ID_code,
	arm_instr_MVNSS_S__S__S_S_code,
	arm_instr_MVNSS_S__S_code,
	arm_instr_MOVSS_S___ID_code,
	arm_instr_MOVSS_S__S__S_S_code,
	arm_instr_MOVSS_S__S_code,
	arm_instr_EORSS_S__S___ID_code,
	arm_instr_EORSS_S__S__S__S_S_code,
	arm_instr_EORSS_S__S__S_code,
	arm_instr_CMPS_S___ID_code,
	arm_instr_CMPS_S__S__S_S_code,
	arm_instr_CMPS_S__S_code,
	arm_instr_CMNS_S___ID_code,
	arm_instr_CMNS_S__S__S_S_code,
	arm_instr_CMNS_S__S_code,
	arm_instr_BICSS_S__S___ID_code,
	arm_instr_BICSS_S__S__S__S_S_code,
	arm_instr_BICSS_S__S__S_code,
	arm_instr_ANDSS_S__S___ID_code,
	arm_instr_ANDSS_S__S__S__S_S_code,
	arm_instr_ANDSS_S__S__S_code,
	arm_instr_ADDSS_S__S__S__S_S_code,
	arm_instr_ADDSS_S__S__S_code,
	arm_instr_ADCSS_S__S___ID_code,
	arm_instr_ADCSS_S__S__S__S_S_code,
	arm_instr_ADCSS_S__S__S_code,
	arm_instr_ADDSS_S__S___ID_code
};



#if defined(__cplusplus)
}
#endif

#endif /* GLISS_ARM_INCLUDE_ARM_DECODE_TABLE_H */
