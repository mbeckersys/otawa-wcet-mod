/* Generated by gep (119/02/19 20:43:54) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_ARM_INCLUDE_ARM_DECODE_TABLE_H
#define GLISS_ARM_INCLUDE_ARM_DECODE_TABLE_H

#if defined(__cplusplus)
extern  "C"
{
#endif

#include <assert.h>
#include <arm/api.h>
#include <arm/macros.h>
#include <arm/gen_int.h>

#include <arm/mem.h>
#include <arm/grt.h>
#include <arm/error.h>
#include <arm/gen_int.h>
#include <arm/loader.h>
#include <arm/code.h>
#include <arm/env.h>
#include <arm/sys_call.h>
#include <arm/shift.h>


/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, "%s\n", (e))

/* hack : Enable cache if gep option is on 
(without having to  move decode.c to templates) */


/* decoder macros */
#define __EXTRACT_32(mask, offset_mask, inst)	  ( (uint32_t)((inst) & (mask)) >> (offset_mask))
#define __EXTS_32(mask, offset_mask, inst, n)    (((int32_t)__EXTRACT_32(mask, offset_mask, inst) << (32 - (n))) >> (32 - (n)))
/* decoded parameters should be 64 bit max */
#define __EXTRACT_CISC(mask, inst)	extract_mask(inst, mask)
#define __EXTS_CISC(mask, inst, n)	(((int64_t)__EXTRACT_CISC(mask, inst) << (64 - (n))) >> (64 - (n)))


static arm_inst_t *arm_instr_UNKNOWN_decode(code_t *code_inst)
{
	arm_inst_t *inst = malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UNKNOWN;

	return inst;
}

static arm_inst_t *arm_instr_UXTAHS_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UXTAHS_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_UXTAHS_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UXTAHS_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UXTAHS_S__S__SS_i_x_rotate = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_UXTAHS_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UXTAB16S_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UXTAB16S_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_UXTAB16S_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UXTAB16S_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UXTAB16S_S__S__SS_i_x_rotate = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_UXTAB16S_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UXTABS_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UXTABS_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_UXTABS_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UXTABS_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UXTABS_S__S__SS_i_x_rotate = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_UXTABS_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_USUB8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_USUB8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_USUB8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_USUB8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_USUB8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_USUB16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_USUB16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_USUB16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_USUB16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_USUB16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_USAXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_USAXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_USAXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_USAXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_USAXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_USATS_S___ID__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0X1F}; /* 00000000000000000000000000011111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_USATS_S___ID__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_USATS_S___ID__SS_i_x_rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_USATS_S___ID__SS_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_USATS_S___ID__SS_i_x_sh = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_USATS_S___ID__SS_i_x_imm2 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_USATS_S___ID__SS_i_x_sat_imm = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_USATS_S___ID__SS_i_x_imm3 = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_USADA8S_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_USADA8S_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_USADA8S_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_USADA8S_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_USADA8S_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_USADA8S_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UQSUB8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UQSUB8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UQSUB8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UQSUB8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UQSUB8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UQSUB16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UQSUB16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UQSUB16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UQSUB16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UQSUB16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UQSAXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UQSAXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UQSAXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UQSAXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UQSAXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UQASXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UQASXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UQASXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UQASXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UQASXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UQADD8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UQADD8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UQADD8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UQADD8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UQADD8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UQADD16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UQADD16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UQADD16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UQADD16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UQADD16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UMULLS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UMULLS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UMULLS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UMULLS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UMULLS_S__S__S__S_i_x_rdhi_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_UMULLS_S__S__S__S_i_x_rdlo_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UMLALS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UMLALS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UMLALS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UMLALS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UMLALS_S__S__S__S_i_x_rdhi_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_UMLALS_S__S__S__S_i_x_rdlo_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UMAALS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UMAALS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UMAALS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UMAALS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UMAALS_S__S__S__S_i_x_rdhi_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_UMAALS_S__S__S__S_i_x_rdlo_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UHSUB8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UHSUB8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UHSUB8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UHSUB8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UHSUB8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UHSUB16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UHSUB16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UHSUB16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UHSUB16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UHSUB16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UHSAXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UHSAXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UHSAXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UHSAXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UHSAXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UHASXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UHASXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UHASXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UHASXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UHASXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UHADD8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UHADD8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UHADD8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UHADD8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UHADD8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UHADD16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UHADD16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UHADD16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UHADD16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UHADD16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UDIVS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UDIVS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UDIVS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UDIVS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UDIVS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UBFXS_S__S___ID___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X1F}; /* 00000000000000000000000000011111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UBFXS_S__S___ID___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_UBFXS_S__S___ID___ID_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UBFXS_S__S___ID___ID_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UBFXS_S__S___ID___ID_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_UBFXS_S__S___ID___ID_i_x_widthm1 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_UBFXS_S__S___ID___ID_i_x_imm2 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UASXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UASXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UASXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UASXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UASXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UADD8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UADD8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UADD8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UADD8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UADD8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UADD16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UADD16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UADD16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UADD16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_UADD16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SXTAHS_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SXTAHS_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_SXTAHS_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SXTAHS_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SXTAHS_S__S__SS_i_x_rotate = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SXTAHS_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SXTAB16S_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SXTAB16S_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_SXTAB16S_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SXTAB16S_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SXTAB16S_S__S__SS_i_x_rotate = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SXTAB16S_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SXTABS_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SXTABS_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_SXTABS_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SXTABS_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SXTABS_S__S__SS_i_x_rotate = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SXTABS_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SUBSS_W_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBSS_W_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBSS_W_S__S__SS_i_x_t = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SUBSS_W_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SUBSS_W_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SUBSS_W_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SUBSS_W_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_SUBSS_W_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_SUBSS_W_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SUBWS_S__S___ID__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBWS_S__S___ID_;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBWS_S__S___ID__i_x_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SUBWS_S__S___ID__i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SUBWS_S__S___ID__i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SUBWS_S__S___ID__i_x_imm8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SUBWS_S__S___ID__i_x_imm3 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SUBSS_W_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBSS_W_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBSS_W_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SUBSS_W_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SUBSS_W_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SUBSS_W_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SUBSS_W_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_SUBSS_W_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SSUB8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SSUB8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SSUB8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SSUB8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SSUB8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SSUB16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SSUB16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SSUB16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SSUB16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SSUB16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SSAXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SSAXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SSAXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SSAXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SSAXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SSATS_S___ID__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0X1F}; /* 00000000000000000000000000011111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SSATS_S___ID__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_SSATS_S___ID__SS_i_x_rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SSATS_S___ID__SS_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SSATS_S___ID__SS_i_x_sh = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SSATS_S___ID__SS_i_x_imm2 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SSATS_S___ID__SS_i_x_sat_imm = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_SSATS_S___ID__SS_i_x_imm3 = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMULLS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMULLS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMULLS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMULLS_S__S__S__S_i_x_rdlo_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMULLS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMULLS_S__S__S__S_i_x_rdhi_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMMLSSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMMLSSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMMLSSS_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMMLSSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMMLSSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMMLSSS_S__S__S__S_i_x_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMMLSSS_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMMLASS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMMLASS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMMLASS_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMMLASS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMMLASS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMMLASS_S__S__S__S_i_x_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMMLASS_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMLSLDSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLSLDSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLSLDSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMLSLDSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMLSLDSS_S__S__S__S_i_x_rdlo_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMLSLDSS_S__S__S__S_i_x_m = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMLSLDSS_S__S__S__S_i_x_rdhi_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMLSDSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLSDSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLSDSS_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMLSDSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMLSDSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMLSDSS_S__S__S__S_i_x_m = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMLSDSS_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMLAWSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLAWSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLAWSS_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMLAWSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMLAWSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMLAWSS_S__S__S__S_i_x_m = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMLAWSS_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMLALDSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLALDSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLALDSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMLALDSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMLALDSS_S__S__S__S_i_x_rdlo_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMLALDSS_S__S__S__S_i_x_m = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMLALDSS_S__S__S__S_i_x_rdhi_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMLALSSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLALSSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLALSSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMLALSSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMLALSSS_S__S__S__S_i_x_rdlo_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMLALSSS_S__S__S__S_i_x_rdhi_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMLALSSS_S__S__S__S_i_x_m = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_SMLALSSS_S__S__S__S_i_x_n = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMLALS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLALS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLALS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMLALS_S__S__S__S_i_x_rdlo_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMLALS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMLALS_S__S__S__S_i_x_rdhi_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMLADSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLADSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLADSS_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMLADSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMLADSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMLADSS_S__S__S__S_i_x_m = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMLADSS_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SMLASSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLASSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLASSS_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SMLASSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SMLASSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SMLASSS_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SMLASSS_S__S__S__S_i_x_m = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_SMLASSS_S__S__S__S_i_x_n = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SHSUB8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SHSUB8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SHSUB8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SHSUB8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SHSUB8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SHSUB16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SHSUB16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SHSUB16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SHSUB16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SHSUB16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SHSAXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SHSAXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SHSAXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SHSAXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SHSAXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SHASXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SHASXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SHASXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SHASXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SHASXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SHADD8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SHADD8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SHADD8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SHADD8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SHADD8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SHADD16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SHADD16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SHADD16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SHADD16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SHADD16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SELS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SELS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SELS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SELS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SELS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SDIVS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SDIVS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SDIVS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SDIVS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SDIVS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SBFXS_S__S___ID___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X1F}; /* 00000000000000000000000000011111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SBFXS_S__S___ID___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_SBFXS_S__S___ID___ID_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SBFXS_S__S___ID___ID_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SBFXS_S__S___ID___ID_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SBFXS_S__S___ID___ID_i_x_widthm1 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SBFXS_S__S___ID___ID_i_x_imm2 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SBCSS_W_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SBCSS_W_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_SBCSS_W_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SBCSS_W_S__S__SS_i_x_t = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SBCSS_W_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SBCSS_W_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SBCSS_W_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_SBCSS_W_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_SBCSS_W_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SBCSS_W_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SBCSS_W_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_SBCSS_W_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SBCSS_W_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SBCSS_W_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_SBCSS_W_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_SBCSS_W_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_SBCSS_W_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SASXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SASXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SASXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SASXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SASXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SADD8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SADD8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SADD8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SADD8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SADD8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SADD16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SADD16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SADD16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SADD16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SADD16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_RSBSS_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSBSS_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_RSBSS_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_RSBSS_S__S__SS_i_x_t = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_RSBSS_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_RSBSS_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_RSBSS_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_RSBSS_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_RSBSS_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_RORSS_W_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RORSS_W_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_RORSS_W_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_RORSS_W_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_RORSS_W_S__S__S_i_x_S_set = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_RORSS_W_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_REVSHS_W_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_REVSHS_W_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_REVSHS_W_S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_REVSHS_W_S__S_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_REV16S_W_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_REV16S_W_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_REV16S_W_S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_REV16S_W_S__S_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_REVS_W_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_REVS_W_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_REVS_W_S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_REVS_W_S__S_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_RBITS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RBITS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_RBITS_S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_RBITS_S__S_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QSUB8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QSUB8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QSUB8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QSUB8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QSUB8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QSUB16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QSUB16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QSUB16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QSUB16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QSUB16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QSUBS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QSUBS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QSUBS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QSUBS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QSUBS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QSAXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QSAXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QSAXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QSAXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QSAXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QDSUBS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QDSUBS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QDSUBS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QDSUBS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QDSUBS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QDADDS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QDADDS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QDADDS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QDADDS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QDADDS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QASXS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QASXS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QASXS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QASXS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QASXS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QADD8S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QADD8S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QADD8S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QADD8S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QADD8S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QADD16S_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QADD16S_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QADD16S_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QADD16S_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QADD16S_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_QADDS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_QADDS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_QADDS_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_QADDS_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_QADDS_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PKHBTS_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask6 = {tab_mask6, 32};
	static uint32_t tab_mask7[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask7 = {tab_mask7, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PKHBTS_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_PKHBTS_S__S__SS_i_x_tb = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_PKHBTS_S__S__SS_i_x_T = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_PKHBTS_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_PKHBTS_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_PKHBTS_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_PKHBTS_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_PKHBTS_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask6, code_inst->mask);
	ARM_PKHBTS_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask7, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ORNSS_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ORNSS_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_ORNSS_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ORNSS_S__S__SS_i_x_t = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ORNSS_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ORNSS_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ORNSS_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ORNSS_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_ORNSS_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ORNSS_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ORNSS_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_ORNSS_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ORNSS_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ORNSS_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ORNSS_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ORNSS_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ORNSS_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MRRCSS_D__D__S__S__CRD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XF0}; /* 00000000000000000000000011110000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X10000000}; /* 00010000000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MRRCSS_D__D__S__S__CRD;

	/* put other parameters */
	/* complex decoding */
	ARM_MRRCSS_D__D__S__S__CRD_i_x_opc1 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MRRCSS_D__D__S__S__CRD_i_x_CRm = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MRRCSS_D__D__S__S__CRD_i_x_rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_MRRCSS_D__D__S__S__CRD_i_x_rt2_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_MRRCSS_D__D__S__S__CRD_i_x_mrrc = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_MRRCSS_D__D__S__S__CRD_i_x_coproc = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MRCSS_D__D__S__CRD__CRD___LB_D_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XE00000}; /* 00000000111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XE0}; /* 00000000000000000000000011100000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X10000000}; /* 00010000000000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MRCSS_D__D__S__CRD__CRD___LB_D_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_MRCSS_D__D__S__CRD__CRD___LB_D_RB__i_x_opc1 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MRCSS_D__D__S__CRD__CRD___LB_D_RB__i_x_opc2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MRCSS_D__D__S__CRD__CRD___LB_D_RB__i_x_CRn = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_MRCSS_D__D__S__CRD__CRD___LB_D_RB__i_x_CRm = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_MRCSS_D__D__S__CRD__CRD___LB_D_RB__i_x_rt_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_MRCSS_D__D__S__CRD__CRD___LB_D_RB__i_x_mrc = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_MRCSS_D__D__S__CRD__CRD___LB_D_RB__i_x_coproc = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MLSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MLSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MLSS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MLSS_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MLSS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_MLSS_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MLAS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MLAS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MLAS_S__S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MLAS_S__S__S__S_i_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MLAS_S__S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_MLAS_S__S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MCRRSS_D__D__S__S__CRD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XF0}; /* 00000000000000000000000011110000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X10000000}; /* 00010000000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MCRRSS_D__D__S__S__CRD;

	/* put other parameters */
	/* complex decoding */
	ARM_MCRRSS_D__D__S__S__CRD_i_x_opc1 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MCRRSS_D__D__S__S__CRD_i_x_CRm = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MCRRSS_D__D__S__S__CRD_i_x_rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_MCRRSS_D__D__S__S__CRD_i_x_rt2_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_MCRRSS_D__D__S__S__CRD_i_x_mcrr = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_MCRRSS_D__D__S__S__CRD_i_x_coproc = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MCRSS_D__D__S__CRD__CRD___LB_D_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XE00000}; /* 00000000111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XE0}; /* 00000000000000000000000011100000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X10000000}; /* 00010000000000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MCRSS_D__D__S__CRD__CRD___LB_D_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_MCRSS_D__D__S__CRD__CRD___LB_D_RB__i_x_opc1 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MCRSS_D__D__S__CRD__CRD___LB_D_RB__i_x_opc2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MCRSS_D__D__S__CRD__CRD___LB_D_RB__i_x_CRn = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_MCRSS_D__D__S__CRD__CRD___LB_D_RB__i_x_CRm = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_MCRSS_D__D__S__CRD__CRD___LB_D_RB__i_x_rt_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_MCRSS_D__D__S__CRD__CRD___LB_D_RB__i_x_mcr = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_MCRSS_D__D__S__CRD__CRD___LB_D_RB__i_x_coproc = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LSRSS_W_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LSRSS_W_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_LSRSS_W_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LSRSS_W_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LSRSS_W_S__S__S_i_x_S_set = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LSRSS_W_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDMDBS_SS___LB_S_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X1FFF}; /* 00000000000000000001111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0X4000}; /* 00000000000000000100000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0X8000}; /* 00000000000000001000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDMDBS_SS___LB_S_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDMDBS_SS___LB_S_RB__i_x_llist_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDMDBS_SS___LB_S_RB__i_x_W = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDMDBS_SS___LB_S_RB__i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDMDBS_SS___LB_S_RB__i_x_M = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDMDBS_SS___LB_S_RB__i_x_P = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_EORSS_W_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_EORSS_W_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_EORSS_W_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_EORSS_W_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_EORSS_W_S__S__SS_i_x_t = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_EORSS_W_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_EORSS_W_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_EORSS_W_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_EORSS_W_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_EORSS_W_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_EORSS_W_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_EORSS_W_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_EORSS_W_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_EORSS_W_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_EORSS_W_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_EORSS_W_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_EORSS_W_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_CLZS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CLZS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_CLZS_S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_CLZS_S__S_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XE0}; /* 00000000000000000000000011100000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0XF00000}; /* 00000000111100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {0X10000000}; /* 00010000000000000000000000000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__i_x_CRm = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__i_x_opc2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__i_x_coproc = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__i_x_CRd = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__i_x_CRn = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__i_x_opc1 = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__i_x_opc0 = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BICSS_W_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BICSS_W_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_BICSS_W_S__S__SS_i_x_t = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_BICSS_W_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_BICSS_W_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_BICSS_W_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_BICSS_W_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_BICSS_W_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_BICSS_W_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BICSS_W_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BICSS_W_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_BICSS_W_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_BICSS_W_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_BICSS_W_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_BICSS_W_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_BICSS_W_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_BICSS_W_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BFIS_S__S___ID___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X1F}; /* 00000000000000000000000000011111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BFIS_S__S___ID___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_BFIS_S__S___ID___ID_i_x_rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_BFIS_S__S___ID___ID_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_BFIS_S__S___ID___ID_i_x_msb = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_BFIS_S__S___ID___ID_i_x_imm2 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_BFIS_S__S___ID___ID_i_x_imm3 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BS_W_08X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3FF0000}; /* 00000011111111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0X2000}; /* 00000000000000000010000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BS_W_08X;

	/* put other parameters */
	/* complex decoding */
	ARM_BS_W_08X_i_x_imm10 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_BS_W_08X_i_x_imm11 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_BS_W_08X_i_x_j2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_BS_W_08X_i_x_S_set = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_BS_W_08X_i_x_j1 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BS_W_08X_0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F0000}; /* 00000000001111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X3C00000}; /* 00000011110000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0X2000}; /* 00000000000000000010000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BS_W_08X_0;

	/* put other parameters */
	/* complex decoding */
	ARM_BS_W_08X_0_i_x_imm6 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_BS_W_08X_0_i_x_imm11 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_BS_W_08X_0_i_x_cond_cond = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_BS_W_08X_0_i_x_j2 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_BS_W_08X_0_i_x_S_set = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_BS_W_08X_0_i_x_j1 = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MOVTS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVTS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVTS_S___ID_i_x_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MOVTS_S___ID_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MOVTS_S___ID_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_MOVTS_S___ID_i_x_imm8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_MOVTS_S___ID_i_x_imm4 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ORRS_W_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ORRS_W_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_ORRS_W_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ORRS_W_S__S__SS_i_x_t = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ORRS_W_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ORRS_W_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ORRS_W_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ORRS_W_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_ORRS_W_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MOVWS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVWS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVWS_S___ID_i_x_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MOVWS_S___ID_i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MOVWS_S___ID_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_MOVWS_S___ID_i_x_imm8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_MOVWS_S___ID_i_x_imm4 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ORRSS_W_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ORRSS_W_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_ORRSS_W_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ORRSS_W_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ORRSS_W_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ORRSS_W_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ORRSS_W_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ORRSS_W_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ASRSS_W_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ASRSS_W_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_ASRSS_W_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ASRSS_W_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ASRSS_W_S__S__S_i_x_S_set = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ASRSS_W_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ANDSS_W_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ANDSS_W_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_ANDSS_W_S__S__SS_i_x_t = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ANDSS_W_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ANDSS_W_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ANDSS_W_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ANDSS_W_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ANDSS_W_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_ANDSS_W_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ANDSS_W_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ANDSS_W_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_ANDSS_W_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ANDSS_W_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ANDSS_W_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ANDSS_W_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ANDSS_W_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ANDSS_W_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDSS_W_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDSS_W_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDSS_W_S__S__SS_i_x_t = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADDSS_W_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ADDSS_W_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ADDSS_W_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ADDSS_W_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ADDSS_W_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_ADDSS_W_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDWS_S__S___ID__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDWS_S__S___ID_;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDWS_S__S___ID__i_x_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADDWS_S__S___ID__i_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ADDWS_S__S___ID__i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ADDWS_S__S___ID__i_x_imm8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ADDWS_S__S___ID__i_x_imm3 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDSS_W_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDSS_W_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDSS_W_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADDSS_W_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ADDSS_W_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ADDSS_W_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ADDSS_W_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ADDSS_W_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADCSS_W_S__S__SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XC0}; /* 00000000000000000000000011000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADCSS_W_S__S__SS;

	/* put other parameters */
	/* complex decoding */
	ARM_ADCSS_W_S__S__SS_i_x_imm2 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADCSS_W_S__S__SS_i_x_t = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ADCSS_W_S__S__SS_i_x_imm3 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ADCSS_W_S__S__SS_i_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ADCSS_W_S__S__SS_i_x_rn_r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ADCSS_W_S__S__SS_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_ADCSS_W_S__S__SS_i_x_rd_r = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADCSS_W_S__S___IU_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADCSS_W_S__S___IU;

	/* put other parameters */
	/* complex decoding */
	ARM_ADCSS_W_S__S___IU_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADCSS_W_S__S___IU_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ADCSS_W_S__S___IU_i_x_rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_ADCSS_W_S__S___IU_i_x_rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_ADCSS_W_S__S___IU_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_ADCSS_W_S__S___IU_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PLIS__LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PLIS__LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_PLIS__LT_S__S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_PLIS__LT_S__S_RT__i_x_imm2 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_PLIS__LT_S__S_RT__i_x_Rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PLIS__LT_PC_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PLIS__LT_PC_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_PLIS__LT_PC_RT__i_x_x_U = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_PLIS__LT_PC_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PLIS__LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PLIS__LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_PLIS__LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_PLIS__LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PLIS__LT_S_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PLIS__LT_S_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_PLIS__LT_S_RT__0_i_x_x_imm12 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_PLIS__LT_S_RT__0_i_x_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PLDSS__LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PLDSS__LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_PLDSS__LT_S__S_RT__i_x_W = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_PLDSS__LT_S__S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_PLDSS__LT_S__S_RT__i_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_PLDSS__LT_S__S_RT__i_x_Rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PLDSS__LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PLDSS__LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_PLDSS__LT_S_RT__i_x_x_W = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_PLDSS__LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_PLDSS__LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PLDSS__LT_S_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PLDSS__LT_S_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_PLDSS__LT_S_RT__0_i_x_x_W = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_PLDSS__LT_S_RT__0_i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_PLDSS__LT_S_RT__0_i_x_x_Rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_RSBSS_W_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X7000}; /* 00000000000000000111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSBSS_W_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_RSBSS_W_S__S___ID_i_x_imm3 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_RSBSS_W_S__S___ID_i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_RSBSS_W_S__S___ID_i_x_Rn_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_RSBSS_W_S__S___ID_i_x_Rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_RSBSS_W_S__S___ID_i_x_i = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_RSBSS_W_S__S___ID_i_x_S_set = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LSLSS_W_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LSLSS_W_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_LSLSS_W_S__S__S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LSLSS_W_S__S__S_i_x_S_set = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LSLSS_W_S__S__S_i_x_rd_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LSLSS_W_S__S__S_i_x_rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRDS_S__S___LT_SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1E00000}; /* 00000001111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRDS_S__S___LT_SS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRDS_S__S___LT_SS_i_x_x_P_U_1_W = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRDS_S__S___LT_SS_i_x_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRDS_S__S___LT_SS_i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDRDS_S__S___LT_SS_i_x_x_imm8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDRDS_S__S___LT_SS_i_x_x_Rt2_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRDS_S__S___LT_SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1E00000}; /* 00000001111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRDS_S__S___LT_SS;

	/* put other parameters */
	/* complex decoding */
	ARM_STRDS_S__S___LT_SS_i_x_x_P_U_1_W = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRDS_S__S___LT_SS_i_x_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRDS_S__S___LT_SS_i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STRDS_S__S___LT_SS_i_x_x_imm8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STRDS_S__S___LT_SS_i_x_x_Rt2_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STREXHS_S__S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STREXHS_S__S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STREXHS_S__S___LT_S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STREXHS_S__S___LT_S_RT__i_x_Rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STREXHS_S__S___LT_S_RT__i_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STREXBS_S__S__S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STREXBS_S__S__S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rt_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rd_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STREXBS_S__S__S___LT_S_RT__i_x_Rt2_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STREXBS_S__S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STREXBS_S__S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STREXBS_S__S___LT_S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STREXBS_S__S___LT_S_RT__i_x_Rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STREXBS_S__S___LT_S_RT__i_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STREXS_S__S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STREXS_S__S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STREXS_S__S___LT_S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STREXS_S__S___LT_S_RT__i_x_Rt_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STREXS_S__S___LT_S_RT__i_x_imm8 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STREXS_S__S___LT_S_RT__i_x_Rd_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDREXHS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDREXHS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDREXHS_S___LT_S_RT__i_x_Rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDREXHS_S___LT_S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDREXBS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDREXBS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDREXBS_S___LT_S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDREXBS_S___LT_S_RT__i_x_Rt2_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDREXBS_S___LT_S_RT__i_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDREXBS_S___LT_S_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDREXBS_S___LT_S_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_LDREXBS_S___LT_S_RT__0_i_x_Rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDREXBS_S___LT_S_RT__0_i_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDREXS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDREXS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDREXS_S___LT_S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDREXS_S___LT_S_RT__i_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDREXS_S___LT_S_RT__i_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0X1FFF}; /* 00000000000000000001111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X4000}; /* 00000000000000000100000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_W = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__M = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSHS_S___LT_S_RT____IS0XX_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XFF00}; /* 00000000000000001111111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSHS_S___LT_S_RT____IS0XX;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSHS_S___LT_S___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSHS_S___LT_S___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSHS_S___LT_S___I0XX_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSBS_S___LT_PC_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSBS_S___LT_PC_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSBS_S___LT_PC_RT__i_x_Rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSBS_S___LT_PC_RT__i_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSBS_S___LT_PC_RT__i_x_U = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSBS_S___LT_S_RT____IS0XX_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XFF00}; /* 00000000000000001111111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSBS_S___LT_S_RT____IS0XX;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSBS_S___LT_S___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSBS_S___LT_S___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSBS_S___LT_S___I0XX_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRBS_S___LT_S_RT____IS0XX_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XFF00}; /* 00000000000000001111111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRBS_S___LT_S_RT____IS0XX;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRBS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRBS_W_S___LT_S___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRBS_W_S___LT_S___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRBS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRBS_S___LT_SS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X700}; /* 00000000000000000000011100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRBS_S___LT_SS;

	/* put other parameters */
	/* complex decoding */
	ARM_STRBS_S___LT_SS_i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRBS_S___LT_SS_i_x_x_Rt_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRBS_S___LT_SS_i_x_x_imm8 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STRBS_S___LT_SS_i_x_x_P_U_W = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRBS_W_S___LT_S___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRBS_W_S___LT_S___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRBS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRS_S___LT_S_RT____IS0XX_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X700}; /* 00000000000000000000011100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRS_S___LT_S_RT____IS0XX;

	/* put other parameters */
	/* complex decoding */
	ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_Rt_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_P_U_W = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STRS_S___LT_S_RT____IS0XX_i_x_x_imm8 = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRS_W_S___LT_S___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRS_W_S___LT_S___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0X1FFF}; /* 00000000000000000001111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X4000}; /* 00000000000000000100000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0X8000}; /* 00000000000000001000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_W = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__M = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__P = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRHS_S___LT_S_RT____IS0XX_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X700}; /* 00000000000000000000011100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRHS_S___LT_S_RT____IS0XX;

	/* put other parameters */
	/* complex decoding */
	ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_Rt_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_imm8 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STRHS_S___LT_S_RT____IS0XX_i_x_x_P_U_W = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRHS_W_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRHS_W_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRHS_W_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRHS_W_S___LT_S_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRHS_W_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRHS_S___LT_S_RT____IS0XX_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XFF00}; /* 00000000000000001111111100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRHS_S___LT_S_RT____IS0XX;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRHS_S___LT_S_RT____IS0XX_i_x_x_Rt_1_P_U_W_val = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRHS_W_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRHS_W_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRHS_W_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRHS_W_S___LT_S_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRHS_W_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSHS_W_S___LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSHS_W_S___LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDRSHS_W_S___LT_S__S_RT__i_x_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRHS_W_S___LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRHS_W_S___LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRHS_W_S___LT_S__S_RT__i_x_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STRHS_W_S___LT_S__S_RT__i_x_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRHS_W_S___LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRHS_W_S___LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDRHS_W_S___LT_S__S_RT__i_x_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRS_S___LT_S_RT____IS0XX_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X700}; /* 00000000000000000000011100000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRS_S___LT_S_RT____IS0XX;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_Rt_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_P_U_W = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDRS_S___LT_S_RT____IS0XX_i_x_x_imm8 = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRS_W_S___LT_S___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0XFFF}; /* 00000000000000000000111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRS_W_S___LT_S___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_imm12 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRS_W_S___LT_S___I0XX_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSHTS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSHTS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSHTS_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSHTS_S___LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSHTS_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSBTS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSBTS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSBTS_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSBTS_S___LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSBTS_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRTS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRTS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRTS_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRTS_S___LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRTS_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRTS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRTS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRTS_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRTS_S___LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRTS_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRHTS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRHTS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRHTS_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRHTS_S___LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRHTS_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRHTS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRHTS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRHTS_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRHTS_S___LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRHTS_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRBTS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRBTS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRBTS_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRBTS_S___LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRBTS_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRBTS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRBTS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRBTS_S___LT_S_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRBTS_S___LT_S_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRBTS_S___LT_S_RT__i_x_x_Rt_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSBS_W_S___LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSBS_W_S___LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDRSBS_W_S___LT_S__S_RT__i_x_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRBS_W_S___LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRBS_W_S___LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRBS_W_S___LT_S__S_RT__i_x_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STRBS_W_S___LT_S__S_RT__i_x_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRBS_W_S___LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRBS_W_S___LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDRBS_W_S___LT_S__S_RT__i_x_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRS_W_S___LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRS_W_S___LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRS_W_S___LT_S__S_RT__i_x_x_rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRS_W_S___LT_S__S_RT__i_x_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRS_W_S___LT_S__S_RT__i_x_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STRS_W_S___LT_S__S_RT__i_x_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRS_W_S___LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X30}; /* 00000000000000000000000000110000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRS_W_S___LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRS_W_S___LT_S__S_RT__i_x_x_imm2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDRS_W_S___LT_S__S_RT__i_x_x_rm_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDC2SS_D__D___LT_RD_RT___D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDC2SS_D__D___LT_RD_RT___D;

	/* put other parameters */
	/* complex decoding */
	ARM_LDC2SS_D__D___LT_RD_RT___D_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT___D_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT___D_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT___D_i_x_x_D = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT___D_i_x_x_CRd = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDC2SS_D__D___LT_RD_RT____ISD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDC2SS_D__D___LT_RD_RT____ISD;

	/* put other parameters */
	/* complex decoding */
	ARM_LDC2SS_D__D___LT_RD_RT____ISD_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT____ISD_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT____ISD_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT____ISD_i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT____ISD_i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD_RT____ISD_i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDC2SS_D__D___LT_RD___ISD_RT__21_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDC2SS_D__D___LT_RD___ISD_RT__21;

	/* put other parameters */
	/* complex decoding */
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDC2SS_D__D___LT_RD___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDC2SS_D__D___LT_RD___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_LDC2SS_D__D___LT_RD___ISD_RT__i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDCSS_D__D___LT_RD_RT___D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDCSS_D__D___LT_RD_RT___D;

	/* put other parameters */
	/* complex decoding */
	ARM_LDCSS_D__D___LT_RD_RT___D_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT___D_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT___D_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT___D_i_x_x_D = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT___D_i_x_x_CRd = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDCSS_D__D___LT_RD_RT____ISD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDCSS_D__D___LT_RD_RT____ISD;

	/* put other parameters */
	/* complex decoding */
	ARM_LDCSS_D__D___LT_RD_RT____ISD_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT____ISD_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT____ISD_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT____ISD_i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT____ISD_i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD_RT____ISD_i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDCSS_D__D___LT_RD___ISD_RT__21_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDCSS_D__D___LT_RD___ISD_RT__21;

	/* put other parameters */
	/* complex decoding */
	ARM_LDCSS_D__D___LT_RD___ISD_RT__21_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__21_i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__21_i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDCSS_D__D___LT_RD___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDCSS_D__D___LT_RD___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDCSS_D__D___LT_RD___ISD_RT__i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_LDCSS_D__D___LT_RD___ISD_RT__i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STC2SS_D__D___LT_RD_RT___D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STC2SS_D__D___LT_RD_RT___D;

	/* put other parameters */
	/* complex decoding */
	ARM_STC2SS_D__D___LT_RD_RT___D_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT___D_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT___D_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT___D_i_x_x_D = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT___D_i_x_x_CRd = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STC2SS_D__D___LT_RD_RT____ISD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STC2SS_D__D___LT_RD_RT____ISD;

	/* put other parameters */
	/* complex decoding */
	ARM_STC2SS_D__D___LT_RD_RT____ISD_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT____ISD_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT____ISD_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT____ISD_i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT____ISD_i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD_RT____ISD_i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STC2SS_D__D___LT_RD___ISD_RT__21_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STC2SS_D__D___LT_RD___ISD_RT__21;

	/* put other parameters */
	/* complex decoding */
	ARM_STC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__21_i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STC2SS_D__D___LT_RD___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STC2SS_D__D___LT_RD___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STC2SS_D__D___LT_RD___ISD_RT__i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_STC2SS_D__D___LT_RD___ISD_RT__i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STCSS_D__D___LT_RD_RT___D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STCSS_D__D___LT_RD_RT___D;

	/* put other parameters */
	/* complex decoding */
	ARM_STCSS_D__D___LT_RD_RT___D_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT___D_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT___D_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT___D_i_x_x_D = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT___D_i_x_x_CRd = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STCSS_D__D___LT_RD_RT____ISD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STCSS_D__D___LT_RD_RT____ISD;

	/* put other parameters */
	/* complex decoding */
	ARM_STCSS_D__D___LT_RD_RT____ISD_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT____ISD_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT____ISD_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT____ISD_i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT____ISD_i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_STCSS_D__D___LT_RD_RT____ISD_i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STCSS_D__D___LT_RD___ISD_RT__21_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STCSS_D__D___LT_RD___ISD_RT__21;

	/* put other parameters */
	/* complex decoding */
	ARM_STCSS_D__D___LT_RD___ISD_RT__21_i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__21_i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__21_i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__21_i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STCSS_D__D___LT_RD___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STCSS_D__D___LT_RD___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STCSS_D__D___LT_RD___ISD_RT__i_x_x_coproc = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__i_x_x_addr_r_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__i_x_x_addr_i = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__i_x_x_addr_u = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__i_x_x_D = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_STCSS_D__D___LT_RD___ISD_RT__i_x_x_CRd = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BLXS_0X08X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0X1}; /* 00000000000000000000000000000001 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0X7FE}; /* 00000000000000000000011111111110 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0X2000}; /* 00000000000000000010000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X3FF0000}; /* 00000011111111110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BLXS_0X08X;

	/* put other parameters */
	/* complex decoding */
	ARM_BLXS_0X08X_i_x_H = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_BLXS_0X08X_i_x_imm10L = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_BLXS_0X08X_i_x_J2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_BLXS_0X08X_i_x_J1 = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_BLXS_0X08X_i_x_imm10H = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_BLXS_0X08X_i_x_S = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_TBBS__LT_S__S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X10}; /* 00000000000000000000000000010000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_TBBS__LT_S__S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_TBBS__LT_S__S_RT__i_x_Rn_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_TBBS__LT_S__S_RT__i_x_H = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_TBBS__LT_S__S_RT__i_x_Rm_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BLS_0XX_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3FF0000}; /* 00000011111111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X4000000}; /* 00000100000000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0X2000}; /* 00000000000000000010000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BLS_0XX;

	/* put other parameters */
	/* complex decoding */
	ARM_BLS_0XX_i_x_imm10 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_BLS_0XX_i_x_imm11 = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_BLS_0XX_i_x_J2 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_BLS_0XX_i_x_S_set = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_BLS_0XX_i_x_J1 = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VSS_F64_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {    0X40}; /* 00000000000000000000000001000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSS_F64_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VSS_F64_DD__DD__DD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VSS_F64_DD__DD__DD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VSS_F64_DD__DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VSS_F64_DD__DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VSS_F64_DD__DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VSS_F64_DD__DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_VSS_F64_DD__DD__DD_i_x_x_op_ = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VSS_F32_SD__SD__SD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {    0X40}; /* 00000000000000000000000001000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSS_F32_SD__SD__SD;

	/* put other parameters */
	/* complex decoding */
	ARM_VSS_F32_SD__SD__SD_i_x_x_Vn__p = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VSS_F32_SD__SD__SD_i_x_x_Vn__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VSS_F32_SD__SD__SD_i_x_x_Vd__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VSS_F32_SD__SD__SD_i_x_x_Vd__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VSS_F32_SD__SD__SD_i_x_x_Vm__p = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VSS_F32_SD__SD__SD_i_x_x_Vm__r = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_VSS_F32_SD__SD__SD_i_x_x_op_ = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VSS_F32_QD__QD__QD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSS_F32_QD__QD__QD;

	/* put other parameters */
	/* complex decoding */
	ARM_VSS_F32_QD__QD__QD_i_x_x_op_ = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VSS_F32_QD__QD__QD_i_x_x_Vn__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VSS_F32_QD__QD__QD_i_x_x_Vn__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VSS_F32_QD__QD__QD_i_x_x_Vm__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VSS_F32_QD__QD__QD_i_x_x_Vm__p = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VSS_F32_QD__QD__QD_i_x_x_Vd__r = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_VSS_F32_QD__QD__QD_i_x_x_Vd__p = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VSS_F32_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	static uint32_t tab_mask6[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask6 = {tab_mask6, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSS_F32_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VSS_F32_DD__DD__DD_i_x_x_op_ = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VSS_F32_DD__DD__DD_i_x_x_Vn__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VSS_F32_DD__DD__DD_i_x_x_Vn__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VSS_F32_DD__DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VSS_F32_DD__DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VSS_F32_DD__DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask5, code_inst->mask);
	ARM_VSS_F32_DD__DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask6, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VPOPS__LB_SD_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VPOPS__LB_SD_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_VPOPS__LB_SD_RB__i_x_x_imm8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VPOPS__LB_SD_RB__i_x_x_Vd__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VPOPS__LB_SD_RB__i_x_x_Vd__r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VPOPS__LB_DD_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VPOPS__LB_DD_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_VPOPS__LB_DD_RB__i_x_x_imm8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VPOPS__LB_DD_RB__i_x_x_Vd__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VPOPS__LB_DD_RB__i_x_x_Vd__p = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VADDS_F64_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VADDS_F64_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VADDS_F64_DD__DD__DD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VADDS_F64_DD__DD__DD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VADDS_F64_DD__DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VADDS_F64_DD__DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VADDS_F64_DD__DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VADDS_F64_DD__DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VADDS_F32_SD__SD__SD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VADDS_F32_SD__SD__SD;

	/* put other parameters */
	/* complex decoding */
	ARM_VADDS_F32_SD__SD__SD_i_x_x_Vn__p = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VADDS_F32_SD__SD__SD_i_x_x_Vn__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VADDS_F32_SD__SD__SD_i_x_x_Vm__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VADDS_F32_SD__SD__SD_i_x_x_Vm__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VADDS_F32_SD__SD__SD_i_x_x_Vd__p = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VADDS_F32_SD__SD__SD_i_x_x_Vd__r = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VADDS_F32_QD__QD__QD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VADDS_F32_QD__QD__QD;

	/* put other parameters */
	/* complex decoding */
	ARM_VADDS_F32_QD__QD__QD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VADDS_F32_QD__QD__QD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VADDS_F32_QD__QD__QD_i_x_x_Vm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VADDS_F32_QD__QD__QD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VADDS_F32_QD__QD__QD_i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VADDS_F32_QD__QD__QD_i_x_x_Vd__p = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VADDS_F32_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VADDS_F32_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VADDS_F32_DD__DD__DD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VADDS_F32_DD__DD__DD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VADDS_F32_DD__DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VADDS_F32_DD__DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VADDS_F32_DD__DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VADDS_F32_DD__DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VCVTS_F64_S_DD__SD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 00000000000001110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VCVTS_F64_S_DD__SD;

	/* put other parameters */
	/* complex decoding */
	ARM_VCVTS_F64_S_DD__SD_i_x_x_opc2 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VCVTS_F64_S_DD__SD_i_x_x_Vd__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VCVTS_F64_S_DD__SD_i_x_x_Vd__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VCVTS_F64_S_DD__SD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VCVTS_F64_S_DD__SD_i_x_x_Vm__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VCVTS_F64_S_DD__SD_i_x_x_op_ = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VCVTSS_U32_F64_SD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 00000000000001110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VCVTSS_U32_F64_SD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VCVTSS_U32_F64_SD__DD_i_x_x_opc2 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VCVTSS_U32_F64_SD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VCVTSS_U32_F64_SD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VCVTSS_U32_F64_SD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VCVTSS_U32_F64_SD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VCVTSS_U32_F64_SD__DD_i_x_x_op_ = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VCVTS_F32_S_SD__SD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 00000000000001110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VCVTS_F32_S_SD__SD;

	/* put other parameters */
	/* complex decoding */
	ARM_VCVTS_F32_S_SD__SD_i_x_x_opc2 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VCVTS_F32_S_SD__SD_i_x_x_Vd__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VCVTS_F32_S_SD__SD_i_x_x_Vd__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VCVTS_F32_S_SD__SD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VCVTS_F32_S_SD__SD_i_x_x_Vm__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VCVTS_F32_S_SD__SD_i_x_x_op_ = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VPUSHS__LB_SD_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VPUSHS__LB_SD_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_VPUSHS__LB_SD_RB__i_x_x_imm8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VPUSHS__LB_SD_RB__i_x_x_Vd__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VPUSHS__LB_SD_RB__i_x_x_Vd__r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VPUSHS__LB_DD_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VPUSHS__LB_DD_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_VPUSHS__LB_DD_RB__i_x_x_imm8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VPUSHS__LB_DD_RB__i_x_x_Vd__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VPUSHS__LB_DD_RB__i_x_x_Vd__p = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMULS_F64_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMULS_F64_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VMULS_F64_DD__DD__DD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMULS_F64_DD__DD__DD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMULS_F64_DD__DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMULS_F64_DD__DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VMULS_F64_DD__DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VMULS_F64_DD__DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMULS_F32_SD__SD__SD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMULS_F32_SD__SD__SD;

	/* put other parameters */
	/* complex decoding */
	ARM_VMULS_F32_SD__SD__SD_i_x_x_Vn__p = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMULS_F32_SD__SD__SD_i_x_x_Vn__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMULS_F32_SD__SD__SD_i_x_x_Vm__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMULS_F32_SD__SD__SD_i_x_x_Vm__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VMULS_F32_SD__SD__SD_i_x_x_Vd__p = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VMULS_F32_SD__SD__SD_i_x_x_Vd__r = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMULS_F32_QD__QD__QD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMULS_F32_QD__QD__QD;

	/* put other parameters */
	/* complex decoding */
	ARM_VMULS_F32_QD__QD__QD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMULS_F32_QD__QD__QD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMULS_F32_QD__QD__QD_i_x_x_Vm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMULS_F32_QD__QD__QD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VMULS_F32_QD__QD__QD_i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VMULS_F32_QD__QD__QD_i_x_x_Vd__p = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMULS_F32_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMULS_F32_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VMULS_F32_DD__DD__DD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMULS_F32_DD__DD__DD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMULS_F32_DD__DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMULS_F32_DD__DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VMULS_F32_DD__DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VMULS_F32_DD__DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMRSS_S__FPSCR_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMRSS_S__FPSCR;

	/* put other parameters */
	/* complex decoding */
	ARM_VMRSS_S__FPSCR_i_x_Rt_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VSTRS_SD___LT_S___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSTRS_SD___LT_S___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_U = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VSTRS_DD___LT_S___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSTRS_DD___LT_S___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_U = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__p = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VLDRS_DD___LT_S___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VLDRS_DD___LT_S___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_U = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_imm8 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VLDRS_DD___LT_S___ISD_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X800000}; /* 00000000100000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VLDRS_DD___LT_S___ISD_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_U = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Rn_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_imm8 = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VDIVS_F64_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VDIVS_F64_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VDIVS_F64_DD__DD__DD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VDIVS_F64_DD__DD__DD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VDIVS_F64_DD__DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VDIVS_F64_DD__DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VDIVS_F64_DD__DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VDIVS_F64_DD__DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VDIVS_F32_SD__SD__SD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VDIVS_F32_SD__SD__SD;

	/* put other parameters */
	/* complex decoding */
	ARM_VDIVS_F32_SD__SD__SD_i_x_x_Vn__p = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VDIVS_F32_SD__SD__SD_i_x_x_Vn__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VDIVS_F32_SD__SD__SD_i_x_x_Vm__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VDIVS_F32_SD__SD__SD_i_x_x_Vm__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VDIVS_F32_SD__SD__SD_i_x_x_Vd__p = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VDIVS_F32_SD__SD__SD_i_x_x_Vd__r = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VSUBS_F64_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSUBS_F64_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VSUBS_F64_DD__DD__DD_i_x_x_Vn__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VSUBS_F64_DD__DD__DD_i_x_x_Vn__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VSUBS_F64_DD__DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VSUBS_F64_DD__DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VSUBS_F64_DD__DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VSUBS_F64_DD__DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VSUBS_F32_SD__SD__SD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSUBS_F32_SD__SD__SD;

	/* put other parameters */
	/* complex decoding */
	ARM_VSUBS_F32_SD__SD__SD_i_x_x_Vn__p = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VSUBS_F32_SD__SD__SD_i_x_x_Vn__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VSUBS_F32_SD__SD__SD_i_x_x_Vm__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VSUBS_F32_SD__SD__SD_i_x_x_Vm__r = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VSUBS_F32_SD__SD__SD_i_x_x_Vd__p = __EXTRACT_CISC(&mask4, code_inst->mask);
	ARM_VSUBS_F32_SD__SD__SD_i_x_x_Vd__r = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_DD__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_DD__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_DD__S__S_i_x_op_ = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMOVS_DD__S__S_i_x_Rt2_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMOVS_DD__S__S_i_x_Rm__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMOVS_DD__S__S_i_x_Rm__p = __EXTRACT_CISC(&mask3, code_inst->mask);
	ARM_VMOVS_DD__S__S_i_x_Rt_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_SD__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X100000}; /* 00000000000100000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {    0X80}; /* 00000000000000000000000010000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_SD__S;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_SD__S_i_x_op_ = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMOVS_SD__S_i_x_Rt_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMOVS_SD__S_i_x_Vn__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMOVS_SD__S_i_x_Vn__r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_F64_DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_F64_DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_F64_DD__DD_i_x_x_Vm__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMOVS_F64_DD__DD_i_x_x_Vm__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMOVS_F64_DD__DD_i_x_x_Vd__r = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMOVS_F64_DD__DD_i_x_x_Vd__p = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_F32_SD__SD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0X20}; /* 00000000000000000000000000100000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_F32_SD__SD;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_F32_SD__SD_i_x_x_Vm__p = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMOVS_F32_SD__SD_i_x_x_Vm__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMOVS_F32_SD__SD_i_x_x_Vd__p = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMOVS_F32_SD__SD_i_x_x_Vd__r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_F64_DD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_F64_DD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_F64_DD___ID_i_x_x_Vd__r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMOVS_F64_DD___ID_i_x_x_Vd__p = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMOVS_F64_DD___ID_i_x_x_imm4L = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMOVS_F64_DD___ID_i_x_x_imm4H = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_F32_SD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X400000}; /* 00000000010000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_F32_SD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_F32_SD___ID_i_x_x_Vd__p = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_VMOVS_F32_SD___ID_i_x_x_Vd__r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_VMOVS_F32_SD___ID_i_x_x_imm4L = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_VMOVS_F32_SD___ID_i_x_x_imm4H = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UXTHS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UXTHS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_UXTHS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UXTHS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_UXTBS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UXTBS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_UXTBS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_UXTBS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_YIELDS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_YIELDS;

	/* put other parameters */
	/* complex decoding */
	ARM_YIELDS_i_x_mask = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_YIELDS_i_x_firstcond = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MOVS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X800000}; /* 0000000010000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X780000}; /* 0000000001111000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVS_S__S_i_x_H = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MOVS_S__S_i_x_rm_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_MOVS_S__S_i_x_rd_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MOVS_RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVS_RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVS_RD___ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MOVS_RD___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_TSTS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_TSTS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_TSTS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_TSTS_RD__RD_i_x_rn_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SXTHS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SXTHS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_SXTHS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SXTHS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SXTBS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SXTBS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_SXTBS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SXTBS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SUBS_RD__RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBS_RD__RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBS_RD__RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SUBS_RD__RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SUBS_RD__RD__RD_i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SUBS_SP___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X7F0000}; /* 0000000001111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBS_SP___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBS_SP___ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SUBS_RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBS_RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBS_RD___ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SUBS_RD___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SUBS_RD__RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBS_RD__RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBS_RD__RD___ID_i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SUBS_RD__RD___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_SUBS_RD__RD___ID_i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRHS_RD___LT_RD__RD__RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRHS_RD___LT_RD__RD__RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRHS_RD___LT_RD__RD__RT__i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRHS_RD___LT_RD__RD__RT__i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRHS_RD___LT_RD__RD__RT__i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRHS_RD___LT_RD___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRHS_RD___LT_RD___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRHS_RD___LT_RD___I0XX_RT__i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRHS_RD___LT_RD___I0XX_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRHS_RD___LT_RD___I0XX_RT__i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRBS_RD___LT_RD__RD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRBS_RD___LT_RD__RD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRBS_RD___LT_RD__RD_RT__i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRBS_RD___LT_RD__RD_RT__i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRBS_RD___LT_RD__RD_RT__i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRBS_RD___LT_RD___ID_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRBS_RD___LT_RD___ID_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRBS_RD___LT_RD___ID_RT__i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRBS_RD___LT_RD___ID_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRBS_RD___LT_RD___ID_RT__i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRS_RD___LT_SP___ID_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRS_RD___LT_SP___ID_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRS_RD___LT_SP___ID_RT__i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRS_RD___LT_SP___ID_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRS_RD___LT_RD__RD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRS_RD___LT_RD__RD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRS_RD___LT_RD__RD_RT__i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRS_RD___LT_RD__RD_RT__i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRS_RD___LT_RD__RD_RT__i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STRS_RD___LT_RD___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRS_RD___LT_RD___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STRS_RD___LT_RD___I0XX_RT__i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STRS_RD___LT_RD___I0XX_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_STRS_RD___LT_RD___I0XX_RT__i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_STMIAS_RD_21___LB_S_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STMIAS_RD_21___LB_S_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_STMIAS_RD_21___LB_S_RB__i_x_llist_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_STMIAS_RD_21___LB_S_RB__i_x_rn_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_SBCS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SBCS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_SBCS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_SBCS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_RORS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RORS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_RORS_RD__RD_i_x_rs_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_RORS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_REVSHS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_REVSHS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_REVSHS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_REVSHS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_REV16S_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_REV16S_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_REV16S_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_REV16S_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_REVS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_REVS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_REVS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_REVS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PUSHS__LB_SS_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PUSHS__LB_SS_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_PUSHS__LB_SS_RB__i_x_llist_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_PUSHS__LB_SS_RB__0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_PUSHS__LB_SS_RB__0;

	/* put other parameters */
	/* complex decoding */
	ARM_PUSHS__LB_SS_RB__0_i_x_llist_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_POPS__LB_SS_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_POPS__LB_SS_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_POPS__LB_SS_RB__i_x_llist_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_POPS__LB_SS_RB__0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_POPS__LB_SS_RB__0;

	/* put other parameters */
	/* complex decoding */
	ARM_POPS__LB_SS_RB__0_i_x_llist_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ORRS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ORRS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_ORRS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ORRS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_RSBS_RD__RD___I0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSBS_RD__RD___I0;

	/* put other parameters */
	/* complex decoding */
	ARM_RSBS_RD__RD___I0_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_RSBS_RD__RD___I0_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MVNS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MVNS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_MVNS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MVNS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MULS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MULS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_MULS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_MULS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LSRS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LSRS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_LSRS_RD__RD_i_x_rs_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LSRS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LSRS_RD__RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LSRS_RD__RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_LSRS_RD__RD___ID_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LSRS_RD__RD___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LSRS_RD__RD___ID_i_x_imm5_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LSLS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LSLS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_LSLS_RD__RD_i_x_rs_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LSLS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LSLS_RD__RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LSLS_RD__RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_LSLS_RD__RD___ID_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LSLS_RD__RD___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LSLS_RD__RD___ID_i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSHS_RD___LT_RD__RD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSHS_RD___LT_RD__RD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRSBS_RD___LT_RD__RD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSBS_RD___LT_RD__RD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRHS_RD___LT_RD__RD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRHS_RD___LT_RD__RD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRHS_RD___LT_RD___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRHS_RD___LT_RD___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRBS_RD___LT_RD__RD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRBS_RD___LT_RD__RD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRBS_RD___LT_RD___ID_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRBS_RD___LT_RD___ID_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRBS_RD___LT_RD___ID_RT__i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRBS_RD___LT_RD___ID_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRBS_RD___LT_RD___ID_RT__i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRS_RD___LT_SP___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRS_RD___LT_SP___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRS_RD___LT_SP___I0XX_RT__i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRS_RD___LT_SP___I0XX_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRS_RD___LT_PC___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRS_RD___LT_PC___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRS_RD___LT_PC___I0XX_RT__i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRS_RD___LT_PC___I0XX_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRS_RD___LT_RD__RD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRS_RD___LT_RD__RD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRS_RD___LT_RD__RD_RT__i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRS_RD___LT_RD__RD_RT__i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRS_RD___LT_RD__RD_RT__i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDRS_RD___LT_RD___I0XX_RT__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRS_RD___LT_RD___I0XX_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_LDMIAS_RD___LB_S_RB__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDMIAS_RD___LB_S_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDMIAS_RD___LB_S_RB__i_x_llist_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_LDMIAS_RD___LB_S_RB__i_x_rn_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_EORS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_EORS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_EORS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_EORS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_CMPS_RD__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X800000}; /* 0000000010000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X780000}; /* 0000000001111000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMPS_RD__S;

	/* put other parameters */
	/* complex decoding */
	ARM_CMPS_RD__S_i_x_H = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_CMPS_RD__S_i_x_rm_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_CMPS_RD__S_i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_CMPS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMPS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_CMPS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_CMPS_RD__RD_i_x_rn_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_CMPS_RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMPS_RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_CMPS_RD___ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_CMPS_RD___ID_i_x_rn_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_CMNS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMNS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_CMNS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_CMNS_RD__RD_i_x_rn_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_CBZS_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X8000000}; /* 0000100000000000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = {0XF80000}; /* 0000000011111000 */
	static mask_t mask3 = {tab_mask3, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CBZS_RD__D;

	/* put other parameters */
	/* complex decoding */
	ARM_CBZS_RD__D_i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_CBZS_RD__D_i_x_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_CBZS_RD__D_i_x_op_ = __EXTRACT_CISC(&mask2, code_inst->mask);
	ARM_CBZS_RD__D_i_x_imm5 = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BXS_S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X780000}; /* 0000000001111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BXS_S;

	/* put other parameters */
	/* complex decoding */
	ARM_BXS_S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BLXS_S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X780000}; /* 0000000001111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BLXS_S;

	/* put other parameters */
	/* complex decoding */
	ARM_BLXS_S_i_x_rm_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BKPT__ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BKPT__ID;

	/* put other parameters */
	/* complex decoding */
	ARM_BKPT__ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BICS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BICS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_BICS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_BICS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_BS_N__40_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X7FF0000}; /* 0000011111111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BS_N__40;

	/* put other parameters */
	/* complex decoding */
	ARM_BS_N__40_i_x_imm11 = __EXTS_CISC(&mask0, code_inst->mask, 11);

	return inst;

}

static arm_inst_t *arm_instr_S_N_08X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_S_N_08X;

	/* put other parameters */
	/* complex decoding */
	ARM_S_N_08X_i_x_simm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_S_N_08X_i_x_cond = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ASRS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ASRS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_ASRS_RD__RD_i_x_rs_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ASRS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ASRS_RD__RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X7C00000}; /* 0000011111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ASRS_RD__RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ASRS_RD__RD___ID_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ASRS_RD__RD___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ASRS_RD__RD___ID_i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ANDS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ANDS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_ANDS_RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ANDS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X800000}; /* 0000000010000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X780000}; /* 0000000001111000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDS_S__S_i_x_rm_r = (0 | __EXTRACT_CISC(&mask1, code_inst->mask))
;
	ARM_ADDS_S__S_i_x_rd_r = ((0 | ((__EXTRACT_CISC(&mask0, code_inst->mask) & 1) << 3)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 7) << 0))
;

	return inst;

}

static arm_inst_t *arm_instr_ADDS_RD__RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDS_RD__RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDS_RD__RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADDS_RD__RD__RD_i_x_rm_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ADDS_RD__RD__RD_i_x_rn_ro = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDS_SP__SP___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X7F0000}; /* 0000000001111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDS_SP__SP___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDS_SP__SP___ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDS_RD__SP___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDS_RD__SP___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDS_RD__SP___ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADDS_RD__SP___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDS_RD__PC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDS_RD__PC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDS_RD__PC___ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADDS_RD__PC___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDS_RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X7000000}; /* 0000011100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDS_RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDS_RD___ID_i_x_imm_n = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADDS_RD___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADDS_RD__RD___ID_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X1C00000}; /* 0000000111000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDS_RD__RD___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDS_RD__RD___ID_i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADDS_RD__RD___ID_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);
	ARM_ADDS_RD__RD___ID_i_x_imm_n = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_ADCS_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X380000}; /* 0000000000111000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADCS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	ARM_ADCS_RD__RD_i_x_rn_ro = __EXTRACT_CISC(&mask0, code_inst->mask);
	ARM_ADCS_RD__RD_i_x_rd_ro = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static arm_inst_t *arm_instr_MRCS_D__D__S__CRD__CRD__D_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MRCS_D__D__S__CRD__CRD__D;

	/* put other parameters */
	/* complex decoding */
	ARM_MRCS_D__D__S__CRD__CRD__D_x_opc2 = __EXTRACT_32(0x000000E0, 5, code_inst->u32);
	ARM_MRCS_D__D__S__CRD__CRD__D_x_CRm = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_MRCS_D__D__S__CRD__CRD__D_x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MRCS_D__D__S__CRD__CRD__D_x_Rt_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_MRCS_D__D__S__CRD__CRD__D_x_CRn = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_MRCS_D__D__S__CRD__CRD__D_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MRCS_D__D__S__CRD__CRD__D_x_opc1 = __EXTRACT_32(0x00E00000, 21, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDCSSS_D__D___LT_RD_RT___D_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDCSSS_D__D___LT_RD_RT___D;

	/* put other parameters */
	/* complex decoding */
	ARM_LDCSSS_D__D___LT_RD_RT___D_x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT___D_x_addr_r_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT___D_x_addr_i = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT___D_x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT___D_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT___D_x_D = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDCSSS_D__D___LT_RD_RT____ISD_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDCSSS_D__D___LT_RD_RT____ISD;

	/* put other parameters */
	/* complex decoding */
	ARM_LDCSSS_D__D___LT_RD_RT____ISD_x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT____ISD_x_addr_r_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT____ISD_x_addr_i = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT____ISD_x_addr_u = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT____ISD_x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT____ISD_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD_RT____ISD_x_D = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDCSSS_D__D___LT_RD___ISD_RT__21_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDCSSS_D__D___LT_RD___ISD_RT__21;

	/* put other parameters */
	/* complex decoding */
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__21_x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__21_x_addr_r_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__21_x_addr_i = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__21_x_addr_u = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__21_x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__21_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__21_x_D = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDCSSS_D__D___LT_RD___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDCSSS_D__D___LT_RD___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__x_addr_r_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__x_addr_i = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__x_addr_u = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDCSSS_D__D___LT_RD___ISD_RT__x_D = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STCSSS_D__D___LT_RD_RT___D_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STCSSS_D__D___LT_RD_RT___D;

	/* put other parameters */
	/* complex decoding */
	ARM_STCSSS_D__D___LT_RD_RT___D_x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT___D_x_addr_r_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT___D_x_addr_i = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT___D_x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT___D_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT___D_x_D = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STCSSS_D__D___LT_RD_RT____ISD_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STCSSS_D__D___LT_RD_RT____ISD;

	/* put other parameters */
	/* complex decoding */
	ARM_STCSSS_D__D___LT_RD_RT____ISD_x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT____ISD_x_addr_r_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT____ISD_x_addr_i = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT____ISD_x_addr_u = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT____ISD_x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT____ISD_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD_RT____ISD_x_D = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STCSSS_D__D___LT_RD___ISD_RT__21_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STCSSS_D__D___LT_RD___ISD_RT__21;

	/* put other parameters */
	/* complex decoding */
	ARM_STCSSS_D__D___LT_RD___ISD_RT__21_x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__21_x_addr_r_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__21_x_addr_i = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__21_x_addr_u = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__21_x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__21_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__21_x_D = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STCSSS_D__D___LT_RD___ISD_RT__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STCSSS_D__D___LT_RD___ISD_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STCSSS_D__D___LT_RD___ISD_RT__x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__x_addr_r_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__x_addr_i = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__x_addr_u = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STCSSS_D__D___LT_RD___ISD_RT__x_D = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VSTRS_SD___LT_S___ISD_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSTRS_SD___LT_S___ISD_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_U = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_imm8 = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VSTRS_DD___LT_S___ISD_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSTRS_DD___LT_S___ISD_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_U = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_imm8 = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VSTMSSS_SS___LB_S_RB__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSTMSSS_SS___LB_S_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_VSTMSSS_SS___LB_S_RB__x_x_cond_cond = (0 | __EXTRACT_32(0xF0000000, 28, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__x_x_D = (0 | __EXTRACT_32(0x400000, 22, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__x_x_Rn_r = (0 | __EXTRACT_32(0xF0000, 16, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__x_x_imm8 = (0 | __EXTRACT_32(0xFF, 0, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__x_x_Vd__r = (0 | (__EXTRACT_32(0xF000, 12, code_inst->u32) & 0xfLLU))
;
	ARM_VSTMSSS_SS___LB_S_RB__x_x_Vd__p = (0 | ((__EXTRACT_32(0xF000, 12, code_inst->u32) & 0x10LLU) >> 4))
;

	return inst;

}

static arm_inst_t *arm_instr_VSTMSSS_SS___LB_S_RB__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSTMSSS_SS___LB_S_RB__0;

	/* put other parameters */
	/* complex decoding */
	ARM_VSTMSSS_SS___LB_S_RB__0_x_x_cond_cond = (0 | __EXTRACT_32(0xF0000000, 28, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__0_x_x_D = (0 | __EXTRACT_32(0x400000, 22, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__0_x_x_W = (0 | __EXTRACT_32(0x200000, 21, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Rn_r = (0 | __EXTRACT_32(0xF0000, 16, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__0_x_x_imm8 = (0 | __EXTRACT_32(0xFF, 0, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Vd__r = (0 | (__EXTRACT_32(0xF000, 12, code_inst->u32) & 0xfLLU))
;
	ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Vd__p = (0 | ((__EXTRACT_32(0xF000, 12, code_inst->u32) & 0x10LLU) >> 4))
;

	return inst;

}

static arm_inst_t *arm_instr_VSTMSSS_SS___LB_S_RB__1_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSTMSSS_SS___LB_S_RB__1;

	/* put other parameters */
	/* complex decoding */
	ARM_VSTMSSS_SS___LB_S_RB__1_x_x_cond_cond = (0 | __EXTRACT_32(0xF0000000, 28, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__1_x_x_D = (0 | __EXTRACT_32(0x400000, 22, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Rn_r = (0 | __EXTRACT_32(0xF0000, 16, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__1_x_x_imm8 = (0 | __EXTRACT_32(0xFF, 0, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Vd__r = (0 | (__EXTRACT_32(0xF000, 12, code_inst->u32) & 0xfLLU))
;
	ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Vd__p = (0 | ((__EXTRACT_32(0xF000, 12, code_inst->u32) & 0x10LLU) >> 4))
;

	return inst;

}

static arm_inst_t *arm_instr_VSTMSSS_SS___LB_S_RB__2_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSTMSSS_SS___LB_S_RB__2;

	/* put other parameters */
	/* complex decoding */
	ARM_VSTMSSS_SS___LB_S_RB__2_x_x_cond_cond = (0 | __EXTRACT_32(0xF0000000, 28, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__2_x_x_D = (0 | __EXTRACT_32(0x400000, 22, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__2_x_x_W = (0 | __EXTRACT_32(0x200000, 21, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Rn_r = (0 | __EXTRACT_32(0xF0000, 16, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__2_x_x_imm8 = (0 | __EXTRACT_32(0xFF, 0, code_inst->u32))
;
	ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Vd__r = (0 | (__EXTRACT_32(0xF000, 12, code_inst->u32) & 0xfLLU))
;
	ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Vd__p = (0 | ((__EXTRACT_32(0xF000, 12, code_inst->u32) & 0x10LLU) >> 4))
;

	return inst;

}

static arm_inst_t *arm_instr_VMULS_F64_DD__DD__DD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMULS_F64_DD__DD__DD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VMULS_F64_DD__DD__DD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VMULS_F64_DD__DD__DD_0_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VMULS_F64_DD__DD__DD_0_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VMULS_F64_DD__DD__DD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMULS_F64_DD__DD__DD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VMULS_F64_DD__DD__DD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VMULS_F64_DD__DD__DD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMULS_F32_SD__SD__SD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMULS_F32_SD__SD__SD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VMULS_F32_SD__SD__SD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VMULS_F32_SD__SD__SD_0_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VMULS_F32_SD__SD__SD_0_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VMULS_F32_SD__SD__SD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VMULS_F32_SD__SD__SD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMULS_F32_SD__SD__SD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VMULS_F32_SD__SD__SD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMUL_F32_QD__QD__QD_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMUL_F32_QD__QD__QD;

	/* put other parameters */
	/* complex decoding */
	ARM_VMUL_F32_QD__QD__QD_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VMUL_F32_QD__QD__QD_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VMUL_F32_QD__QD__QD_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMUL_F32_QD__QD__QD_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VMUL_F32_QD__QD__QD_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VMUL_F32_QD__QD__QD_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMUL_F32_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMUL_F32_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VMUL_F32_DD__DD__DD_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VMUL_F32_DD__DD__DD_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VMUL_F32_DD__DD__DD_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMUL_F32_DD__DD__DD_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VMUL_F32_DD__DD__DD_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VMUL_F32_DD__DD__DD_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_DD__S__S_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_DD__S__S_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_DD__S__S_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VMOVS_DD__S__S_0_x_op_ = __EXTRACT_32(0x00100000, 20, code_inst->u32);
	ARM_VMOVS_DD__S__S_0_x_Rt2_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VMOVS_DD__S__S_0_x_Rm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMOVS_DD__S__S_0_x_Rm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VMOVS_DD__S__S_0_x_Rt_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_SD__S_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_SD__S_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_SD__S_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VMOVS_SD__S_0_x_op_ = __EXTRACT_32(0x00100000, 20, code_inst->u32);
	ARM_VMOVS_SD__S_0_x_Rt_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VMOVS_SD__S_0_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VMOVS_SD__S_0_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_F64_DD__DD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_F64_DD__DD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_F64_DD__DD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VMOVS_F64_DD__DD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMOVS_F64_DD__DD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VMOVS_F64_DD__DD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VMOVS_F64_DD__DD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_F32_SD__SD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_F32_SD__SD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_F32_SD__SD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VMOVS_F32_SD__SD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VMOVS_F32_SD__SD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMOVS_F32_SD__SD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VMOVS_F32_SD__SD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_F64_DD___ID_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_F64_DD___ID_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_F64_DD___ID_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VMOVS_F64_DD___ID_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VMOVS_F64_DD___ID_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VMOVS_F64_DD___ID_0_x_x_imm4L = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMOVS_F64_DD___ID_0_x_x_imm4H = __EXTRACT_32(0x000F0000, 16, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VMOVS_F32_SD___ID_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VMOVS_F32_SD___ID_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VMOVS_F32_SD___ID_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VMOVS_F32_SD___ID_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VMOVS_F32_SD___ID_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VMOVS_F32_SD___ID_0_x_x_imm4L = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VMOVS_F32_SD___ID_0_x_x_imm4H = __EXTRACT_32(0x000F0000, 16, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VSS_F64_DD__DD__DD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSS_F64_DD__DD__DD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VSS_F64_DD__DD__DD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VSS_F64_DD__DD__DD_0_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VSS_F64_DD__DD__DD_0_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VSS_F64_DD__DD__DD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VSS_F64_DD__DD__DD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VSS_F64_DD__DD__DD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VSS_F64_DD__DD__DD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VSS_F64_DD__DD__DD_0_x_x_op_ = __EXTRACT_32(0x00000040, 6, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VSS_F32_SD__SD__SD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VSS_F32_SD__SD__SD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VSS_F32_SD__SD__SD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VSS_F32_SD__SD__SD_0_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VSS_F32_SD__SD__SD_0_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VSS_F32_SD__SD__SD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VSS_F32_SD__SD__SD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VSS_F32_SD__SD__SD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VSS_F32_SD__SD__SD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VSS_F32_SD__SD__SD_0_x_x_op_ = __EXTRACT_32(0x00000040, 6, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VS_F32_QD__QD__QD_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VS_F32_QD__QD__QD;

	/* put other parameters */
	/* complex decoding */
	ARM_VS_F32_QD__QD__QD_x_x_op_ = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_VS_F32_QD__QD__QD_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VS_F32_QD__QD__QD_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VS_F32_QD__QD__QD_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VS_F32_QD__QD__QD_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VS_F32_QD__QD__QD_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VS_F32_QD__QD__QD_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VS_F32_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VS_F32_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VS_F32_DD__DD__DD_x_x_op_ = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_VS_F32_DD__DD__DD_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VS_F32_DD__DD__DD_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VS_F32_DD__DD__DD_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VS_F32_DD__DD__DD_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VS_F32_DD__DD__DD_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VS_F32_DD__DD__DD_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VLDRS_DD___LT_S___ISD_RT__1_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VLDRS_DD___LT_S___ISD_RT__1;

	/* put other parameters */
	/* complex decoding */
	ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_U = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_imm8 = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VLDRS_DD___LT_S___ISD_RT__2_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VLDRS_DD___LT_S___ISD_RT__2;

	/* put other parameters */
	/* complex decoding */
	ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_U = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_imm8 = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VLDMDBS_S_21___LB_S_RB__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VLDMDBS_S_21___LB_S_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_VLDMDBS_S_21___LB_S_RB__x_x_cond_cond = (0 | __EXTRACT_32(0xF0000000, 28, code_inst->u32))
;
	ARM_VLDMDBS_S_21___LB_S_RB__x_x_D = (0 | __EXTRACT_32(0x400000, 22, code_inst->u32))
;
	ARM_VLDMDBS_S_21___LB_S_RB__x_x_Rn_r = (0 | __EXTRACT_32(0xF0000, 16, code_inst->u32))
;
	ARM_VLDMDBS_S_21___LB_S_RB__x_x_imm8 = (0 | __EXTRACT_32(0xFF, 0, code_inst->u32))
;
	ARM_VLDMDBS_S_21___LB_S_RB__x_x_Vd__r = (0 | (__EXTRACT_32(0xF000, 12, code_inst->u32) & 0xfLLU))
;
	ARM_VLDMDBS_S_21___LB_S_RB__x_x_Vd__p = (0 | ((__EXTRACT_32(0xF000, 12, code_inst->u32) & 0x10LLU) >> 4))
;

	return inst;

}

static arm_inst_t *arm_instr_VLDMIAS_SS___LB_S_RB__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VLDMIAS_SS___LB_S_RB_;

	/* put other parameters */
	/* complex decoding */
	ARM_VLDMIAS_SS___LB_S_RB__x_x_cond_cond = (0 | __EXTRACT_32(0xF0000000, 28, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__x_x_W = (0 | __EXTRACT_32(0x200000, 21, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__x_x_D = (0 | __EXTRACT_32(0x400000, 22, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__x_x_Rn_r = (0 | __EXTRACT_32(0xF0000, 16, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__x_x_imm8 = (0 | __EXTRACT_32(0xFF, 0, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__x_x_Vd__r = (0 | (__EXTRACT_32(0xF000, 12, code_inst->u32) & 0xfLLU))
;
	ARM_VLDMIAS_SS___LB_S_RB__x_x_Vd__p = (0 | ((__EXTRACT_32(0xF000, 12, code_inst->u32) & 0x10LLU) >> 4))
;

	return inst;

}

static arm_inst_t *arm_instr_VLDMDBS_S_21___LB_S_RB__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VLDMDBS_S_21___LB_S_RB__0;

	/* put other parameters */
	/* complex decoding */
	ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_cond_cond = (0 | __EXTRACT_32(0xF0000000, 28, code_inst->u32))
;
	ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_D = (0 | __EXTRACT_32(0x400000, 22, code_inst->u32))
;
	ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Rn_r = (0 | __EXTRACT_32(0xF0000, 16, code_inst->u32))
;
	ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_imm8 = (0 | __EXTRACT_32(0xFF, 0, code_inst->u32))
;
	ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Vd__r = (0 | (__EXTRACT_32(0xF000, 12, code_inst->u32) & 0xfLLU))
;
	ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Vd__p = (0 | ((__EXTRACT_32(0xF000, 12, code_inst->u32) & 0x10LLU) >> 4))
;

	return inst;

}

static arm_inst_t *arm_instr_VLDMIAS_SS___LB_S_RB__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VLDMIAS_SS___LB_S_RB__0;

	/* put other parameters */
	/* complex decoding */
	ARM_VLDMIAS_SS___LB_S_RB__0_x_x_cond_cond = (0 | __EXTRACT_32(0xF0000000, 28, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__0_x_x_W = (0 | __EXTRACT_32(0x200000, 21, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__0_x_x_D = (0 | __EXTRACT_32(0x400000, 22, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Rn_r = (0 | __EXTRACT_32(0xF0000, 16, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__0_x_x_imm8 = (0 | __EXTRACT_32(0xFF, 0, code_inst->u32))
;
	ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Vd__r = (0 | (__EXTRACT_32(0xF000, 12, code_inst->u32) & 0xfLLU))
;
	ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Vd__p = (0 | ((__EXTRACT_32(0xF000, 12, code_inst->u32) & 0x10LLU) >> 4))
;

	return inst;

}

static arm_inst_t *arm_instr_VDIVS_F64_DD__DD__DD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VDIVS_F64_DD__DD__DD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VDIVS_F64_DD__DD__DD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VDIVS_F64_DD__DD__DD_0_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VDIVS_F64_DD__DD__DD_0_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VDIVS_F64_DD__DD__DD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VDIVS_F64_DD__DD__DD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VDIVS_F64_DD__DD__DD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VDIVS_F64_DD__DD__DD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VDIVS_F32_SD__SD__SD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VDIVS_F32_SD__SD__SD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VDIVS_F32_SD__SD__SD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VDIVS_F32_SD__SD__SD_0_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VDIVS_F32_SD__SD__SD_0_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VDIVS_F32_SD__SD__SD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VDIVS_F32_SD__SD__SD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VDIVS_F32_SD__SD__SD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VDIVS_F32_SD__SD__SD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VCVT_FD_FD_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VCVT_FD_FD_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_VCVT_FD_FD_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VCVT_FD_FD_S__S_x_D_ = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VCVT_FD_FD_S__S_x_Vd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VCVT_FD_FD_S__S_x_sz = __EXTRACT_32(0x00000100, 8, code_inst->u32);
	ARM_VCVT_FD_FD_S__S_x_Vm = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VCVT_FD_FD_S__S_x_M = __EXTRACT_32(0x00000020, 5, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VCVTSS_S_S_S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VCVTSS_S_S_S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_VCVTSS_S_S_S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VCVTSS_S_S_S_S_x_D_ = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VCVTSS_S_S_S_S_x_opc2 = __EXTRACT_32(0x00070000, 16, code_inst->u32);
	ARM_VCVTSS_S_S_S_S_x_Vd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VCVTSS_S_S_S_S_x_sz = __EXTRACT_32(0x00000100, 8, code_inst->u32);
	ARM_VCVTSS_S_S_S_S_x_op_ = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VCVTSS_S_S_S_S_x_Vm = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VCVTSS_S_S_S_S_x_M = __EXTRACT_32(0x00000020, 5, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VADDS_F64_DD__DD__DD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VADDS_F64_DD__DD__DD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VADDS_F64_DD__DD__DD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VADDS_F64_DD__DD__DD_0_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VADDS_F64_DD__DD__DD_0_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VADDS_F64_DD__DD__DD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VADDS_F64_DD__DD__DD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VADDS_F64_DD__DD__DD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VADDS_F64_DD__DD__DD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VADDS_F32_SD__SD__SD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VADDS_F32_SD__SD__SD_0;

	/* put other parameters */
	/* complex decoding */
	ARM_VADDS_F32_SD__SD__SD_0_x_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_VADDS_F32_SD__SD__SD_0_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VADDS_F32_SD__SD__SD_0_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VADDS_F32_SD__SD__SD_0_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VADDS_F32_SD__SD__SD_0_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VADDS_F32_SD__SD__SD_0_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_VADDS_F32_SD__SD__SD_0_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VADD_F32_QD__QD__QD_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VADD_F32_QD__QD__QD;

	/* put other parameters */
	/* complex decoding */
	ARM_VADD_F32_QD__QD__QD_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VADD_F32_QD__QD__QD_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VADD_F32_QD__QD__QD_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VADD_F32_QD__QD__QD_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VADD_F32_QD__QD__QD_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VADD_F32_QD__QD__QD_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_VADD_F32_DD__DD__DD_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_VADD_F32_DD__DD__DD;

	/* put other parameters */
	/* complex decoding */
	ARM_VADD_F32_DD__DD__DD_x_x_Vn__r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_VADD_F32_DD__DD__DD_x_x_Vn__p = __EXTRACT_32(0x00000080, 7, code_inst->u32);
	ARM_VADD_F32_DD__DD__DD_x_x_Vm__r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_VADD_F32_DD__DD__DD_x_x_Vm__p = __EXTRACT_32(0x00000020, 5, code_inst->u32);
	ARM_VADD_F32_DD__DD__DD_x_x_Vd__r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_VADD_F32_DD__DD__DD_x_x_Vd__p = __EXTRACT_32(0x00400000, 22, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_DMB_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_DMB_S;

	/* put other parameters */
	/* complex decoding */
	ARM_DMB_S_x_option = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MRSS_S__CPSR_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MRSS_S__CPSR;

	/* put other parameters */
	/* complex decoding */
	ARM_MRSS_S__CPSR_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MRSS_S__CPSR_x_rn_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MRSS_S__SPSR_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MRSS_S__SPSR;

	/* put other parameters */
	/* complex decoding */
	ARM_MRSS_S__SPSR_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MRSS_S__SPSR_x_rn_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR___S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR___S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR___S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR___S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FSXC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FSXC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FSXC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FSXC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_SXC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_SXC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_SXC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_SXC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FXC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FXC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FXC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FXC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FSX__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FSX__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FSX__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FSX__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_XC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_XC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_XC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_XC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_SC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_SC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_SC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_SC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_SX__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_SX__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_SX__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_SX__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_F__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_F__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_F__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_F__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FX__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FX__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FX__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FX__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FS__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FS__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FS__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FS__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_C__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_C__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_C__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_C__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_X__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_X__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_X__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_X__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_S__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_F__S_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_F__S_0;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_F__S_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_F__S_0_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR___S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR___S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR___S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR___S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FSXC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FSXC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FSXC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FSXC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_SXC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_SXC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_SXC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_SXC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FXC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FXC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FXC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FXC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FSX__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FSX__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FSX__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FSX__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_XC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_XC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_XC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_XC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_SC__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_SC__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_SC__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_SC__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_SX__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_SX__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_SX__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_SX__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_F__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_F__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_F__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_F__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FX__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FX__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FX__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FX__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FS__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FS__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FS__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FS__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_C__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_C__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_C__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_C__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_X__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_X__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_X__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_X__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_S__S_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_F__S_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_F__S_0;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_F__S_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_F__S_0_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR____ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR____ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR____ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR____ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR____ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FSXC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FSXC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FSXC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_FSXC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FSXC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_SXC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_SXC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_SXC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_SXC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_SXC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FXC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FXC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FXC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_FXC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FXC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FSX___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FSX___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FSX___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_FSX___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FSX___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_XC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_XC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_XC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_XC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_XC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_SC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_SC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_SC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_SC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_SC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_SX___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_SX___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_SX___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_SX___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_SX___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_F___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_F___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_F___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_F___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_F___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FX___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FX___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FX___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_FX___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FX___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_FS___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_FS___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_FS___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_FS___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_FS___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_C___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_C___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_C___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_C___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_C___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_X___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_X___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_X___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_X___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_X___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_CPSR_F___ID_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_CPSR_F___ID_0;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_CPSR_F___ID_0_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_CPSR_F___ID_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_CPSR_F___ID_0_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR____ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR____ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR____ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR____ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR____ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FSXC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FSXC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FSXC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_FSXC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FSXC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_SXC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_SXC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_SXC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_SXC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_SXC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FXC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FXC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FXC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_FXC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FXC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FSX___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FSX___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FSX___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_FSX___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FSX___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_XC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_XC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_XC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_XC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_XC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_SC___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_SC___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_SC___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_SC___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_SC___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_SX___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_SX___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_SX___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_SX___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_SX___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_F___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_F___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_F___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_F___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_F___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FX___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FX___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FX___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_FX___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FX___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_FS___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_FS___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_FS___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_FS___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_FS___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_C___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_C___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_C___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_C___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_C___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_X___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_X___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_X___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_X___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_X___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MSRS_SPSR_F___ID_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MSRS_SPSR_F___ID_0;

	/* put other parameters */
	/* complex decoding */
	ARM_MSRS_SPSR_F___ID_0_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MSRS_SPSR_F___ID_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MSRS_SPSR_F___ID_0_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_CDPSS_D__D__D__D__D__D_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CDPSS_D__D__D__D__D__D;

	/* put other parameters */
	/* complex decoding */
	ARM_CDPSS_D__D__D__D__D__D_x_opc2 = __EXTRACT_32(0x000000E0, 5, code_inst->u32);
	ARM_CDPSS_D__D__D__D__D__D_x_CRm = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_CDPSS_D__D__D__D__D__D_x_coproc = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_CDPSS_D__D__D__D__D__D_x_CRd = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_CDPSS_D__D__D__D__D__D_x_CRn = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_CDPSS_D__D__D__D__D__D_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_CDPSS_D__D__D__D__D__D_x_opc1 = __EXTRACT_32(0x00F00000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_BFIS_S___ID___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BFIS_S___ID___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_BFIS_S___ID___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_BFIS_S___ID___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_BFIS_S___ID___ID_x_rn_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_BFIS_S___ID___ID_x_lsb = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_BFIS_S___ID___ID_x_msb = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_CLZS_S__S_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CLZS_S__S_0;

	/* put other parameters */
	/* complex decoding */
	ARM_CLZS_S__S_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_CLZS_S__S_0_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_CLZS_S__S_0_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SWPS_S__S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SWPS_S__S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_SWPS_S__S___LT_S_RT__x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SWPS_S__S___LT_S_RT__x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SWPS_S__S___LT_S_RT__x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_SWPS_S__S___LT_S_RT__x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SWPSB_S__S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SWPSB_S__S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_SWPSB_S__S___LT_S_RT__x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SWPSB_S__S___LT_S_RT__x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SWPSB_S__S___LT_S_RT__x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_SWPSB_S__S___LT_S_RT__x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_UMLALSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UMLALSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UMLALSS_S__S__S__S_x_rs_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_UMLALSS_S__S__S__S_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_UMLALSS_S__S__S__S_x_rdlo_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_UMLALSS_S__S__S__S_x_rdhi_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_UMLALSS_S__S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_UMLALSS_S__S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SMLALSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMLALSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMLALSS_S__S__S__S_x_rs_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_SMLALSS_S__S__S__S_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_SMLALSS_S__S__S__S_x_rdlo_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_SMLALSS_S__S__S__S_x_rdhi_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SMLALSS_S__S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SMLALSS_S__S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_UMULLSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_UMULLSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_UMULLSS_S__S__S__S_x_rs_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_UMULLSS_S__S__S__S_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_UMULLSS_S__S__S__S_x_rdlo_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_UMULLSS_S__S__S__S_x_rdhi_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_UMULLSS_S__S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_UMULLSS_S__S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SMULLSS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SMULLSS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SMULLSS_S__S__S__S_x_rs_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_SMULLSS_S__S__S__S_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_SMULLSS_S__S__S__S_x_rdlo_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_SMULLSS_S__S__S__S_x_rdhi_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SMULLSS_S__S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SMULLSS_S__S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MULSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MULSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MULSS_S__S__S_x_rs_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MULSS_S__S__S_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_MULSS_S__S__S_x_rd_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_MULSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MULSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MLASS_S__S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MLASS_S__S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MLASS_S__S__S__S_x_rs_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MLASS_S__S__S__S_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_MLASS_S__S__S__S_x_rn_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_MLASS_S__S__S__S_x_rd_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_MLASS_S__S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MLASS_S__S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SWIS_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SWIS_D;

	/* put other parameters */
	/* complex decoding */
	ARM_SWIS_D_x_Immed_24_n = __EXTS_32(0x00FFFFFF, 0, code_inst->u32, 24);
	ARM_SWIS_D_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDMSS_SS___LB_S_RB_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDMSS_SS___LB_S_RB_S;

	/* put other parameters */
	/* complex decoding */
	ARM_LDMSS_SS___LB_S_RB_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	ARM_LDMSS_SS___LB_S_RB_S_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDMSS_SS___LB_S_RB_S_x_sets = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_LDMSS_SS___LB_S_RB_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDMSS_SS___LB_S_RB_S_x_adr_mode = __EXTRACT_32(0x01800000, 23, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STMSS_SS___LB_S_RB_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STMSS_SS___LB_S_RB_S;

	/* put other parameters */
	/* complex decoding */
	ARM_STMSS_SS___LB_S_RB_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STMSS_SS___LB_S_RB_S_x_reglist_r = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	ARM_STMSS_SS___LB_S_RB_S_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_STMSS_SS___LB_S_RB_S_x_sets = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_STMSS_SS___LB_S_RB_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STMSS_SS___LB_S_RB_S_x_adr_mode = __EXTRACT_32(0x01800000, 23, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STREXHS_S__S___LT_S_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STREXHS_S__S___LT_S_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_STREXHS_S__S___LT_S_RT__0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STREXHS_S__S___LT_S_RT__0_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STREXHS_S__S___LT_S_RT__0_x_rt_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_STREXHS_S__S___LT_S_RT__0_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STREXDS_S__S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STREXDS_S__S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_STREXDS_S__S___LT_S_RT__x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STREXDS_S__S___LT_S_RT__x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STREXDS_S__S___LT_S_RT__x_rt_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_STREXDS_S__S___LT_S_RT__x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STREXBS_S__S___LT_S_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STREXBS_S__S___LT_S_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_STREXBS_S__S___LT_S_RT__0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STREXBS_S__S___LT_S_RT__0_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STREXBS_S__S___LT_S_RT__0_x_rt_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_STREXBS_S__S___LT_S_RT__0_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STREXS_S__S___LT_S_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STREXS_S__S___LT_S_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_STREXS_S__S___LT_S_RT__0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STREXS_S__S___LT_S_RT__0_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STREXS_S__S___LT_S_RT__0_x_rt_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_STREXS_S__S___LT_S_RT__0_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDREXHS_S___LT_S_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDREXHS_S___LT_S_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_LDREXHS_S___LT_S_RT__0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDREXHS_S___LT_S_RT__0_x_rt_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDREXHS_S___LT_S_RT__0_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDREXDS_S___LT_S_RT__decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDREXDS_S___LT_S_RT_;

	/* put other parameters */
	/* complex decoding */
	ARM_LDREXDS_S___LT_S_RT__x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDREXDS_S___LT_S_RT__x_rt_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDREXDS_S___LT_S_RT__x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDREXBS_S___LT_S_RT__1_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDREXBS_S___LT_S_RT__1;

	/* put other parameters */
	/* complex decoding */
	ARM_LDREXBS_S___LT_S_RT__1_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDREXBS_S___LT_S_RT__1_x_rt_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDREXBS_S___LT_S_RT__1_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDREXS_S___LT_S_RT__0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDREXS_S___LT_S_RT__0;

	/* put other parameters */
	/* complex decoding */
	ARM_LDREXS_S___LT_S_RT__0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDREXS_S___LT_S_RT__0_x_rt_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDREXS_S___LT_S_RT__0_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STRDS_S___LT_SS__S_IUSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRDS_S___LT_SS__S_IUSS;

	/* put other parameters */
	/* complex decoding */
	ARM_STRDS_S___LT_SS__S_IUSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STRDS_S___LT_SS__S_IUSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_STRDS_S___LT_SS__S_IUSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_STRDS_S___LT_SS__S_IUSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_STRDS_S___LT_SS__S_IUSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STRDS_S___LT_SS__S_IUSS_x_rt_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_STRDS_S___LT_SS__S_IUSS_x_imml = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_STRDS_S___LT_SS__S_IUSS_x_immh = __EXTRACT_32(0x00000F00, 8, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDRSSH_S___LT_SS__SSSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSSH_S___LT_SS__SSSS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSSH_S___LT_SS__SSSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__SSSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__SSSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__SSSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__SSSS_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__SSSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDRSSH_S___LT_SS__S_IUSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSSH_S___LT_SS__S_IUSS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSSH_S___LT_SS__S_IUSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__S_IUSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__S_IUSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__S_IUSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__S_IUSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__S_IUSS_x_imml = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_LDRSSH_S___LT_SS__S_IUSS_x_immh = __EXTRACT_32(0x00000F00, 8, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDRSSB_S___LT_SS__SSSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSSB_S___LT_SS__SSSS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSSB_S___LT_SS__SSSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__SSSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__SSSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__SSSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__SSSS_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__SSSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDRSSB_S___LT_SS__S_IUSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSSB_S___LT_SS__S_IUSS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSSB_S___LT_SS__S_IUSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__S_IUSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__S_IUSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__S_IUSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__S_IUSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__S_IUSS_x_imml = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_LDRSSB_S___LT_SS__S_IUSS_x_immh = __EXTRACT_32(0x00000F00, 8, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDRSH_S___LT_SS__SSSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSH_S___LT_SS__SSSS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSH_S___LT_SS__SSSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDRSH_S___LT_SS__SSSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_LDRSH_S___LT_SS__SSSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDRSH_S___LT_SS__SSSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDRSH_S___LT_SS__SSSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDRSH_S___LT_SS__SSSS_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_LDRSH_S___LT_SS__SSSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDRSH_S___LT_SS__S_IUSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSH_S___LT_SS__S_IUSS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSH_S___LT_SS__S_IUSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDRSH_S___LT_SS__S_IUSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_LDRSH_S___LT_SS__S_IUSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDRSH_S___LT_SS__S_IUSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDRSH_S___LT_SS__S_IUSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDRSH_S___LT_SS__S_IUSS_x_imml = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_LDRSH_S___LT_SS__S_IUSS_x_immh = __EXTRACT_32(0x00000F00, 8, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STRHS_S___LT_SS__SSSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRHS_S___LT_SS__SSSS;

	/* put other parameters */
	/* complex decoding */
	ARM_STRHS_S___LT_SS__SSSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STRHS_S___LT_SS__SSSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_STRHS_S___LT_SS__SSSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_STRHS_S___LT_SS__SSSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_STRHS_S___LT_SS__SSSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STRHS_S___LT_SS__SSSS_x_rm_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_STRHS_S___LT_SS__SSSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STRHS_S___LT_SS__S_IUSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRHS_S___LT_SS__S_IUSS;

	/* put other parameters */
	/* complex decoding */
	ARM_STRHS_S___LT_SS__S_IUSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STRHS_S___LT_SS__S_IUSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_STRHS_S___LT_SS__S_IUSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_STRHS_S___LT_SS__S_IUSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STRHS_S___LT_SS__S_IUSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_STRHS_S___LT_SS__S_IUSS_x_imml = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_STRHS_S___LT_SS__S_IUSS_x_immh = __EXTRACT_32(0x00000F00, 8, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STRSSS_S___LT_SS__SS__S__IDSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRSSS_S___LT_SS__SS__S__IDSS;

	/* put other parameters */
	/* complex decoding */
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setb = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDRSSS_S___LT_SS__SS__S__IDSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSSS_S___LT_SS__SS__S__IDSS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setb = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_STRSSS_S___LT_SS__S_IDSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_STRSSS_S___LT_SS__S_IDSS;

	/* put other parameters */
	/* complex decoding */
	ARM_STRSSS_S___LT_SS__S_IDSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_STRSSS_S___LT_SS__S_IDSS_x_offset12_n = __EXTRACT_32(0x00000FFF, 0, code_inst->u32);
	ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_STRSSS_S___LT_SS__S_IDSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_STRSSS_S___LT_SS__S_IDSS_x_setb = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_STRSSS_S___LT_SS__S_IDSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_STRSSS_S___LT_SS__S_IDSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_STRSSS_S___LT_SS__S_IDSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_LDRSSS_S___LT_SS__S_IDSS_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_LDRSSS_S___LT_SS__S_IDSS;

	/* put other parameters */
	/* complex decoding */
	ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__S_IDSS_x_offset12_n = __EXTRACT_32(0x00000FFF, 0, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__S_IDSS_x_setw = __EXTRACT_32(0x00200000, 21, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__S_IDSS_x_setb = __EXTRACT_32(0x00400000, 22, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__S_IDSS_x_setu = __EXTRACT_32(0x00800000, 23, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__S_IDSS_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_LDRSSS_S___LT_SS__S_IDSS_x_setpre = __EXTRACT_32(0x01000000, 24, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_BSS__40_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BSS__40;

	/* put other parameters */
	/* complex decoding */
	ARM_BSS__40_x_setl = __EXTRACT_32(0x01000000, 24, code_inst->u32);
	ARM_BSS__40_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_BSS__40_x_signed_immed_24_n = __EXTS_32(0x00FFFFFF, 0, code_inst->u32, 24);

	return inst;

}

static arm_inst_t *arm_instr_BLXS_S_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BLXS_S_0;

	/* put other parameters */
	/* complex decoding */
	ARM_BLXS_S_0_x_rd_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_BLXS_S_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_BXS_S_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BXS_S_0;

	/* put other parameters */
	/* complex decoding */
	ARM_BXS_S_0_x_rd_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_BXS_S_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MOVS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVS_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MOVS_S___ID_x_imm4 = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_MOVS_S___ID_x_imm12 = __EXTRACT_32(0x00000FFF, 0, code_inst->u32);
	ARM_MOVS_S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MOVTS_S___ID_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVTS_S___ID_0;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVTS_S___ID_0_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MOVTS_S___ID_0_x_imm4 = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_MOVTS_S___ID_0_x_imm12 = __EXTRACT_32(0x00000FFF, 0, code_inst->u32);
	ARM_MOVTS_S___ID_0_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_TSTS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_TSTS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_TSTS_S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_TSTS_S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_TSTS_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_TSTS_S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_TSTS_S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_TSTS_S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_TSTS_S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_TSTS_S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_TSTS_S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_TSTS_S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_TSTS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_TSTS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_TSTS_S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_TSTS_S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_TSTS_S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_TSTS_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_TSTS_S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_TEQS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_TEQS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_TEQS_S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_TEQS_S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_TEQS_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_TEQS_S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_TEQS_S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_TEQS_S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_TEQS_S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_TEQS_S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_TEQS_S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_TEQS_S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_TEQS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_TEQS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_TEQS_S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_TEQS_S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_TEQS_S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_TEQS_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_TEQS_S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SUBSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SUBSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_SUBSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_SUBSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_SUBSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SUBSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SUBSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_SUBSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_SUBSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SUBSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SUBSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SUBSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SUBSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_SUBSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_SUBSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_SUBSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SUBSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SBCSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SBCSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_SBCSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SBCSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_SBCSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_SBCSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_SBCSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SBCSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SBCSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SBCSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_SBCSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_SBCSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_SBCSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SBCSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_SBCSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_SBCSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_SBCSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_SBCSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_SBCSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_SBCSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_SBCSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_SBCSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_RSCSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSCSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_RSCSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_RSCSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_RSCSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_RSCSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_RSCSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_RSCSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_RSCSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSCSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_RSCSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_RSCSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_RSCSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_RSCSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_RSCSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSCSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_RSCSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_RSCSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_RSCSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_RSCSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_RSCSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_RSBSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSBSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_RSBSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_RSBSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_RSBSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_RSBSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_RSBSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_RSBSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_RSBSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSBSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_RSBSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_RSBSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_RSBSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_RSBSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_RSBSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_RSBSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_RSBSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_RSBSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_RSBSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_RSBSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_RSBSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ORRSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ORRSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ORRSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ORRSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_ORRSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_ORRSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ORRSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ORRSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ORRSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ORRSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_ORRSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_ORRSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ORRSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ORRSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ORRSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ORRSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_ORRSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_ORRSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_ORRSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_ORRSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ORRSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ORRSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MVNSS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MVNSS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MVNSS_S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_MVNSS_S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MVNSS_S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_MVNSS_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MVNSS_S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MVNSS_S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MVNSS_S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_MVNSS_S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_MVNSS_S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MVNSS_S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MVNSS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MVNSS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MVNSS_S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_MVNSS_S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_MVNSS_S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_MVNSS_S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_MVNSS_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MVNSS_S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MOVSS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVSS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVSS_S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_MOVSS_S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MOVSS_S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_MOVSS_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MOVSS_S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MOVSS_S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVSS_S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVSS_S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_MOVSS_S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MOVSS_S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_MOVSS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_MOVSS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_MOVSS_S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_MOVSS_S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_MOVSS_S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_MOVSS_S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_MOVSS_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_MOVSS_S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_EORSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_EORSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_EORSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_EORSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_EORSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_EORSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_EORSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_EORSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_EORSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_EORSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_EORSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_EORSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_EORSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_EORSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_EORSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_EORSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_EORSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_EORSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_EORSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_EORSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_EORSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_EORSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_CMPS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMPS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_CMPS_S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_CMPS_S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_CMPS_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_CMPS_S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_CMPS_S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMPS_S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_CMPS_S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_CMPS_S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_CMPS_S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_CMPS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMPS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_CMPS_S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_CMPS_S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_CMPS_S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_CMPS_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_CMPS_S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_CMNS_S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMNS_S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_CMNS_S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_CMNS_S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_CMNS_S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_CMNS_S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_CMNS_S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMNS_S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_CMNS_S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_CMNS_S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_CMNS_S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_CMNS_S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_CMNS_S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_CMNS_S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_CMNS_S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_CMNS_S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_CMNS_S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_CMNS_S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_BICSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BICSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_BICSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_BICSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_BICSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_BICSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_BICSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_BICSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_BICSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BICSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_BICSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_BICSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_BICSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_BICSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_BICSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_BICSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_BICSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_BICSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_BICSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_BICSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_BICSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_BICSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ANDSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ANDSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ANDSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ANDSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_ANDSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_ANDSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ANDSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ANDSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ANDSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ANDSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_ANDSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_ANDSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ANDSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ANDSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ANDSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ANDSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_ANDSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_ANDSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_ANDSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_ANDSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ANDSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ANDSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ADDSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_ADDSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ADDSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ADDSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ADDSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_ADDSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_ADDSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ADDSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ADDSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ADCSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADCSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ADCSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ADCSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_ADCSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_ADCSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ADCSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ADCSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ADCSS_S__S__S__S_S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADCSS_S__S__S__S_S;

	/* put other parameters */
	/* complex decoding */
	ARM_ADCSS_S__S__S__S_S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_ADCSS_S__S__S__S_S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ADCSS_S__S__S__S_S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ADCSS_S__S__S__S_S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ADCSS_S__S__S_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADCSS_S__S__S;

	/* put other parameters */
	/* complex decoding */
	ARM_ADCSS_S__S__S_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt = __EXTRACT_32(0x00000F80, 7, code_inst->u32);
	ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind = __EXTRACT_32(0x00000060, 5, code_inst->u32);
	ARM_ADCSS_S__S__S_x_shifter_operand_r_r = __EXTRACT_32(0x0000000F, 0, code_inst->u32);
	ARM_ADCSS_S__S__S_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ADCSS_S__S__S_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ADCSS_S__S__S_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}

static arm_inst_t *arm_instr_ADDSS_S__S___ID_decode(code_t *code_inst) {

	/* complex decoding */
	
	arm_inst_t *inst = (arm_inst_t *)malloc(sizeof(arm_inst_t));
	inst->ident = ARM_ADDSS_S__S___ID;

	/* put other parameters */
	/* complex decoding */
	ARM_ADDSS_S__S___ID_x_rn_r = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	ARM_ADDSS_S__S___ID_x_shifter_operand_rotate = __EXTRACT_32(0x00000F00, 8, code_inst->u32);
	ARM_ADDSS_S__S___ID_x_shifter_operand_v = __EXTRACT_32(0x000000FF, 0, code_inst->u32);
	ARM_ADDSS_S__S___ID_x_rd_r = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	ARM_ADDSS_S__S___ID_x_cond_cond = __EXTRACT_32(0xF0000000, 28, code_inst->u32);
	ARM_ADDSS_S__S___ID_x_sets_set = __EXTRACT_32(0x00100000, 20, code_inst->u32);

	return inst;

}




typedef arm_inst_t *arm_decode_function_t(code_t *code_inst);

static arm_decode_function_t *arm_decode_table[] =
{
	arm_instr_UNKNOWN_decode,
	arm_instr_UXTAHS_S__S__SS_decode,
	arm_instr_UXTAB16S_S__S__SS_decode,
	arm_instr_UXTABS_S__S__SS_decode,
	arm_instr_USUB8S_S__S__S_decode,
	arm_instr_USUB16S_S__S__S_decode,
	arm_instr_USAXS_S__S__S_decode,
	arm_instr_USATS_S___ID__SS_decode,
	arm_instr_USADA8S_S__S__S__S_decode,
	arm_instr_UQSUB8S_S__S__S_decode,
	arm_instr_UQSUB16S_S__S__S_decode,
	arm_instr_UQSAXS_S__S__S_decode,
	arm_instr_UQASXS_S__S__S_decode,
	arm_instr_UQADD8S_S__S__S_decode,
	arm_instr_UQADD16S_S__S__S_decode,
	arm_instr_UMULLS_S__S__S__S_decode,
	arm_instr_UMLALS_S__S__S__S_decode,
	arm_instr_UMAALS_S__S__S__S_decode,
	arm_instr_UHSUB8S_S__S__S_decode,
	arm_instr_UHSUB16S_S__S__S_decode,
	arm_instr_UHSAXS_S__S__S_decode,
	arm_instr_UHASXS_S__S__S_decode,
	arm_instr_UHADD8S_S__S__S_decode,
	arm_instr_UHADD16S_S__S__S_decode,
	arm_instr_UDIVS_S__S__S_decode,
	arm_instr_UBFXS_S__S___ID___ID_decode,
	arm_instr_UASXS_S__S__S_decode,
	arm_instr_UADD8S_S__S__S_decode,
	arm_instr_UADD16S_S__S__S_decode,
	arm_instr_SXTAHS_S__S__SS_decode,
	arm_instr_SXTAB16S_S__S__SS_decode,
	arm_instr_SXTABS_S__S__SS_decode,
	arm_instr_SUBSS_W_S__S__SS_decode,
	arm_instr_SUBWS_S__S___ID__decode,
	arm_instr_SUBSS_W_S__S___IU_decode,
	arm_instr_SSUB8S_S__S__S_decode,
	arm_instr_SSUB16S_S__S__S_decode,
	arm_instr_SSAXS_S__S__S_decode,
	arm_instr_SSATS_S___ID__SS_decode,
	arm_instr_SMULLS_S__S__S__S_decode,
	arm_instr_SMMLSSS_S__S__S__S_decode,
	arm_instr_SMMLASS_S__S__S__S_decode,
	arm_instr_SMLSLDSS_S__S__S__S_decode,
	arm_instr_SMLSDSS_S__S__S__S_decode,
	arm_instr_SMLAWSS_S__S__S__S_decode,
	arm_instr_SMLALDSS_S__S__S__S_decode,
	arm_instr_SMLALSSS_S__S__S__S_decode,
	arm_instr_SMLALS_S__S__S__S_decode,
	arm_instr_SMLADSS_S__S__S__S_decode,
	arm_instr_SMLASSS_S__S__S__S_decode,
	arm_instr_SHSUB8S_S__S__S_decode,
	arm_instr_SHSUB16S_S__S__S_decode,
	arm_instr_SHSAXS_S__S__S_decode,
	arm_instr_SHASXS_S__S__S_decode,
	arm_instr_SHADD8S_S__S__S_decode,
	arm_instr_SHADD16S_S__S__S_decode,
	arm_instr_SELS_S__S__S_decode,
	arm_instr_SDIVS_S__S__S_decode,
	arm_instr_SBFXS_S__S___ID___ID_decode,
	arm_instr_SBCSS_W_S__S__SS_decode,
	arm_instr_SBCSS_W_S__S___IU_decode,
	arm_instr_SASXS_S__S__S_decode,
	arm_instr_SADD8S_S__S__S_decode,
	arm_instr_SADD16S_S__S__S_decode,
	arm_instr_RSBSS_S__S__SS_decode,
	arm_instr_RORSS_W_S__S__S_decode,
	arm_instr_REVSHS_W_S__S_decode,
	arm_instr_REV16S_W_S__S_decode,
	arm_instr_REVS_W_S__S_decode,
	arm_instr_RBITS_S__S_decode,
	arm_instr_QSUB8S_S__S__S_decode,
	arm_instr_QSUB16S_S__S__S_decode,
	arm_instr_QSUBS_S__S__S_decode,
	arm_instr_QSAXS_S__S__S_decode,
	arm_instr_QDSUBS_S__S__S_decode,
	arm_instr_QDADDS_S__S__S_decode,
	arm_instr_QASXS_S__S__S_decode,
	arm_instr_QADD8S_S__S__S_decode,
	arm_instr_QADD16S_S__S__S_decode,
	arm_instr_QADDS_S__S__S_decode,
	arm_instr_PKHBTS_S__S__SS_decode,
	arm_instr_ORNSS_S__S__SS_decode,
	arm_instr_ORNSS_S__S___IU_decode,
	arm_instr_MRRCSS_D__D__S__S__CRD_decode,
	arm_instr_MRCSS_D__D__S__CRD__CRD___LB_D_RB__decode,
	arm_instr_MLSS_S__S__S__S_decode,
	arm_instr_MLAS_S__S__S__S_decode,
	arm_instr_MCRRSS_D__D__S__S__CRD_decode,
	arm_instr_MCRSS_D__D__S__CRD__CRD___LB_D_RB__decode,
	arm_instr_LSRSS_W_S__S__S_decode,
	arm_instr_LDMDBS_SS___LB_S_RB__decode,
	arm_instr_EORSS_W_S__S__SS_decode,
	arm_instr_EORSS_W_S__S___IU_decode,
	arm_instr_CLZS_S__S_decode,
	arm_instr_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB__decode,
	arm_instr_BICSS_W_S__S__SS_decode,
	arm_instr_BICSS_W_S__S___IU_decode,
	arm_instr_BFIS_S__S___ID___ID_decode,
	arm_instr_BS_W_08X_decode,
	arm_instr_BS_W_08X_0_decode,
	arm_instr_MOVTS_S___ID_decode,
	arm_instr_ORRS_W_S__S__SS_decode,
	arm_instr_MOVWS_S___ID_decode,
	arm_instr_ORRSS_W_S__S___IU_decode,
	arm_instr_ASRSS_W_S__S__S_decode,
	arm_instr_ANDSS_W_S__S__SS_decode,
	arm_instr_ANDSS_W_S__S___IU_decode,
	arm_instr_ADDSS_W_S__S__SS_decode,
	arm_instr_ADDWS_S__S___ID__decode,
	arm_instr_ADDSS_W_S__S___IU_decode,
	arm_instr_ADCSS_W_S__S__SS_decode,
	arm_instr_ADCSS_W_S__S___IU_decode,
	arm_instr_PLIS__LT_S__S_RT__decode,
	arm_instr_PLIS__LT_PC_RT__decode,
	arm_instr_PLIS__LT_S_RT__decode,
	arm_instr_PLIS__LT_S_RT__0_decode,
	arm_instr_PLDSS__LT_S__S_RT__decode,
	arm_instr_PLDSS__LT_S_RT__decode,
	arm_instr_PLDSS__LT_S_RT__0_decode,
	arm_instr_RSBSS_W_S__S___ID_decode,
	arm_instr_LSLSS_W_S__S__S_decode,
	arm_instr_LDRDS_S__S___LT_SS_decode,
	arm_instr_STRDS_S__S___LT_SS_decode,
	arm_instr_STREXHS_S__S___LT_S_RT__decode,
	arm_instr_STREXBS_S__S__S___LT_S_RT__decode,
	arm_instr_STREXBS_S__S___LT_S_RT__decode,
	arm_instr_STREXS_S__S___LT_S_RT__decode,
	arm_instr_LDREXHS_S___LT_S_RT__decode,
	arm_instr_LDREXBS_S___LT_S_RT__decode,
	arm_instr_LDREXBS_S___LT_S_RT__0_decode,
	arm_instr_LDREXS_S___LT_S_RT__decode,
	arm_instr_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB__decode,
	arm_instr_LDRSHS_S___LT_S_RT____IS0XX_decode,
	arm_instr_LDRSHS_S___LT_S___I0XX_RT__decode,
	arm_instr_LDRSBS_S___LT_PC_RT__decode,
	arm_instr_LDRSBS_S___LT_S_RT____IS0XX_decode,
	arm_instr_LDRSBS_S___LT_S___I0XX_RT__decode,
	arm_instr_LDRBS_S___LT_S_RT____IS0XX_decode,
	arm_instr_LDRBS_W_S___LT_S___I0XX_RT__decode,
	arm_instr_STRBS_S___LT_SS_decode,
	arm_instr_STRBS_W_S___LT_S___I0XX_RT__decode,
	arm_instr_STRS_S___LT_S_RT____IS0XX_decode,
	arm_instr_STRS_W_S___LT_S___I0XX_RT__decode,
	arm_instr_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__decode,
	arm_instr_STRHS_S___LT_S_RT____IS0XX_decode,
	arm_instr_STRHS_W_S___LT_S_RT__decode,
	arm_instr_LDRHS_S___LT_S_RT____IS0XX_decode,
	arm_instr_LDRHS_W_S___LT_S_RT__decode,
	arm_instr_LDRSHS_W_S___LT_S__S_RT__decode,
	arm_instr_STRHS_W_S___LT_S__S_RT__decode,
	arm_instr_LDRHS_W_S___LT_S__S_RT__decode,
	arm_instr_LDRS_S___LT_S_RT____IS0XX_decode,
	arm_instr_LDRS_W_S___LT_S___I0XX_RT__decode,
	arm_instr_LDRSHTS_S___LT_S_RT__decode,
	arm_instr_LDRSBTS_S___LT_S_RT__decode,
	arm_instr_STRTS_S___LT_S_RT__decode,
	arm_instr_LDRTS_S___LT_S_RT__decode,
	arm_instr_STRHTS_S___LT_S_RT__decode,
	arm_instr_LDRHTS_S___LT_S_RT__decode,
	arm_instr_STRBTS_S___LT_S_RT__decode,
	arm_instr_LDRBTS_S___LT_S_RT__decode,
	arm_instr_LDRSBS_W_S___LT_S__S_RT__decode,
	arm_instr_STRBS_W_S___LT_S__S_RT__decode,
	arm_instr_LDRBS_W_S___LT_S__S_RT__decode,
	arm_instr_STRS_W_S___LT_S__S_RT__decode,
	arm_instr_LDRS_W_S___LT_S__S_RT__decode,
	arm_instr_LDC2SS_D__D___LT_RD_RT___D_decode,
	arm_instr_LDC2SS_D__D___LT_RD_RT____ISD_decode,
	arm_instr_LDC2SS_D__D___LT_RD___ISD_RT__21_decode,
	arm_instr_LDC2SS_D__D___LT_RD___ISD_RT__decode,
	arm_instr_LDCSS_D__D___LT_RD_RT___D_decode,
	arm_instr_LDCSS_D__D___LT_RD_RT____ISD_decode,
	arm_instr_LDCSS_D__D___LT_RD___ISD_RT__21_decode,
	arm_instr_LDCSS_D__D___LT_RD___ISD_RT__decode,
	arm_instr_STC2SS_D__D___LT_RD_RT___D_decode,
	arm_instr_STC2SS_D__D___LT_RD_RT____ISD_decode,
	arm_instr_STC2SS_D__D___LT_RD___ISD_RT__21_decode,
	arm_instr_STC2SS_D__D___LT_RD___ISD_RT__decode,
	arm_instr_STCSS_D__D___LT_RD_RT___D_decode,
	arm_instr_STCSS_D__D___LT_RD_RT____ISD_decode,
	arm_instr_STCSS_D__D___LT_RD___ISD_RT__21_decode,
	arm_instr_STCSS_D__D___LT_RD___ISD_RT__decode,
	arm_instr_BLXS_0X08X_decode,
	arm_instr_TBBS__LT_S__S_RT__decode,
	arm_instr_BLS_0XX_decode,
	arm_instr_VSS_F64_DD__DD__DD_decode,
	arm_instr_VSS_F32_SD__SD__SD_decode,
	arm_instr_VSS_F32_QD__QD__QD_decode,
	arm_instr_VSS_F32_DD__DD__DD_decode,
	arm_instr_VPOPS__LB_SD_RB__decode,
	arm_instr_VPOPS__LB_DD_RB__decode,
	arm_instr_VADDS_F64_DD__DD__DD_decode,
	arm_instr_VADDS_F32_SD__SD__SD_decode,
	arm_instr_VADDS_F32_QD__QD__QD_decode,
	arm_instr_VADDS_F32_DD__DD__DD_decode,
	arm_instr_VCVTS_F64_S_DD__SD_decode,
	arm_instr_VCVTSS_U32_F64_SD__DD_decode,
	arm_instr_VCVTS_F32_S_SD__SD_decode,
	arm_instr_VPUSHS__LB_SD_RB__decode,
	arm_instr_VPUSHS__LB_DD_RB__decode,
	arm_instr_VMULS_F64_DD__DD__DD_decode,
	arm_instr_VMULS_F32_SD__SD__SD_decode,
	arm_instr_VMULS_F32_QD__QD__QD_decode,
	arm_instr_VMULS_F32_DD__DD__DD_decode,
	arm_instr_VMRSS_S__FPSCR_decode,
	arm_instr_VSTRS_SD___LT_S___ISD_RT__decode,
	arm_instr_VSTRS_DD___LT_S___ISD_RT__decode,
	arm_instr_VLDRS_DD___LT_S___ISD_RT__decode,
	arm_instr_VLDRS_DD___LT_S___ISD_RT__0_decode,
	arm_instr_VDIVS_F64_DD__DD__DD_decode,
	arm_instr_VDIVS_F32_SD__SD__SD_decode,
	arm_instr_VSUBS_F64_DD__DD__DD_decode,
	arm_instr_VSUBS_F32_SD__SD__SD_decode,
	arm_instr_VMOVS_DD__S__S_decode,
	arm_instr_VMOVS_SD__S_decode,
	arm_instr_VMOVS_F64_DD__DD_decode,
	arm_instr_VMOVS_F32_SD__SD_decode,
	arm_instr_VMOVS_F64_DD___ID_decode,
	arm_instr_VMOVS_F32_SD___ID_decode,
	arm_instr_UXTHS_RD__RD_decode,
	arm_instr_UXTBS_RD__RD_decode,
	arm_instr_YIELDS_decode,
	arm_instr_MOVS_S__S_decode,
	arm_instr_MOVS_RD___ID_decode,
	arm_instr_TSTS_RD__RD_decode,
	arm_instr_SXTHS_RD__RD_decode,
	arm_instr_SXTBS_RD__RD_decode,
	arm_instr_SUBS_RD__RD__RD_decode,
	arm_instr_SUBS_SP___ID_decode,
	arm_instr_SUBS_RD___ID_decode,
	arm_instr_SUBS_RD__RD___ID_decode,
	arm_instr_STRHS_RD___LT_RD__RD__RT__decode,
	arm_instr_STRHS_RD___LT_RD___I0XX_RT__decode,
	arm_instr_STRBS_RD___LT_RD__RD_RT__decode,
	arm_instr_STRBS_RD___LT_RD___ID_RT__decode,
	arm_instr_STRS_RD___LT_SP___ID_RT__decode,
	arm_instr_STRS_RD___LT_RD__RD_RT__decode,
	arm_instr_STRS_RD___LT_RD___I0XX_RT__decode,
	arm_instr_STMIAS_RD_21___LB_S_RB__decode,
	arm_instr_SBCS_RD__RD_decode,
	arm_instr_RORS_RD__RD_decode,
	arm_instr_REVSHS_RD__RD_decode,
	arm_instr_REV16S_RD__RD_decode,
	arm_instr_REVS_RD__RD_decode,
	arm_instr_PUSHS__LB_SS_RB__decode,
	arm_instr_PUSHS__LB_SS_RB__0_decode,
	arm_instr_POPS__LB_SS_RB__decode,
	arm_instr_POPS__LB_SS_RB__0_decode,
	arm_instr_ORRS_RD__RD_decode,
	arm_instr_RSBS_RD__RD___I0_decode,
	arm_instr_MVNS_RD__RD_decode,
	arm_instr_MULS_RD__RD_decode,
	arm_instr_LSRS_RD__RD_decode,
	arm_instr_LSRS_RD__RD___ID_decode,
	arm_instr_LSLS_RD__RD_decode,
	arm_instr_LSLS_RD__RD___ID_decode,
	arm_instr_LDRSHS_RD___LT_RD__RD_RT__decode,
	arm_instr_LDRSBS_RD___LT_RD__RD_RT__decode,
	arm_instr_LDRHS_RD___LT_RD__RD_RT__decode,
	arm_instr_LDRHS_RD___LT_RD___I0XX_RT__decode,
	arm_instr_LDRBS_RD___LT_RD__RD_RT__decode,
	arm_instr_LDRBS_RD___LT_RD___ID_RT__decode,
	arm_instr_LDRS_RD___LT_SP___I0XX_RT__decode,
	arm_instr_LDRS_RD___LT_PC___I0XX_RT__decode,
	arm_instr_LDRS_RD___LT_RD__RD_RT__decode,
	arm_instr_LDRS_RD___LT_RD___I0XX_RT__decode,
	arm_instr_LDMIAS_RD___LB_S_RB__decode,
	arm_instr_EORS_RD__RD_decode,
	arm_instr_CMPS_RD__S_decode,
	arm_instr_CMPS_RD__RD_decode,
	arm_instr_CMPS_RD___ID_decode,
	arm_instr_CMNS_RD__RD_decode,
	arm_instr_CBZS_RD__D_decode,
	arm_instr_BXS_S_decode,
	arm_instr_BLXS_S_decode,
	arm_instr_BKPT__ID_decode,
	arm_instr_BICS_RD__RD_decode,
	arm_instr_BS_N__40_decode,
	arm_instr_S_N_08X_decode,
	arm_instr_ASRS_RD__RD_decode,
	arm_instr_ASRS_RD__RD___ID_decode,
	arm_instr_ANDS_RD__RD_decode,
	arm_instr_ADDS_S__S_decode,
	arm_instr_ADDS_RD__RD__RD_decode,
	arm_instr_ADDS_SP__SP___ID_decode,
	arm_instr_ADDS_RD__SP___ID_decode,
	arm_instr_ADDS_RD__PC___ID_decode,
	arm_instr_ADDS_RD___ID_decode,
	arm_instr_ADDS_RD__RD___ID_decode,
	arm_instr_ADCS_RD__RD_decode,
	arm_instr_MRCS_D__D__S__CRD__CRD__D_decode,
	arm_instr_LDCSSS_D__D___LT_RD_RT___D_decode,
	arm_instr_LDCSSS_D__D___LT_RD_RT____ISD_decode,
	arm_instr_LDCSSS_D__D___LT_RD___ISD_RT__21_decode,
	arm_instr_LDCSSS_D__D___LT_RD___ISD_RT__decode,
	arm_instr_STCSSS_D__D___LT_RD_RT___D_decode,
	arm_instr_STCSSS_D__D___LT_RD_RT____ISD_decode,
	arm_instr_STCSSS_D__D___LT_RD___ISD_RT__21_decode,
	arm_instr_STCSSS_D__D___LT_RD___ISD_RT__decode,
	arm_instr_VSTRS_SD___LT_S___ISD_RT__0_decode,
	arm_instr_VSTRS_DD___LT_S___ISD_RT__0_decode,
	arm_instr_VSTMSSS_SS___LB_S_RB__decode,
	arm_instr_VSTMSSS_SS___LB_S_RB__0_decode,
	arm_instr_VSTMSSS_SS___LB_S_RB__1_decode,
	arm_instr_VSTMSSS_SS___LB_S_RB__2_decode,
	arm_instr_VMULS_F64_DD__DD__DD_0_decode,
	arm_instr_VMULS_F32_SD__SD__SD_0_decode,
	arm_instr_VMUL_F32_QD__QD__QD_decode,
	arm_instr_VMUL_F32_DD__DD__DD_decode,
	arm_instr_VMOVS_DD__S__S_0_decode,
	arm_instr_VMOVS_SD__S_0_decode,
	arm_instr_VMOVS_F64_DD__DD_0_decode,
	arm_instr_VMOVS_F32_SD__SD_0_decode,
	arm_instr_VMOVS_F64_DD___ID_0_decode,
	arm_instr_VMOVS_F32_SD___ID_0_decode,
	arm_instr_VSS_F64_DD__DD__DD_0_decode,
	arm_instr_VSS_F32_SD__SD__SD_0_decode,
	arm_instr_VS_F32_QD__QD__QD_decode,
	arm_instr_VS_F32_DD__DD__DD_decode,
	arm_instr_VLDRS_DD___LT_S___ISD_RT__1_decode,
	arm_instr_VLDRS_DD___LT_S___ISD_RT__2_decode,
	arm_instr_VLDMDBS_S_21___LB_S_RB__decode,
	arm_instr_VLDMIAS_SS___LB_S_RB__decode,
	arm_instr_VLDMDBS_S_21___LB_S_RB__0_decode,
	arm_instr_VLDMIAS_SS___LB_S_RB__0_decode,
	arm_instr_VDIVS_F64_DD__DD__DD_0_decode,
	arm_instr_VDIVS_F32_SD__SD__SD_0_decode,
	arm_instr_VCVT_FD_FD_S__S_decode,
	arm_instr_VCVTSS_S_S_S_S_decode,
	arm_instr_VADDS_F64_DD__DD__DD_0_decode,
	arm_instr_VADDS_F32_SD__SD__SD_0_decode,
	arm_instr_VADD_F32_QD__QD__QD_decode,
	arm_instr_VADD_F32_DD__DD__DD_decode,
	arm_instr_DMB_S_decode,
	arm_instr_MRSS_S__CPSR_decode,
	arm_instr_MRSS_S__SPSR_decode,
	arm_instr_MSRS_CPSR___S_decode,
	arm_instr_MSRS_CPSR_FSXC__S_decode,
	arm_instr_MSRS_CPSR_SXC__S_decode,
	arm_instr_MSRS_CPSR_FXC__S_decode,
	arm_instr_MSRS_CPSR_FSX__S_decode,
	arm_instr_MSRS_CPSR_XC__S_decode,
	arm_instr_MSRS_CPSR_SC__S_decode,
	arm_instr_MSRS_CPSR_SX__S_decode,
	arm_instr_MSRS_CPSR_F__S_decode,
	arm_instr_MSRS_CPSR_FX__S_decode,
	arm_instr_MSRS_CPSR_FS__S_decode,
	arm_instr_MSRS_CPSR_C__S_decode,
	arm_instr_MSRS_CPSR_X__S_decode,
	arm_instr_MSRS_CPSR_S__S_decode,
	arm_instr_MSRS_CPSR_F__S_0_decode,
	arm_instr_MSRS_SPSR___S_decode,
	arm_instr_MSRS_SPSR_FSXC__S_decode,
	arm_instr_MSRS_SPSR_SXC__S_decode,
	arm_instr_MSRS_SPSR_FXC__S_decode,
	arm_instr_MSRS_SPSR_FSX__S_decode,
	arm_instr_MSRS_SPSR_XC__S_decode,
	arm_instr_MSRS_SPSR_SC__S_decode,
	arm_instr_MSRS_SPSR_SX__S_decode,
	arm_instr_MSRS_SPSR_F__S_decode,
	arm_instr_MSRS_SPSR_FX__S_decode,
	arm_instr_MSRS_SPSR_FS__S_decode,
	arm_instr_MSRS_SPSR_C__S_decode,
	arm_instr_MSRS_SPSR_X__S_decode,
	arm_instr_MSRS_SPSR_S__S_decode,
	arm_instr_MSRS_SPSR_F__S_0_decode,
	arm_instr_MSRS_CPSR____ID_decode,
	arm_instr_MSRS_CPSR_FSXC___ID_decode,
	arm_instr_MSRS_CPSR_SXC___ID_decode,
	arm_instr_MSRS_CPSR_FXC___ID_decode,
	arm_instr_MSRS_CPSR_FSX___ID_decode,
	arm_instr_MSRS_CPSR_XC___ID_decode,
	arm_instr_MSRS_CPSR_SC___ID_decode,
	arm_instr_MSRS_CPSR_SX___ID_decode,
	arm_instr_MSRS_CPSR_F___ID_decode,
	arm_instr_MSRS_CPSR_FX___ID_decode,
	arm_instr_MSRS_CPSR_FS___ID_decode,
	arm_instr_MSRS_CPSR_C___ID_decode,
	arm_instr_MSRS_CPSR_X___ID_decode,
	arm_instr_MSRS_CPSR_S___ID_decode,
	arm_instr_MSRS_CPSR_F___ID_0_decode,
	arm_instr_MSRS_SPSR____ID_decode,
	arm_instr_MSRS_SPSR_FSXC___ID_decode,
	arm_instr_MSRS_SPSR_SXC___ID_decode,
	arm_instr_MSRS_SPSR_FXC___ID_decode,
	arm_instr_MSRS_SPSR_FSX___ID_decode,
	arm_instr_MSRS_SPSR_XC___ID_decode,
	arm_instr_MSRS_SPSR_SC___ID_decode,
	arm_instr_MSRS_SPSR_SX___ID_decode,
	arm_instr_MSRS_SPSR_F___ID_decode,
	arm_instr_MSRS_SPSR_FX___ID_decode,
	arm_instr_MSRS_SPSR_FS___ID_decode,
	arm_instr_MSRS_SPSR_C___ID_decode,
	arm_instr_MSRS_SPSR_X___ID_decode,
	arm_instr_MSRS_SPSR_S___ID_decode,
	arm_instr_MSRS_SPSR_F___ID_0_decode,
	arm_instr_CDPSS_D__D__D__D__D__D_decode,
	arm_instr_BFIS_S___ID___ID_decode,
	arm_instr_CLZS_S__S_0_decode,
	arm_instr_SWPS_S__S___LT_S_RT__decode,
	arm_instr_SWPSB_S__S___LT_S_RT__decode,
	arm_instr_UMLALSS_S__S__S__S_decode,
	arm_instr_SMLALSS_S__S__S__S_decode,
	arm_instr_UMULLSS_S__S__S__S_decode,
	arm_instr_SMULLSS_S__S__S__S_decode,
	arm_instr_MULSS_S__S__S_decode,
	arm_instr_MLASS_S__S__S__S_decode,
	arm_instr_SWIS_D_decode,
	arm_instr_LDMSS_SS___LB_S_RB_S_decode,
	arm_instr_STMSS_SS___LB_S_RB_S_decode,
	arm_instr_STREXHS_S__S___LT_S_RT__0_decode,
	arm_instr_STREXDS_S__S___LT_S_RT__decode,
	arm_instr_STREXBS_S__S___LT_S_RT__0_decode,
	arm_instr_STREXS_S__S___LT_S_RT__0_decode,
	arm_instr_LDREXHS_S___LT_S_RT__0_decode,
	arm_instr_LDREXDS_S___LT_S_RT__decode,
	arm_instr_LDREXBS_S___LT_S_RT__1_decode,
	arm_instr_LDREXS_S___LT_S_RT__0_decode,
	arm_instr_STRDS_S___LT_SS__S_IUSS_decode,
	arm_instr_LDRSSH_S___LT_SS__SSSS_decode,
	arm_instr_LDRSSH_S___LT_SS__S_IUSS_decode,
	arm_instr_LDRSSB_S___LT_SS__SSSS_decode,
	arm_instr_LDRSSB_S___LT_SS__S_IUSS_decode,
	arm_instr_LDRSH_S___LT_SS__SSSS_decode,
	arm_instr_LDRSH_S___LT_SS__S_IUSS_decode,
	arm_instr_STRHS_S___LT_SS__SSSS_decode,
	arm_instr_STRHS_S___LT_SS__S_IUSS_decode,
	arm_instr_STRSSS_S___LT_SS__SS__S__IDSS_decode,
	arm_instr_LDRSSS_S___LT_SS__SS__S__IDSS_decode,
	arm_instr_STRSSS_S___LT_SS__S_IDSS_decode,
	arm_instr_LDRSSS_S___LT_SS__S_IDSS_decode,
	arm_instr_BSS__40_decode,
	arm_instr_BLXS_S_0_decode,
	arm_instr_BXS_S_0_decode,
	arm_instr_MOVS_S___ID_decode,
	arm_instr_MOVTS_S___ID_0_decode,
	arm_instr_TSTS_S___ID_decode,
	arm_instr_TSTS_S__S__S_S_decode,
	arm_instr_TSTS_S__S_decode,
	arm_instr_TEQS_S___ID_decode,
	arm_instr_TEQS_S__S__S_S_decode,
	arm_instr_TEQS_S__S_decode,
	arm_instr_SUBSS_S__S___ID_decode,
	arm_instr_SUBSS_S__S__S__S_S_decode,
	arm_instr_SUBSS_S__S__S_decode,
	arm_instr_SBCSS_S__S___ID_decode,
	arm_instr_SBCSS_S__S__S__S_S_decode,
	arm_instr_SBCSS_S__S__S_decode,
	arm_instr_RSCSS_S__S___ID_decode,
	arm_instr_RSCSS_S__S__S__S_S_decode,
	arm_instr_RSCSS_S__S__S_decode,
	arm_instr_RSBSS_S__S___ID_decode,
	arm_instr_RSBSS_S__S__S__S_S_decode,
	arm_instr_RSBSS_S__S__S_decode,
	arm_instr_ORRSS_S__S___ID_decode,
	arm_instr_ORRSS_S__S__S__S_S_decode,
	arm_instr_ORRSS_S__S__S_decode,
	arm_instr_MVNSS_S___ID_decode,
	arm_instr_MVNSS_S__S__S_S_decode,
	arm_instr_MVNSS_S__S_decode,
	arm_instr_MOVSS_S___ID_decode,
	arm_instr_MOVSS_S__S__S_S_decode,
	arm_instr_MOVSS_S__S_decode,
	arm_instr_EORSS_S__S___ID_decode,
	arm_instr_EORSS_S__S__S__S_S_decode,
	arm_instr_EORSS_S__S__S_decode,
	arm_instr_CMPS_S___ID_decode,
	arm_instr_CMPS_S__S__S_S_decode,
	arm_instr_CMPS_S__S_decode,
	arm_instr_CMNS_S___ID_decode,
	arm_instr_CMNS_S__S__S_S_decode,
	arm_instr_CMNS_S__S_decode,
	arm_instr_BICSS_S__S___ID_decode,
	arm_instr_BICSS_S__S__S__S_S_decode,
	arm_instr_BICSS_S__S__S_decode,
	arm_instr_ANDSS_S__S___ID_decode,
	arm_instr_ANDSS_S__S__S__S_S_decode,
	arm_instr_ANDSS_S__S__S_decode,
	arm_instr_ADDSS_S__S__S__S_S_decode,
	arm_instr_ADDSS_S__S__S_decode,
	arm_instr_ADCSS_S__S___ID_decode,
	arm_instr_ADCSS_S__S__S__S_S_decode,
	arm_instr_ADCSS_S__S__S_decode,
	arm_instr_ADDSS_S__S___ID_decode
};

/* free a dynamically allocated instruction, we try not to free an already freed or NULL pointer */
void arm_free_inst(arm_inst_t *inst) {
	assert(inst);
	// NB : inst->instrinput is allocate with the same malloc which allocate an instr

	    /* finally free it */
	free(inst);
	}

#if defined(__cplusplus)
}
#endif

#endif /* GLISS_ARM_INCLUDE_ARM_DECODE_TABLE_H */
