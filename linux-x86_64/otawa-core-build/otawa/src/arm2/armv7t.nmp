include "defs.nmp"
include "defs2.nmp"

let ARMV7T = 1

// condition extension
extend full_condition
	otawa_ever = value == 14
	otawa_never = value == 15
	otawa_cond =
		switch(value) {
		case 0:		"sem::EQ"
		case 1:		"sem::NE"
		case 2:		"sem::UGE"
		case 3:		"sem::ULT"
		case 8:		"sem::UGT"
		case 9:		"sem::ULE"
		case 10:	"sem::GE"
		case 11:	"sem::LT"
		case 12:	"sem::GT"
		case 13:	"sem::LE"
		default:	"sem::ANY_COND"
	}

extend RegisterListThumb
	has_pc = _P

macro Align(r, k) = (((r) + k - 1) & ~(k - 1))

// included here for ascending compatibility
extend B_Cond
	otawa_target = target

extend B_thumb_T2
	otawa_kind = IS_CONTROL
	otawa_target = target

extend B_T3_thumb2
	otawa_kind =
		if cond.value<3..1> == 0b111
		then 0
		else
			IS_CONTROL
			| (if cond.value == 14 then 0 else IS_COND endif)
		endif
	otawa_target = addr

extend B_T4_thumb2
	otawa_kind = IS_CONTROL
	otawa_target = addr

extend BL_imm_T1
	otawa_kind = IS_CONTROL | IS_CALL
	otawa_target = targetAddress

extend BLX_imm_T2
	otawa_kind = IS_CONTROL | IS_CALL
	otawa_target = targetAddress

extend BLX_ARM
	otawa_kind = IS_CONTROL | IS_CALL
		| (if cond.value == 14 then 0 else IS_COND endif)

extend CBNZ_CBZ_thumb
	otawa_target = target
	otawa_sem = {
		if nonzero ^ (R(rn) == 0) then
			_branch(__IADDR + 4 + imm32);
		endif;
	}


extend TBB_TBH
	otawa_kind = IS_CONTROL | IS_MEM | IS_LOAD
	otawa_target = 0

extend CBNZ_CBZ_thumb
	otawa_kind = IS_CONTROL | IS_COND

extend LDR_imm_T3, LDR_imm_T4
 	otawa_kind =
 		  IS_MEM
 		| IS_INT
 		| IS_LOAD
 		| (if Rt.number == 15 then IS_CONTROL else 0 endif)
 		| (if Rt.number == 15 && Rn.number == 13 then IS_RETURN else 0 endif)

extend LDM_T2
	otawa_kind = IS_MEM | IS_LOAD | IS_MULTI | IS_INT
		| (if register_list.has_pc then IS_CONTROL else 0 endif)
		| (if Rn.number == 13 && register_list.has_pc then IS_CONTROL | IS_RETURN else 0 endif)
	otawa_sem = {
		if Rn.use_pc || register_list<15..15> == 1 then seti(R(15), __IADDR + 8); endif;
		cnt = 0;
		ii = 0;
		otawa_sem_cnt;
		seti(t2, 4);
		// addr_mode = MULT_IA
		_set(t1, Rn.i);
		seti(t3, cnt * 4); _add(t3, t1, t3);
		ii = 0;
		otawa_sem_rec;
		if W == 1 then _set(Rn.i, t3); endif;
		if register_list<15..15> == 1 then _branch(R(15)); endif;
	}
	otawa_sem_cnt = {
		if ii <= 15 then
			if register_list<ii..ii> == 1 then cnt = cnt + 1; endif;
			ii = ii + 1;
			otawa_sem_cnt;
		endif;
	}
	otawa_sem_rec = {
		if ii <= 15 then
			if register_list<ii..ii> == 1 then
				load(R(ii), t1, UINT32);
				_add(t1, t1, t2);
			endif;
			ii = ii + 1;
			otawa_sem_rec;
		endif;
	}
	otawa_multi = register_list

extend STMDB_T1
	otawa_kind = IS_MEM | IS_STORE | IS_MULTI | IS_INT
	otawa_multi = register_list

extend RSB_imm_T2
	otawa_kind =
		  IS_ALU
		| IS_INT
		| (if Rd.number == 15 then IS_CONTROL else 0 endif)
		| IS_IMMEDIATE
	otawa_target =
		if Rn.number == 15 then __IADDR + 4 - imm32
		else 0 endif

extend LDC_thumb2
	otawa_kind = IS_MEM
		| IS_INT
		| IS_LOAD

extend STC_thumb2
	otawa_kind = IS_MEM
		| IS_INT
		| IS_STORE


// floating-point operations
extend
	VLDR_A1, VLDR_A2, VLDR_T1, VLDR_T2
		otawa_kind = IS_MEM | IS_LOAD | IS_FLOAT

extend
	VSTR_A1, VSTR_A2, VSTR_T1, VSTR_T2
		otawa_kind = IS_MEM | IS_STORE | IS_FLOAT

extend
	VSTM_A1_01, VSTM_A1_10, VSTM_A2_01, VSTM_A2_10
		otawa_kind = IS_MEM | IS_STORE | IS_FLOAT | IS_MULTI

extend
	VLDM_arm_A1_01, VLDM_arm_A1_10, VLDM_arm_A2_01, VLDM_arm_A2_10
		otawa_kind = IS_MEM | IS_LOAD | IS_FLOAT | IS_MULTI

extend
	VADD_fp_A1_double, VADD_fp_A1_quad, VADD_fp_A2_32, VADD_fp_A2_64,
	VADD_fp_T1_double, VADD_fp_T1_quad, VADD_fp_T2_32, VADD_fp_T2_64,
	VCVT_arm_if_A1, VCVT_arm_ff_A1,
	VCVT_VCVTR_thumb_fp_int_fp,
	VCVT_VCVTR_fp_int_fp_T1_D32_M32, 
	VCVT_VCVTR_fp_int_fp_T1_D32_M64,
	VCVT_VCVTR_fp_int_fp_T1_D64_M32,
	VDIV_A1_32, VDIV_A1_64,
	VDIV_T1_32, VDIV_T1_64,
	VMOV_imm_A2_32, VMOV_imm_A2_64,
	VMOV_reg_A2_32, VMOV_reg_A2_64,
	VMOV_imm_T2_32, VMOV_imm_T2_64,
	VMOV_reg_T2_32, VMOV_reg_T2_64,
	VMLA_VMLS_fp_A1_double, VMLA_VMLS_fp_A1_quad, VMLA_VMLS_fp_A2_32, VMLA_VMLS_fp_A2_64,
	VMLA_VMLS_fp_T1_double, VMLA_VMLS_fp_T1_quad, VMLA_VMLS_fp_T2_32, VMLA_VMLS_fp_T2_64,
	VMUL_fp_A1_double, VMUL_fp_A1_quad, VMUL_fp_A2_32, VMUL_fp_A2_64,
	VMUL_fp_T1_double, VMUL_fp_T1_quad, VMUL_fp_T2_32, VMUL_fp_T2_64,
	VSUB_fp_T2_32, VSUB_fp_T2_64
		otawa_kind = IS_ALU | IS_FLOAT

extend
	VMOV_creg_spreg_A1, VMOV_arm_2creg_dereg_A1,
	VMOV_creg_spreg_T1, VMOV_thumb_2creg_dereg_A1,
	VMRS_T1
		otawa_kind = IS_ALU | IS_FLOAT | IS_INT

extend VLDR_A1, VLDR_A2
	otawa_sem = {
		if !cond.otawa_never then
			if !cond.otawa_ever then
				if single_reg then
					scratch(S(d)); scratch(D(d / 2));
				else
					scratch(D(d)); scratch(S(d * 2)); scratch(S(d * 2 + 1));
				endif;								
			else
				if n == 15 then
					if add then
						seti(t1, Align(__IADDR, 4) + imm32);
					else
						seti(t1, Align(__IADDR, 4) - imm32);
					endif;
				else
					seti(t1, imm32);
					if add then
						_add(t1, t1, R(n));
					else
						sub(t1, t1, R(n));
					endif;
				endif;
				if single_reg then
					load(S(d), t1, FLOAT32); scratch(D(d / 2));
				else
					load(D(d), t1, FLOAT64); scratch(S(d * 2)); scratch(S(d * 2 + 1));
				endif;
			endif;
		endif;
	}

extend VLDR_T1, VLDR_T2
	otawa_sem = {
			if n == 15 then
				if add then
					seti(t1, Align(__IADDR, 4) + imm32);
				else
					seti(t1, Align(__IADDR, 4) - imm32);
				endif;
			else
				seti(t1, imm32);
				if add then
					_add(t1, t1, R(n));
				else
					sub(t1, t1, R(n));
				endif;
			endif;
			if single_reg then
				load(S(d), t1, FLOAT32); scratch(D(d / 2));
			else
				load(D(d), t1, FLOAT64); scratch(S(d * 2)); scratch(S(d * 2 + 1));
			endif;
	}

extend VSTR_A1, VSTR_A2
	otawa_sem = {
		if !cond.otawa_never then
			if !cond.otawa_ever then
				if single_reg then
					scratch(S(d)); scratch(D(d / 2));
				else
					scratch(D(d)); scratch(S(d * 2)); scratch(S(d * 2 + 1));
				endif;								
			else
				if n == 15 then
					if add then
						seti(t1, Align(__IADDR, 4) + imm32);
					else
						seti(t1, Align(__IADDR, 4) - imm32);
					endif;
				else
					seti(t1, imm32);
					if add then
						_add(t1, t1, R(n));
					else
						sub(t1, t1, R(n));
					endif;
				endif;
				if single_reg then
					store(S(d), t1, FLOAT32);
				else
					store(D(d), t1, FLOAT64);
				endif;
			endif;
		endif;
	}

extend VSTR_T1, VSTR_T2
	otawa_sem = {
			if n == 15 then
				if add then
					seti(t1, Align(__IADDR, 4) + imm32);
				else
					seti(t1, Align(__IADDR, 4) - imm32);
				endif;
			else
				seti(t1, imm32);
				if add then
					_add(t1, t1, R(n));
				else
					sub(t1, t1, R(n));
				endif;
			endif;
			if single_reg then
				store(S(d), t1, FLOAT32);
			else
				store(D(d), t1, FLOAT64);
			endif;
	}

extend VSTM_A1_01, VSTM_A1_10, VSTM_A2_01, VSTM_A2_10
	otawa_sem = {
		if !cond.otawa_never then
			if !cond.otawa_ever then
				_if(cond.otawa_cond, _CPSR, 1);
				cont;
			endif;
			seti(t1, imm32);
			if add then
				_add(t1, R(n), t1);
			else
				sub(t1, R(n), t1);
			endif;
			if wback then
				if add then
					_add(R(n), R(n), t1);
				else
					sub(R(n), R(n), t1);
				endif;
			endif;
			if single_regs then
				seti(t2, 4);
			else
				seti(t2, 8);
			endif;
			for r in 0..31 do
				if r < regs then
					if single_regs then
						store(S(d + r), t1, FLOAT32);
						_add(t1, t1, t2);
					else
						store(D(d + r), t1, FLOAT64);
						_add(t1, t1, t2);
					endif;
				endif;
			enddo;
		endif;		
	}

extend VLDM_arm_A1_01, VLDM_arm_A1_10, VLDM_arm_A2_01, VLDM_arm_A2_10
	otawa_sem = {
		if !cond.otawa_never then
			if !cond.otawa_ever then
				_if(cond.otawa_cond, _CPSR, 1);
				cont;
			endif;
			seti(t1, imm32);
			if add then
				_add(t1, R(n), t1);
			else
				sub(t1, R(n), t1);
			endif;
			if wback then
				if add then
					_add(R(n), R(n), t1);
				else
					sub(R(n), R(n), t1);
				endif;
			endif;
			if single_regs then
				seti(t2, 4);
			else
				seti(t2, 8);
			endif;
			for r in 0..31 do
				if r < regs then
					if single_regs then
						load(S(d + r), t1, FLOAT32);
						_add(t1, t1, t2);
					else
						load(D(d + r), t1, FLOAT64);
						_add(t1, t1, t2);
					endif;
				endif;
			enddo;
		endif;
	}

	