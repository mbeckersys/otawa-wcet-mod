/* Generated by gliss-attr (118/02/19 18:51:55) copyright (c) 2009 IRIT - UPS */

extern "C" {
#include <arm/api.h>
#include <arm/id.h>
#include <arm/macros.h>
#include <arm/grt.h>
}

typedef void (*sem_fun_t)(arm_inst_t *inst, otawa::sem::Block& block);

/*** functions ***/

static void otawa_sem_UNKNOWN(arm_inst_t *inst, otawa::sem::Block& block) {
}

static void otawa_sem_UXTAHS_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UXTAB16S_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UXTABS_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_USUB8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_USUB16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_USAXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_USATS_S___ID__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_USADA8S_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UQSUB8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UQSUB16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UQSAXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UQASXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UQADD8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UQADD16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UMULLS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UMLALS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UMAALS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UHSUB8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UHSUB16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UHSAXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UHASXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UHADD8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UHADD16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UDIVS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UBFXS_S__S___ID___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UASXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UADD8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UADD16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SXTAHS_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SXTAB16S_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SXTABS_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBSS_W_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBWS_S__S___ID_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBSS_W_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SSUB8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SSUB16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SSAXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SSATS_S___ID__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMULLS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMMLSSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMMLASS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLSLDSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLSDSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLAWSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLALDSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLALSSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLALS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLADSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLASSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SHSUB8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SHSUB16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SHSAXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SHASXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SHADD8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SHADD16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SELS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SDIVS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SBFXS_S__S___ID___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SBCSS_W_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SBCSS_W_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SASXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SADD8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SADD16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_RSBSS_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_RORSS_W_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_REVSHS_W_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_REV16S_W_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_REVS_W_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_RBITS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QSUB8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QSUB16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QSUBS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QSAXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QDSUBS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QDADDS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QASXS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QADD8S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QADD16S_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_QADDS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PKHBTS_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ORNSS_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ORNSS_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MRRCSS_D__D__S__S__CRD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MRCSS_D__D__S__CRD__CRD___LB_D_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MLSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MLAS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MCRRSS_D__D__S__S__CRD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MCRSS_D__D__S__CRD__CRD___LB_D_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LSRSS_W_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDMDBS_SS___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_EORSS_W_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_EORSS_W_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CLZS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BICSS_W_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BICSS_W_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BFIS_S__S___ID___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BS_W_08X(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BS_W_08X_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MOVTS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ORRS_W_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MOVWS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ORRSS_W_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ASRSS_W_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ANDSS_W_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ANDSS_W_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADDSS_W_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADDWS_S__S___ID_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADDSS_W_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADCSS_W_S__S__SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADCSS_W_S__S___IU(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PLIS__LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PLIS__LT_PC_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PLIS__LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PLIS__LT_S_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PLDSS__LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PLDSS__LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PLDSS__LT_S_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_RSBSS_W_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LSLSS_W_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRDS_S__S___LT_SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRDS_S__S___LT_SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STREXHS_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STREXBS_S__S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STREXBS_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STREXS_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDREXHS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDREXBS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDREXBS_S___LT_S_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDREXS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSHS_S___LT_S_RT____IS0XX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSHS_S___LT_S___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSBS_S___LT_PC_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSBS_S___LT_S_RT____IS0XX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSBS_S___LT_S___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRBS_S___LT_S_RT____IS0XX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRBS_W_S___LT_S___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRBS_S___LT_SS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRBS_W_S___LT_S___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRS_S___LT_S_RT____IS0XX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRS_W_S___LT_S___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	uint32_t cnt;
	if(((((uint32_t)(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r)) == 15) || (((uint32_t)(arm_bit16(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l, 15))) == 1)))
		block.add(sem::seti(_GPR(15), (ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB____IADDR + 8)));
	cnt = 0;
	ii = ((int32_t)(0));
gliss_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__0_:
	if((ii <= ((int32_t)(15)))) {
		if((((uint32_t)(arm_field16_generic(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l, ii, ii, 1 ))) == 1))
			cnt = (cnt + 1);
		ii = (ii + ((int32_t)(1)));
goto gliss_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__0_;
	}
	block.add(sem::seti(0xfffffffeLU, 4));
	block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r)))));
	block.add(sem::seti(0xfffffffdLU, (cnt * 4)));
	block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
	ii = ((int32_t)(0));
gliss_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__1_:
	if((ii <= ((int32_t)(15)))) {
		if((((uint32_t)(arm_field16_generic(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l, ii, ii, 1 ))) == 1)) {
			block.add(sem::load(_GPR(((uint32_t)(ii))), 0xffffffffLU, 7));
			block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
		}
		ii = (ii + ((int32_t)(1)));
goto gliss_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__1_;
	}
	if((((uint32_t)(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_W)) == 1))
		block.add(sem::set(_GPR(((uint32_t)(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_Rn_r))), 0xfffffffdLU));
	if((((uint32_t)(arm_bit16(ARM_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB__i_x_register_list__l, 15))) == 1))
		block.add(sem::branch(_GPR(15)));

};

static void otawa_sem_STRHS_S___LT_S_RT____IS0XX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRHS_W_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRHS_S___LT_S_RT____IS0XX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRHS_W_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSHS_W_S___LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRHS_W_S___LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRHS_W_S___LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRS_S___LT_S_RT____IS0XX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRS_W_S___LT_S___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSHTS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSBTS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRTS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRTS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRHTS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRHTS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRBTS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRBTS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSBS_W_S___LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRBS_W_S___LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRBS_W_S___LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRS_W_S___LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRS_W_S___LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDC2SS_D__D___LT_RD_RT___D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDC2SS_D__D___LT_RD_RT____ISD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDC2SS_D__D___LT_RD___ISD_RT__21(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDC2SS_D__D___LT_RD___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSS_D__D___LT_RD_RT___D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSS_D__D___LT_RD_RT____ISD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSS_D__D___LT_RD___ISD_RT__21(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSS_D__D___LT_RD___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STC2SS_D__D___LT_RD_RT___D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STC2SS_D__D___LT_RD_RT____ISD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STC2SS_D__D___LT_RD___ISD_RT__21(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STC2SS_D__D___LT_RD___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSS_D__D___LT_RD_RT___D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSS_D__D___LT_RD_RT____ISD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSS_D__D___LT_RD___ISD_RT__21(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSS_D__D___LT_RD___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BLXS_0X08X(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_TBBS__LT_S__S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BLS_0XX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSS_F64_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSS_F32_SD__SD__SD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSS_F32_QD__QD__QD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSS_F32_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VPOPS__LB_SD_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VPOPS__LB_DD_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VADDS_F64_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VADDS_F32_SD__SD__SD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VADDS_F32_QD__QD__QD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VADDS_F32_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VCVTS_F64_S_DD__SD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VCVTSS_U32_F64_SD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VCVTS_F32_S_SD__SD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VPUSHS__LB_SD_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VPUSHS__LB_DD_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMULS_F64_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMULS_F32_SD__SD__SD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMULS_F32_QD__QD__QD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMULS_F32_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMRSS_S__FPSCR(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSTRS_SD___LT_S___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Rn_r)) == 15)) {
		if(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_U)
			block.add(sem::seti(0xffffffffLU, ((((ARM_VSTRS_SD___LT_S___ISD_RT____IADDR + 4) - 1) & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))))));
		else
			block.add(sem::seti(0xffffffffLU, ((((ARM_VSTRS_SD___LT_S___ISD_RT____IADDR + 4) - 1) & ~(4 - 1)) - ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))))));
	}
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2)))));
		if(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_U)
			block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Rn_r)))));
		else
			block.add(sem::sub(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Rn_r)))));
	}
	if(1)
		block.add(sem::store(_SFPR(((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))), 0xffffffffLU, 9));
	else
		block.add(sem::store(_DFPR(((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))), 0xffffffffLU, 10));

};

static void otawa_sem_VSTRS_DD___LT_S___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)) == 15)) {
		if(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_U)
			block.add(sem::seti(0xffffffffLU, ((((ARM_VSTRS_DD___LT_S___ISD_RT____IADDR + 4) - 1) & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))))));
		else
			block.add(sem::seti(0xffffffffLU, ((((ARM_VSTRS_DD___LT_S___ISD_RT____IADDR + 4) - 1) & ~(4 - 1)) - ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))))));
	}
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2)))));
		if(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_U)
			block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)))));
		else
			block.add(sem::sub(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)))));
	}
	if(1)
		block.add(sem::store(_SFPR(((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, 1, 4)))), 0xffffffffLU, 9));
	else
		block.add(sem::store(_DFPR(((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, 1, 4)))), 0xffffffffLU, 10));

};

static void otawa_sem_VLDRS_DD___LT_S___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)) == 15)) {
		if(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_U)
			block.add(sem::seti(0xffffffffLU, ((((ARM_VLDRS_DD___LT_S___ISD_RT____IADDR + 4) - 1) & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))))));
		else
			block.add(sem::seti(0xffffffffLU, ((((ARM_VLDRS_DD___LT_S___ISD_RT____IADDR + 4) - 1) & ~(4 - 1)) - ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2))))));
	}
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_imm8, 0, 8, 2)))));
		if(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_U)
			block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)))));
		else
			block.add(sem::sub(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Rn_r)))));
	}
	if(1) {
		block.add(sem::load(_SFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))), 0xffffffffLU, 9));
		block.add(sem::scratch(_DFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1))) / 2))));
	}
	else {
		block.add(sem::load(_DFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1)))), 0xffffffffLU, 10));
		block.add(sem::scratch(_SFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1))) * 2))));
		block.add(sem::scratch(_SFPR(((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__i_x_x_Vd__p, 4, 1))) * 2) + 1))));
	}

};

static void otawa_sem_VLDRS_DD___LT_S___ISD_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Rn_r)) == 15)) {
		if(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_U)
			block.add(sem::seti(0xffffffffLU, ((((ARM_VLDRS_DD___LT_S___ISD_RT__0___IADDR + 4) - 1) & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_imm8, 0, 8, 2))))));
		else
			block.add(sem::seti(0xffffffffLU, ((((ARM_VLDRS_DD___LT_S___ISD_RT__0___IADDR + 4) - 1) & ~(4 - 1)) - ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_imm8, 0, 8, 2))))));
	}
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_imm8, 0, 8, 2)))));
		if(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_U)
			block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Rn_r)))));
		else
			block.add(sem::sub(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Rn_r)))));
	}
	if(1) {
		block.add(sem::load(_SFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4)))), 0xffffffffLU, 9));
		block.add(sem::scratch(_DFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4))) / 2))));
	}
	else {
		block.add(sem::load(_DFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4)))), 0xffffffffLU, 10));
		block.add(sem::scratch(_SFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4))) * 2))));
		block.add(sem::scratch(_SFPR(((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__0_i_x_x_Vd__r, 1, 4))) * 2) + 1))));
	}

};

static void otawa_sem_VDIVS_F64_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VDIVS_F32_SD__SD__SD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSUBS_F64_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSUBS_F32_SD__SD__SD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_DD__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_SD__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_F64_DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_F32_SD__SD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_F64_DD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_F32_SD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UXTHS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UXTBS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_YIELDS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MOVS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if((((uint32_t)(ARM_MOVS_S__S_i_x_H)) == 1))
		__gtmp_0 = _GPR((((uint32_t)(ARM_MOVS_S__S_i_x_rd_ro)) + 8));
	else
		__gtmp_0 = _GPR(((uint32_t)(ARM_MOVS_S__S_i_x_rd_ro)));
	block.add(sem::set(__gtmp_0, _GPR(((uint32_t)(ARM_MOVS_S__S_i_x_rm_r)))));

};

static void otawa_sem_MOVS_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(_GPR(((uint32_t)(ARM_MOVS_RD___ID_i_x_rd_ro))), ARM_MOVS_RD___ID_i_x_imm_n));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_TSTS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SXTHS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SXTBS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBS_RD__RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBS_SP___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBS_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRHS_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRHS_RD___LT_RD___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRBS_RD___LT_RD__RD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRBS_RD___LT_RD___ID_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRS_RD___LT_SP___ID_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRS_RD___LT_RD__RD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRS_RD___LT_RD___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STMIAS_RD_21___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SBCS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SBCS_RD__RD_i_x_rd_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RORS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_RORS_RD__RD_i_x_rd_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_REVSHS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_REV16S_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_REVS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PUSHS__LB_SS_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	block.add(sem::seti(0xfffffffeLU, 4));
	if((0 == 1)) {
		block.add(sem::sub(_GPR(13), _GPR(13), 0xfffffffeLU));
		block.add(sem::store(0xffffffffLU, _GPR(13), 4));
	}
	ii = ((int32_t)(8));
gliss_PUSHS__LB_SS_RB__2_:
	if((ii > ((int32_t)(0)))) {
		ii = (ii - ((int32_t)(1)));
		if((((uint32_t)(arm_field8_generic(ARM_PUSHS__LB_SS_RB__i_x_llist_r, ii, ii, 1 ))) == 1)) {
			block.add(sem::sub(_GPR(13), _GPR(13), 0xfffffffeLU));
			block.add(sem::store(_GPR(((uint32_t)(ii))), _GPR(13), 4));
		}
goto gliss_PUSHS__LB_SS_RB__2_;
	}

};

static void otawa_sem_PUSHS__LB_SS_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	block.add(sem::seti(0xfffffffeLU, 4));
	if((1 == 1)) {
		block.add(sem::sub(_GPR(13), _GPR(13), 0xfffffffeLU));
		block.add(sem::store(0xffffffffLU, _GPR(13), 4));
	}
	ii = ((int32_t)(8));
gliss_PUSHS__LB_SS_RB__0_3_:
	if((ii > ((int32_t)(0)))) {
		ii = (ii - ((int32_t)(1)));
		if((((uint32_t)(arm_field8_generic(ARM_PUSHS__LB_SS_RB__0_i_x_llist_r, ii, ii, 1 ))) == 1)) {
			block.add(sem::sub(_GPR(13), _GPR(13), 0xfffffffeLU));
			block.add(sem::store(_GPR(((uint32_t)(ii))), _GPR(13), 4));
		}
goto gliss_PUSHS__LB_SS_RB__0_3_;
	}

};

static void otawa_sem_POPS__LB_SS_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	ii = ((int32_t)(0));
	block.add(sem::seti(0xfffffffeLU, 4));
gliss_POPS__LB_SS_RB__4_:
	if((ii < ((int32_t)(8)))) {
		if((((uint32_t)(arm_field8_generic(ARM_POPS__LB_SS_RB__i_x_llist_r, ii, ii, 1 ))) == 1)) {
			block.add(sem::load(_GPR(((uint32_t)(ii))), _GPR(13), 7));
			block.add(sem::add(_GPR(13), _GPR(13), 0xfffffffeLU));
		}
		ii = (ii + ((int32_t)(1)));
goto gliss_POPS__LB_SS_RB__4_;
	}
	if((0 == 1)) {
		block.add(sem::load(0xffffffffLU, _GPR(13), 7));
		block.add(sem::add(_GPR(13), _GPR(13), 0xfffffffeLU));
		block.add(sem::branch(0xffffffffLU));
	}

};

static void otawa_sem_POPS__LB_SS_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t ii;
	ii = ((int32_t)(0));
	block.add(sem::seti(0xfffffffeLU, 4));
gliss_POPS__LB_SS_RB__0_5_:
	if((ii < ((int32_t)(8)))) {
		if((((uint32_t)(arm_field8_generic(ARM_POPS__LB_SS_RB__0_i_x_llist_r, ii, ii, 1 ))) == 1)) {
			block.add(sem::load(_GPR(((uint32_t)(ii))), _GPR(13), 7));
			block.add(sem::add(_GPR(13), _GPR(13), 0xfffffffeLU));
		}
		ii = (ii + ((int32_t)(1)));
goto gliss_POPS__LB_SS_RB__0_5_;
	}
	if((1 == 1)) {
		block.add(sem::load(0xffffffffLU, _GPR(13), 7));
		block.add(sem::add(_GPR(13), _GPR(13), 0xfffffffeLU));
		block.add(sem::branch(0xffffffffLU));
	}

};

static void otawa_sem_ORRS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_or(_GPR(((uint32_t)(ARM_ORRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ORRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ORRS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSBS_RD__RD___I0(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::neg(_GPR(((uint32_t)(ARM_RSBS_RD__RD___I0_i_x_rd_ro))), _GPR(((uint32_t)(ARM_RSBS_RD__RD___I0_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_MVNS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_not(_GPR(((uint32_t)(ARM_MVNS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_MVNS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_MULS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::mul(_GPR(((uint32_t)(ARM_MULS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_MULS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_MULS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LSRS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::shr(_GPR(((uint32_t)(ARM_LSRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSRS_RD__RD_i_x_rs_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LSRS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_LSRS_RD__RD___ID_i_x_imm5_n));
	block.add(sem::shr(_GPR(((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSRS_RD__RD___ID_i_x_rm_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LSLS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::shl(_GPR(((uint32_t)(ARM_LSLS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSLS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSLS_RD__RD_i_x_rs_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LSLS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_LSLS_RD__RD___ID_i_x_imm_n));
	block.add(sem::shl(_GPR(((uint32_t)(ARM_LSLS_RD__RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_LSLS_RD__RD___ID_i_x_rm_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_LDRSHS_RD___LT_RD__RD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSHS_RD___LT_RD__RD_RT__i_x_rd_ro))), 0xffffffffLU, 2));

};

static void otawa_sem_LDRSBS_RD___LT_RD__RD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSBS_RD___LT_RD__RD_RT__i_x_rd_ro))), 0xffffffffLU, 1));

};

static void otawa_sem_LDRHS_RD___LT_RD__RD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRHS_RD___LT_RD__RD_RT__i_x_rd_ro))), 0xffffffffLU, 6));

};

static void otawa_sem_LDRHS_RD___LT_RD___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, (((uint32_t)(ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_imm_n)) * 2)));
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_rn_ro))), 0xffffffffLU));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRHS_RD___LT_RD___I0XX_RT__i_x_rd_ro))), 0xffffffffLU, 6));

};

static void otawa_sem_LDRBS_RD___LT_RD__RD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRBS_RD___LT_RD__RD_RT__i_x_rd_ro))), 0xffffffffLU, 5));

};

static void otawa_sem_LDRBS_RD___LT_RD___ID_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_LDRBS_RD___LT_RD___ID_RT__i_x_imm_n));
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRBS_RD___LT_RD___ID_RT__i_x_rn_ro))), 0xffffffffLU));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRBS_RD___LT_RD___ID_RT__i_x_rd_ro))), 0xffffffffLU, 5));

};

static void otawa_sem_LDRS_RD___LT_SP___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ((uint32_t)((((int32_t)(ARM_LDRS_RD___LT_SP___I0XX_RT__i_x_imm_n)) * ((int32_t)(4)))))));
	block.add(sem::add(0xffffffffLU, _GPR(13), 0xffffffffLU));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRS_RD___LT_SP___I0XX_RT__i_x_rd_ro))), 0xffffffffLU, 7));

};

static void otawa_sem_LDRS_RD___LT_PC___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ((ARM_LDRS_RD___LT_PC___I0XX_RT____IADDR + 8) + (((uint32_t)(ARM_LDRS_RD___LT_PC___I0XX_RT__i_x_imm_n)) * 4))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRS_RD___LT_PC___I0XX_RT__i_x_rd_ro))), 0xffffffffLU, 7));

};

static void otawa_sem_LDRS_RD___LT_RD__RD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRS_RD___LT_RD__RD_RT__i_x_rn_ro))), _GPR(((uint32_t)(ARM_LDRS_RD___LT_RD__RD_RT__i_x_rm_ro)))));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRS_RD___LT_RD__RD_RT__i_x_rd_ro))), 0xffffffffLU, 7));

};

static void otawa_sem_LDRS_RD___LT_RD___I0XX_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, (((uint32_t)(ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_imm_n)) * 4)));
	block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_rn_ro))), 0xffffffffLU));
	block.add(sem::load(_GPR(((uint32_t)(ARM_LDRS_RD___LT_RD___I0XX_RT__i_x_rd_ro))), 0xffffffffLU, 7));

};

static void otawa_sem_LDMIAS_RD___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t sem_rec_first;
	int32_t ii;
	block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMIAS_RD___LB_S_RB__i_x_rn_ro)))));
	block.add(sem::seti(0xfffffffeLU, 4));
	ii = ((int32_t)(0));
	sem_rec_first = ((int32_t)(1));
gliss_LDMIAS_RD___LB_S_RB__6_:
	if((ii < ((int32_t)(8)))) {
		if((((uint32_t)(arm_field8_generic(ARM_LDMIAS_RD___LB_S_RB__i_x_llist_r, ii, ii, 1 ))) == 1)) {
			if((sem_rec_first == ((int32_t)(0))))
				block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
			block.add(sem::load(_GPR(((uint32_t)(ii))), 0xffffffffLU, 7));
			sem_rec_first = ((int32_t)(0));
		}
		ii = (ii + ((int32_t)(1)));
goto gliss_LDMIAS_RD___LB_S_RB__6_;
	}
	block.add(sem::set(_GPR(((uint32_t)(ARM_LDMIAS_RD___LB_S_RB__i_x_rn_ro))), 0xffffffffLU));

};

static void otawa_sem_EORS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_xor(_GPR(((uint32_t)(ARM_EORS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_EORS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_EORS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_CMPS_RD__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_CMPS_RD__S_i_x_H)) == 1))
		block.add(sem::cmp(_CPSR(), _GPR((((uint32_t)(ARM_CMPS_RD__S_i_x_rn_ro)) + 8)), _GPR(((uint32_t)(ARM_CMPS_RD__S_i_x_rm_r)))));
	else
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_RD__S_i_x_rn_ro))), _GPR(((uint32_t)(ARM_CMPS_RD__S_i_x_rm_r)))));

};

static void otawa_sem_CMPS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_RD__RD_i_x_rn_ro))), _GPR(((uint32_t)(ARM_CMPS_RD__RD_i_x_rm_ro)))));

};

static void otawa_sem_CMPS_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_CMPS_RD___ID_i_x_imm_n));
	block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_RD___ID_i_x_rn_ro))), 0xffffffffLU));

};

static void otawa_sem_CMNS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_RD__RD_i_x_rm_ro)))));
	block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMNS_RD__RD_i_x_rn_ro))), 0xffffffffLU));

};

static void otawa_sem_CBZS_RD__D(arm_inst_t *inst, otawa::sem::Block& block) {
	if((ARM_CBZS_RD__D_i_x_op_ ^ ((uint8_t)((_GPR(ARM_CBZS_RD__D_i_x_rn_ro) == 0)))))
		block.add(sem::branch(((ARM_CBZS_RD__D___IADDR + 4) + ((uint32_t)(arm_concat8(arm_concat8(ARM_CBZS_RD__D_i_x_i, ARM_CBZS_RD__D_i_x_imm5, 1, 5), 0, 6, 1))))));

};

static void otawa_sem_BXS_S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::branch(_GPR(((uint32_t)(ARM_BXS_S_i_x_rm_r)))));

};

static void otawa_sem_BLXS_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BKPT__ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BICS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_not(0xffffffffLU, _GPR(((uint32_t)(ARM_BICS_RD__RD_i_x_rm_ro)))));
	block.add(sem::_and(_GPR(((uint32_t)(ARM_BICS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_BICS_RD__RD_i_x_rd_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_BS_N__40(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_S_N_08X(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	block.add(sem::seti(0xffffffffLU, ((((int32_t)((ARM_S_N_08X___IADDR + 4))) + ((int32_t)(ARM_S_N_08X_i_x_simm_n))) << 1)));
	if((((uint32_t)(ARM_S_N_08X_i_x_cond)) == 14))
		block.add(sem::branch(0xffffffffLU));
	else {
		if((((uint32_t)(ARM_S_N_08X_i_x_cond)) == 15))
			block.add(sem::trap());
		else {
			switch(ARM_S_N_08X_i_x_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::branch(0xffffffffLU));
		}
	}

};

static void otawa_sem_ASRS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::asr(_GPR(((uint32_t)(ARM_ASRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ASRS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ASRS_RD__RD_i_x_rs_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ASRS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_ASRS_RD__RD___ID_i_x_imm_n));
	block.add(sem::asr(_GPR(((uint32_t)(ARM_ASRS_RD__RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ASRS_RD__RD___ID_i_x_rm_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ANDS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::_and(_GPR(((uint32_t)(ARM_ANDS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ANDS_RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ANDS_RD__RD_i_x_rm_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADDS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADDS_S__S_i_x_rd_r))), _GPR(((uint32_t)(ARM_ADDS_S__S_i_x_rd_r))), _GPR(((uint32_t)(ARM_ADDS_S__S_i_x_rm_r)))));

};

static void otawa_sem_ADDS_RD__RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADDS_RD__RD__RD_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ADDS_RD__RD__RD_i_x_rm_ro))), _GPR(((uint32_t)(ARM_ADDS_RD__RD__RD_i_x_rn_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADDS_SP__SP___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(_GPR(13), _GPR(13), (__ARM_EXTS8(25, ((int32_t)(ARM_ADDS_SP__SP___ID_i_x_imm_n))) << 2)));

};

static void otawa_sem_ADDS_RD__SP___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADDS_RD__SP___ID_i_x_rd_ro))), _GPR(13), (((int32_t)(ARM_ADDS_RD__SP___ID_i_x_imm_n)) << 2)));

};

static void otawa_sem_ADDS_RD__PC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(_GPR(((uint32_t)(ARM_ADDS_RD__PC___ID_i_x_rd_ro))), ((((int32_t)(((ARM_ADDS_RD__PC___ID___IADDR + 4) & 0xfffffffcLU))) + ((int32_t)(ARM_ADDS_RD__PC___ID_i_x_imm_n))) << 2)));

};

static void otawa_sem_ADDS_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_ADDS_RD___ID_i_x_imm_n));
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADDS_RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ADDS_RD___ID_i_x_rd_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADDS_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(0xffffffffLU, ARM_ADDS_RD__RD___ID_i_x_imm_n));
	block.add(sem::add(_GPR(((uint32_t)(ARM_ADDS_RD__RD___ID_i_x_rd_ro))), _GPR(((uint32_t)(ARM_ADDS_RD__RD___ID_i_x_rn_ro))), 0xffffffffLU));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADCS_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADCS_RD__RD_i_x_rd_ro)))));
	block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_MRCS_D__D__S__CRD__CRD__D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSSS_D__D___LT_RD_RT___D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSSS_D__D___LT_RD_RT____ISD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSSS_D__D___LT_RD___ISD_RT__21(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDCSSS_D__D___LT_RD___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSSS_D__D___LT_RD_RT___D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSSS_D__D___LT_RD_RT____ISD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSSS_D__D___LT_RD___ISD_RT__21(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STCSSS_D__D___LT_RD___ISD_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSTRS_SD___LT_S___ISD_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_cond_cond)))) == 14)) {
			if(1) {
				block.add(sem::scratch(_SFPR(((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1))))));
				block.add(sem::scratch(_DFPR((((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1))) / 2))));
			}
			else {
				block.add(sem::scratch(_DFPR(((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1))))));
				block.add(sem::scratch(_SFPR((((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1))) * 2))));
				block.add(sem::scratch(_SFPR(((((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1))) * 2) + 1))));
			}
		}
		else {
			if((((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Rn_r)) == 15)) {
				if(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_U)
					block.add(sem::seti(0xffffffffLU, ((((ARM_VSTRS_SD___LT_S___ISD_RT__0___IADDR + 4) - 1) & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2))))));
				else
					block.add(sem::seti(0xffffffffLU, ((((ARM_VSTRS_SD___LT_S___ISD_RT__0___IADDR + 4) - 1) & ~(4 - 1)) - ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2))))));
			}
			else {
				block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2)))));
				if(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_U)
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Rn_r)))));
				else
					block.add(sem::sub(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Rn_r)))));
			}
			if(1)
				block.add(sem::store(_SFPR(((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1)))), 0xffffffffLU, 9));
			else
				block.add(sem::store(_DFPR(((uint32_t)(arm_concat8(ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__r, ARM_VSTRS_SD___LT_S___ISD_RT__0_x_x_Vd__p, 4, 1)))), 0xffffffffLU, 10));
		}
	}

};

static void otawa_sem_VSTRS_DD___LT_S___ISD_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_cond_cond)))) == 14)) {
			if(1) {
				block.add(sem::scratch(_SFPR(((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4))))));
				block.add(sem::scratch(_DFPR((((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4))) / 2))));
			}
			else {
				block.add(sem::scratch(_DFPR(((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4))))));
				block.add(sem::scratch(_SFPR((((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4))) * 2))));
				block.add(sem::scratch(_SFPR(((((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4))) * 2) + 1))));
			}
		}
		else {
			if((((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Rn_r)) == 15)) {
				if(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_U)
					block.add(sem::seti(0xffffffffLU, ((((ARM_VSTRS_DD___LT_S___ISD_RT__0___IADDR + 4) - 1) & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2))))));
				else
					block.add(sem::seti(0xffffffffLU, ((((ARM_VSTRS_DD___LT_S___ISD_RT__0___IADDR + 4) - 1) & ~(4 - 1)) - ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2))))));
			}
			else {
				block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_imm8, 0, 8, 2)))));
				if(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_U)
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Rn_r)))));
				else
					block.add(sem::sub(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Rn_r)))));
			}
			if(1)
				block.add(sem::store(_SFPR(((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4)))), 0xffffffffLU, 9));
			else
				block.add(sem::store(_DFPR(((uint32_t)(arm_concat8(ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__p, ARM_VSTRS_DD___LT_S___ISD_RT__0_x_x_Vd__r, 1, 4)))), 0xffffffffLU, 10));
		}
	}

};

static void otawa_sem_VSTMSSS_SS___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	uint32_t __gliss_0_r;
	if(!(((uint32_t)(((uint8_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_cond_cond)))) == 14)) {
			switch(ARM_VSTMSSS_SS___LB_S_RB__x_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::cont());
		}
		block.add(sem::seti(0xffffffffLU, ((arm_concat64(ARM_VSTMSSS_SS___LB_S_RB__x_x_imm8, 0, 8, 32)) &  ((1ll << 32) - 1))));
		if(0)
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		else
			block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		if((1 == 1)) {
			if(0)
				block.add(sem::add(_GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_Rn_r))), _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
			else
				block.add(sem::sub(_GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_Rn_r))), _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		}
		if(0)
			block.add(sem::seti(0xfffffffeLU, 4));
		else
			block.add(sem::seti(0xfffffffeLU, 8));
		for(__gliss_0_r = 0; __gliss_0_r != 31+ 1; __gliss_0_r++) {
			if((__gliss_0_r < ((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__x_x_imm8)))) {
				if(0) {
					block.add(sem::store(_SFPR((((uint32_t)(arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__x_x_D, arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__x_x_Vd__p, ARM_VSTMSSS_SS___LB_S_RB__x_x_Vd__r, 1, 4), 1, 5))) + __gliss_0_r)), 0xffffffffLU, 9));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
				else {
					block.add(sem::store(_DFPR((((uint32_t)(arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__x_x_D, arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__x_x_Vd__p, ARM_VSTMSSS_SS___LB_S_RB__x_x_Vd__r, 1, 4), 1, 5))) + __gliss_0_r)), 0xffffffffLU, 10));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
			}
		}
	}

};

static void otawa_sem_VSTMSSS_SS___LB_S_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	uint32_t __gliss_0_r;
	if(!(((uint32_t)(((uint8_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_cond_cond)))) == 14)) {
			switch(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::cont());
		}
		block.add(sem::seti(0xffffffffLU, ((arm_concat64(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_imm8, 0, 8, 32)) &  ((1ll << 32) - 1))));
		if(0)
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		else
			block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		if((1 == 1)) {
			if(0)
				block.add(sem::add(_GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
			else
				block.add(sem::sub(_GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		}
		if(0)
			block.add(sem::seti(0xfffffffeLU, 4));
		else
			block.add(sem::seti(0xfffffffeLU, 8));
		for(__gliss_0_r = 0; __gliss_0_r != 31+ 1; __gliss_0_r++) {
			if((__gliss_0_r < ((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_imm8)))) {
				if(0) {
					block.add(sem::store(_SFPR((((uint32_t)(arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_D, arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Vd__p, ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Vd__r, 1, 4), 1, 5))) + __gliss_0_r)), 0xffffffffLU, 9));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
				else {
					block.add(sem::store(_DFPR((((uint32_t)(arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_D, arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Vd__p, ARM_VSTMSSS_SS___LB_S_RB__0_x_x_Vd__r, 1, 4), 1, 5))) + __gliss_0_r)), 0xffffffffLU, 10));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
			}
		}
	}

};

static void otawa_sem_VSTMSSS_SS___LB_S_RB__1(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	uint32_t __gliss_0_r;
	if(!(((uint32_t)(((uint8_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_cond_cond)))) == 14)) {
			switch(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::cont());
		}
		block.add(sem::seti(0xffffffffLU, ((arm_concat64(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_imm8, 0, 8, 32)) &  ((1ll << 32) - 1))));
		if(0)
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Rn_r))), 0xffffffffLU));
		else
			block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Rn_r))), 0xffffffffLU));
		if((1 == 1)) {
			if(0)
				block.add(sem::add(_GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Rn_r))), 0xffffffffLU));
			else
				block.add(sem::sub(_GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Rn_r))), 0xffffffffLU));
		}
		if(0)
			block.add(sem::seti(0xfffffffeLU, 4));
		else
			block.add(sem::seti(0xfffffffeLU, 8));
		for(__gliss_0_r = 0; __gliss_0_r != 31+ 1; __gliss_0_r++) {
			if((__gliss_0_r < ((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_imm8)))) {
				if(0) {
					block.add(sem::store(_SFPR((((uint32_t)(arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_D, arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Vd__p, ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Vd__r, 1, 4), 1, 5))) + __gliss_0_r)), 0xffffffffLU, 9));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
				else {
					block.add(sem::store(_DFPR((((uint32_t)(arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_D, arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Vd__p, ARM_VSTMSSS_SS___LB_S_RB__1_x_x_Vd__r, 1, 4), 1, 5))) + __gliss_0_r)), 0xffffffffLU, 10));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
			}
		}
	}

};

static void otawa_sem_VSTMSSS_SS___LB_S_RB__2(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	uint32_t __gliss_0_r;
	if(!(((uint32_t)(((uint8_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_cond_cond)))) == 14)) {
			switch(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::cont());
		}
		block.add(sem::seti(0xffffffffLU, ((arm_concat64(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_imm8, 0, 8, 32)) &  ((1ll << 32) - 1))));
		if(0)
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Rn_r))), 0xffffffffLU));
		else
			block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Rn_r))), 0xffffffffLU));
		if((1 == 1)) {
			if(0)
				block.add(sem::add(_GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Rn_r))), 0xffffffffLU));
			else
				block.add(sem::sub(_GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Rn_r))), 0xffffffffLU));
		}
		if(0)
			block.add(sem::seti(0xfffffffeLU, 4));
		else
			block.add(sem::seti(0xfffffffeLU, 8));
		for(__gliss_0_r = 0; __gliss_0_r != 31+ 1; __gliss_0_r++) {
			if((__gliss_0_r < ((uint32_t)(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_imm8)))) {
				if(0) {
					block.add(sem::store(_SFPR((((uint32_t)(arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_D, arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Vd__p, ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Vd__r, 1, 4), 1, 5))) + __gliss_0_r)), 0xffffffffLU, 9));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
				else {
					block.add(sem::store(_DFPR((((uint32_t)(arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_D, arm_concat8(ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Vd__p, ARM_VSTMSSS_SS___LB_S_RB__2_x_x_Vd__r, 1, 4), 1, 5))) + __gliss_0_r)), 0xffffffffLU, 10));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
			}
		}
	}

};

static void otawa_sem_VMULS_F64_DD__DD__DD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMULS_F32_SD__SD__SD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMUL_F32_QD__QD__QD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMUL_F32_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_DD__S__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_SD__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_F64_DD__DD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_F32_SD__SD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_F64_DD___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VMOVS_F32_SD___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSS_F64_DD__DD__DD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VSS_F32_SD__SD__SD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VS_F32_QD__QD__QD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VS_F32_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VLDRS_DD___LT_S___ISD_RT__1(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_cond_cond)))) == 14)) {
			if(1) {
				block.add(sem::scratch(_SFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1))))));
				block.add(sem::scratch(_DFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1))) / 2))));
			}
			else {
				block.add(sem::scratch(_DFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1))))));
				block.add(sem::scratch(_SFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1))) * 2))));
				block.add(sem::scratch(_SFPR(((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1))) * 2) + 1))));
			}
		}
		else {
			if((((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Rn_r)) == 15)) {
				if(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_U)
					block.add(sem::seti(0xffffffffLU, ((((ARM_VLDRS_DD___LT_S___ISD_RT__1___IADDR + 4) - 1) & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_imm8, 0, 8, 2))))));
				else
					block.add(sem::seti(0xffffffffLU, ((((ARM_VLDRS_DD___LT_S___ISD_RT__1___IADDR + 4) - 1) & ~(4 - 1)) - ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_imm8, 0, 8, 2))))));
			}
			else {
				block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_imm8, 0, 8, 2)))));
				if(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_U)
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Rn_r)))));
				else
					block.add(sem::sub(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Rn_r)))));
			}
			if(1) {
				block.add(sem::load(_SFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1)))), 0xffffffffLU, 9));
				block.add(sem::scratch(_DFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1))) / 2))));
			}
			else {
				block.add(sem::load(_DFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1)))), 0xffffffffLU, 10));
				block.add(sem::scratch(_SFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1))) * 2))));
				block.add(sem::scratch(_SFPR(((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__r, ARM_VLDRS_DD___LT_S___ISD_RT__1_x_x_Vd__p, 4, 1))) * 2) + 1))));
			}
		}
	}

};

static void otawa_sem_VLDRS_DD___LT_S___ISD_RT__2(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_cond_cond)))) == 14)) {
			if(1) {
				block.add(sem::scratch(_SFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4))))));
				block.add(sem::scratch(_DFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4))) / 2))));
			}
			else {
				block.add(sem::scratch(_DFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4))))));
				block.add(sem::scratch(_SFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4))) * 2))));
				block.add(sem::scratch(_SFPR(((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4))) * 2) + 1))));
			}
		}
		else {
			if((((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Rn_r)) == 15)) {
				if(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_U)
					block.add(sem::seti(0xffffffffLU, ((((ARM_VLDRS_DD___LT_S___ISD_RT__2___IADDR + 4) - 1) & ~(4 - 1)) + ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_imm8, 0, 8, 2))))));
				else
					block.add(sem::seti(0xffffffffLU, ((((ARM_VLDRS_DD___LT_S___ISD_RT__2___IADDR + 4) - 1) & ~(4 - 1)) - ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_imm8, 0, 8, 2))))));
			}
			else {
				block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_imm8, 0, 8, 2)))));
				if(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_U)
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Rn_r)))));
				else
					block.add(sem::sub(0xffffffffLU, 0xffffffffLU, _GPR(((uint32_t)(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Rn_r)))));
			}
			if(1) {
				block.add(sem::load(_SFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4)))), 0xffffffffLU, 9));
				block.add(sem::scratch(_DFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4))) / 2))));
			}
			else {
				block.add(sem::load(_DFPR(((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4)))), 0xffffffffLU, 10));
				block.add(sem::scratch(_SFPR((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4))) * 2))));
				block.add(sem::scratch(_SFPR(((((uint32_t)(arm_concat8(ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__p, ARM_VLDRS_DD___LT_S___ISD_RT__2_x_x_Vd__r, 1, 4))) * 2) + 1))));
			}
		}
	}

};

static void otawa_sem_VLDMDBS_S_21___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	uint32_t __gliss_1_r;
	if(!(((uint32_t)(((uint8_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_cond_cond)))) == 14)) {
			switch(ARM_VLDMDBS_S_21___LB_S_RB__x_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::cont());
		}
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VLDMDBS_S_21___LB_S_RB__x_x_imm8, 0, 8, 2)))));
		if((0 == 1))
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		else
			block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		if((1 == 1)) {
			if((0 == 1))
				block.add(sem::add(_GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_Rn_r))), _GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
			else
				block.add(sem::sub(_GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_Rn_r))), _GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		}
		if(1)
			block.add(sem::seti(0xfffffffeLU, 4));
		else
			block.add(sem::seti(0xfffffffeLU, 8));
		for(__gliss_1_r = 0; __gliss_1_r != 31+ 1; __gliss_1_r++) {
			if((__gliss_1_r < ((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__x_x_imm8)))) {
				if(1) {
					block.add(sem::load(_SFPR((((uint32_t)(arm_concat8(arm_concat8(ARM_VLDMDBS_S_21___LB_S_RB__x_x_Vd__p, ARM_VLDMDBS_S_21___LB_S_RB__x_x_Vd__r, 1, 4), ARM_VLDMDBS_S_21___LB_S_RB__x_x_D, 5, 1))) + __gliss_1_r)), 0xffffffffLU, 9));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
				else {
					block.add(sem::load(_DFPR((((uint32_t)(arm_concat8(arm_concat8(ARM_VLDMDBS_S_21___LB_S_RB__x_x_Vd__p, ARM_VLDMDBS_S_21___LB_S_RB__x_x_Vd__r, 1, 4), ARM_VLDMDBS_S_21___LB_S_RB__x_x_D, 5, 1))) + __gliss_1_r)), 0xffffffffLU, 10));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
			}
		}
	}

};

static void otawa_sem_VLDMIAS_SS___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	uint32_t __gliss_1_r;
	if(!(((uint32_t)(((uint8_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_cond_cond)))) == 14)) {
			switch(ARM_VLDMIAS_SS___LB_S_RB__x_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::cont());
		}
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VLDMIAS_SS___LB_S_RB__x_x_imm8, 0, 8, 2)))));
		if((0 == 1))
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		else
			block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		if((1 == 1)) {
			if((0 == 1))
				block.add(sem::add(_GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_Rn_r))), _GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
			else
				block.add(sem::sub(_GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_Rn_r))), _GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_Rn_r))), 0xffffffffLU));
		}
		if(1)
			block.add(sem::seti(0xfffffffeLU, 4));
		else
			block.add(sem::seti(0xfffffffeLU, 8));
		for(__gliss_1_r = 0; __gliss_1_r != 31+ 1; __gliss_1_r++) {
			if((__gliss_1_r < ((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__x_x_imm8)))) {
				if(1) {
					block.add(sem::load(_SFPR((((uint32_t)(arm_concat8(arm_concat8(ARM_VLDMIAS_SS___LB_S_RB__x_x_Vd__p, ARM_VLDMIAS_SS___LB_S_RB__x_x_Vd__r, 1, 4), ARM_VLDMIAS_SS___LB_S_RB__x_x_D, 5, 1))) + __gliss_1_r)), 0xffffffffLU, 9));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
				else {
					block.add(sem::load(_DFPR((((uint32_t)(arm_concat8(arm_concat8(ARM_VLDMIAS_SS___LB_S_RB__x_x_Vd__p, ARM_VLDMIAS_SS___LB_S_RB__x_x_Vd__r, 1, 4), ARM_VLDMIAS_SS___LB_S_RB__x_x_D, 5, 1))) + __gliss_1_r)), 0xffffffffLU, 10));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
			}
		}
	}

};

static void otawa_sem_VLDMDBS_S_21___LB_S_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	uint32_t __gliss_1_r;
	if(!(((uint32_t)(((uint8_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_cond_cond)))) == 14)) {
			switch(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::cont());
		}
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_imm8, 0, 8, 2)))));
		if((0 == 1))
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		else
			block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		if((1 == 1)) {
			if((0 == 1))
				block.add(sem::add(_GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
			else
				block.add(sem::sub(_GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		}
		if(1)
			block.add(sem::seti(0xfffffffeLU, 4));
		else
			block.add(sem::seti(0xfffffffeLU, 8));
		for(__gliss_1_r = 0; __gliss_1_r != 31+ 1; __gliss_1_r++) {
			if((__gliss_1_r < ((uint32_t)(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_imm8)))) {
				if(1) {
					block.add(sem::load(_SFPR((((uint32_t)(arm_concat8(arm_concat8(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Vd__p, ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Vd__r, 1, 4), ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_D, 5, 1))) + __gliss_1_r)), 0xffffffffLU, 9));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
				else {
					block.add(sem::load(_DFPR((((uint32_t)(arm_concat8(arm_concat8(ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Vd__p, ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_Vd__r, 1, 4), ARM_VLDMDBS_S_21___LB_S_RB__0_x_x_D, 5, 1))) + __gliss_1_r)), 0xffffffffLU, 10));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
			}
		}
	}

};

static void otawa_sem_VLDMIAS_SS___LB_S_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	uint32_t __gliss_1_r;
	if(!(((uint32_t)(((uint8_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_cond_cond)))) == 14)) {
			switch(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::cont());
		}
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(arm_concat16(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_imm8, 0, 8, 2)))));
		if((0 == 1))
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		else
			block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		if((1 == 1)) {
			if((0 == 1))
				block.add(sem::add(_GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
			else
				block.add(sem::sub(_GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Rn_r))), _GPR(((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Rn_r))), 0xffffffffLU));
		}
		if(1)
			block.add(sem::seti(0xfffffffeLU, 4));
		else
			block.add(sem::seti(0xfffffffeLU, 8));
		for(__gliss_1_r = 0; __gliss_1_r != 31+ 1; __gliss_1_r++) {
			if((__gliss_1_r < ((uint32_t)(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_imm8)))) {
				if(1) {
					block.add(sem::load(_SFPR((((uint32_t)(arm_concat8(arm_concat8(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Vd__p, ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Vd__r, 1, 4), ARM_VLDMIAS_SS___LB_S_RB__0_x_x_D, 5, 1))) + __gliss_1_r)), 0xffffffffLU, 9));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
				else {
					block.add(sem::load(_DFPR((((uint32_t)(arm_concat8(arm_concat8(ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Vd__p, ARM_VLDMIAS_SS___LB_S_RB__0_x_x_Vd__r, 1, 4), ARM_VLDMIAS_SS___LB_S_RB__0_x_x_D, 5, 1))) + __gliss_1_r)), 0xffffffffLU, 10));
					block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
				}
			}
		}
	}

};

static void otawa_sem_VDIVS_F64_DD__DD__DD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VDIVS_F32_SD__SD__SD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VCVT_FD_FD_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VCVTSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VADDS_F64_DD__DD__DD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VADDS_F32_SD__SD__SD_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VADD_F32_QD__QD__QD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_VADD_F32_DD__DD__DD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_DMB_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MRSS_S__CPSR(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MRSS_S__SPSR(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR___S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_XC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FS__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_C__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_X__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR___S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_XC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FS__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_C__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_X__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR____ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_XC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FS___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_C___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_X___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR____ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_XC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FS___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_C___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_X___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CDPSS_D__D__D__D__D__D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BFIS_S___ID___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_BFIS_S___ID___ID_x_rd_r)))));

};

static void otawa_sem_CLZS_S__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_CLZS_S__S_0_x_rd_r)))));

};

static void otawa_sem_SWPS_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_SWPS_S__S___LT_S_RT__x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_SWPS_S__S___LT_S_RT__x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SWPS_S__S___LT_S_RT__x_rd_r)))));
			block.add(sem::cont());
		}
		block.add(sem::scratch(0xffffffffLU));
		if((0 == 1))
			__gtmp_0 = 1;
		else
			__gtmp_0 = 4;
		block.add(sem::store(0xffffffffLU, _GPR(((uint32_t)(ARM_SWPS_S__S___LT_S_RT__x_rn_r))), __gtmp_0));
		block.add(sem::scratch(_GPR(((uint32_t)(ARM_SWPS_S__S___LT_S_RT__x_rd_r)))));
	}

};

static void otawa_sem_SWPSB_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_SWPSB_S__S___LT_S_RT__x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_SWPSB_S__S___LT_S_RT__x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SWPSB_S__S___LT_S_RT__x_rd_r)))));
			block.add(sem::cont());
		}
		block.add(sem::scratch(0xffffffffLU));
		if((1 == 1))
			__gtmp_0 = 1;
		else
			__gtmp_0 = 4;
		block.add(sem::store(0xffffffffLU, _GPR(((uint32_t)(ARM_SWPSB_S__S___LT_S_RT__x_rn_r))), __gtmp_0));
		block.add(sem::scratch(_GPR(((uint32_t)(ARM_SWPSB_S__S___LT_S_RT__x_rd_r)))));
	}

};

static void otawa_sem_UMLALSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_UMLALSS_S__S__S__S_x_rdlo_r)))));
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_UMLALSS_S__S__S__S_x_rdhi_r)))));
	if(ARM_UMLALSS_S__S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_SMLALSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SMLALSS_S__S__S__S_x_rdlo_r)))));
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SMLALSS_S__S__S__S_x_rdhi_r)))));
	if(ARM_SMLALSS_S__S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_UMULLSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_UMULLSS_S__S__S__S_x_rdlo_r)))));
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_UMULLSS_S__S__S__S_x_rdhi_r)))));
	if(ARM_UMULLSS_S__S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_SMULLSS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_SMULLSS_S__S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_SMULLSS_S__S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rdlo_r)))));
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rdhi_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rs_r)) == 15) || (((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_SMULLSS_S__S__S__S___IADDR + 8)));
		block.add(sem::mul(_GPR(((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rdlo_r))), _GPR(((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rm_r))), _GPR(((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rs_r)))));
		block.add(sem::mulh(_GPR(((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rdhi_r))), _GPR(((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rm_r))), _GPR(((uint32_t)(ARM_SMULLSS_S__S__S__S_x_rs_r)))));
		if(ARM_SMULLSS_S__S__S__S_x_sets_set)
			block.add(sem::scratch(_CPSR()));
	}

};

static void otawa_sem_MULSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_MULSS_S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_MULSS_S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_MULSS_S__S__S_x_rs_r)) == 15) || (((uint32_t)(ARM_MULSS_S__S__S_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_MULSS_S__S__S___IADDR + 8)));
		block.add(sem::mul(_GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rm_r))), _GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rs_r)))));
		if(ARM_MULSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MULSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MLASS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_MLASS_S__S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_MLASS_S__S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((((uint32_t)(ARM_MLASS_S__S__S__S_x_rn_r)) == 15) || (((uint32_t)(ARM_MLASS_S__S__S__S_x_rm_r)) == 15)) || (((uint32_t)(ARM_MLASS_S__S__S__S_x_rs_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_MLASS_S__S__S__S___IADDR + 8)));
		block.add(sem::mul(0xffffffffLU, _GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rm_r))), _GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rs_r)))));
		block.add(sem::add(_GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rd_r))), 0xffffffffLU, _GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rn_r)))));
		if(ARM_MLASS_S__S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MLASS_S__S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_SWIS_D(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_SWIS_D_x_cond_cond)))) == 15)) {
		block.add(sem::scratch(0xffffffffLU));
		if((((uint32_t)(((uint8_t)(ARM_SWIS_D_x_cond_cond)))) == 14))
			block.add(sem::trap());
		else {
			switch(ARM_SWIS_D_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(_CPSR(), __gtmp_0, 1));
			block.add(sem::trap());
		}
	}

};

static void otawa_sem_LDMSS_SS___LB_S_RB_S(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t sem_rec_first;
	int32_t ii;
	uint32_t cnt;
	if(!(((uint32_t)(((uint8_t)(ARM_LDMSS_SS___LB_S_RB_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDMSS_SS___LB_S_RB_S_x_cond_cond)))) == 14)) {
			ii = ((int32_t)(0));
gliss_LDMSS_SS___LB_S_RB_S_7_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1))
					block.add(sem::scratch(_GPR(((uint32_t)(ii)))));
				ii = (ii + ((int32_t)(1)));
goto gliss_LDMSS_SS___LB_S_RB_S_7_;
			}
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r)))));
		}
		else {
			if(((((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r)) == 15) || (((uint32_t)(arm_bit16(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, 15))) == 1)))
				block.add(sem::seti(_GPR(15), (ARM_LDMSS_SS___LB_S_RB_S___IADDR + 8)));
			cnt = 0;
			ii = ((int32_t)(0));
gliss_LDMSS_SS___LB_S_RB_S_8_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1))
					cnt = (cnt + 1);
				ii = (ii + ((int32_t)(1)));
goto gliss_LDMSS_SS___LB_S_RB_S_8_;
			}
			block.add(sem::seti(0xfffffffeLU, 4));
			switch(ARM_LDMSS_SS___LB_S_RB_S_x_adr_mode) {
			case 3:
				block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffeLU));
				block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffeLU));
				block.add(sem::seti(0xfffffffdLU, ((cnt * 4) - 4)));
				block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
				break;
			case 2:
				block.add(sem::seti(0xffffffffLU, (cnt * 4)));
				block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
				block.add(sem::set(0xfffffffdLU, 0xffffffffLU));
				break;
			case 1:
				block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r)))));
				block.add(sem::seti(0xfffffffdLU, (cnt * 4)));
				block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
				break;
			case 0:
				block.add(sem::seti(0xffffffffLU, ((cnt * 4) - 4)));
				block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
				block.add(sem::sub(0xfffffffdLU, 0xffffffffLU, 0xfffffffeLU));
				break;
			}
			ii = ((int32_t)(0));
			sem_rec_first = ((int32_t)(1));
gliss_LDMSS_SS___LB_S_RB_S_9_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1)) {
					if((sem_rec_first == ((int32_t)(0))))
						block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
					block.add(sem::load(_GPR(((uint32_t)(ii))), 0xffffffffLU, 7));
					sem_rec_first = ((int32_t)(0));
				}
				ii = (ii + ((int32_t)(1)));
goto gliss_LDMSS_SS___LB_S_RB_S_9_;
			}
			if((((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffdLU));
			if((((uint32_t)(arm_bit16(ARM_LDMSS_SS___LB_S_RB_S_x_reglist_r, 15))) == 1))
				block.add(sem::branch(_GPR(15)));
		}
	}

};

static void otawa_sem_STMSS_SS___LB_S_RB_S(arm_inst_t *inst, otawa::sem::Block& block) {
	int32_t sem_rec_first;
	int32_t ii;
	uint32_t cnt;
	if(!(((uint32_t)(((uint8_t)(ARM_STMSS_SS___LB_S_RB_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_STMSS_SS___LB_S_RB_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(0xffffffffLU));
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
			block.add(sem::store(0xffffffffLU, 0xfffffffeLU, 7));
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r)))));
			block.add(sem::cont());
		}
		else {
			if(((((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r)) == 15) || (((uint32_t)(arm_bit16(ARM_STMSS_SS___LB_S_RB_S_x_reglist_r, 15))) == 1)))
				block.add(sem::seti(_GPR(15), (ARM_STMSS_SS___LB_S_RB_S___IADDR + 8)));
			cnt = 0;
			ii = ((int32_t)(0));
gliss_STMSS_SS___LB_S_RB_S_10_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_STMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1))
					cnt = (cnt + 1);
				ii = (ii + ((int32_t)(1)));
goto gliss_STMSS_SS___LB_S_RB_S_10_;
			}
			block.add(sem::seti(0xfffffffeLU, 4));
			switch(ARM_STMSS_SS___LB_S_RB_S_x_adr_mode) {
			case 3:
				block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffeLU));
				block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffeLU));
				block.add(sem::seti(0xfffffffdLU, ((cnt * 4) - 4)));
				block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
				break;
			case 2:
				block.add(sem::seti(0xffffffffLU, (cnt * 4)));
				block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
				block.add(sem::set(0xfffffffdLU, 0xffffffffLU));
				break;
			case 1:
				block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r)))));
				block.add(sem::seti(0xfffffffdLU, (cnt * 4)));
				block.add(sem::add(0xfffffffdLU, 0xffffffffLU, 0xfffffffdLU));
				break;
			case 0:
				block.add(sem::seti(0xffffffffLU, ((cnt * 4) - 4)));
				block.add(sem::sub(0xffffffffLU, _GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xffffffffLU));
				block.add(sem::sub(0xfffffffdLU, 0xffffffffLU, 0xfffffffeLU));
				break;
			}
			ii = ((int32_t)(0));
			sem_rec_first = ((int32_t)(1));
gliss_STMSS_SS___LB_S_RB_S_11_:
			if((ii <= ((int32_t)(15)))) {
				if((((uint32_t)(arm_field16_generic(ARM_STMSS_SS___LB_S_RB_S_x_reglist_r, ii, ii, 1 ))) == 1)) {
					if((sem_rec_first == ((int32_t)(0))))
						block.add(sem::add(0xffffffffLU, 0xffffffffLU, 0xfffffffeLU));
					block.add(sem::store(_GPR(((uint32_t)(ii))), 0xffffffffLU, 7));
					sem_rec_first = ((int32_t)(0));
				}
				ii = (ii + ((int32_t)(1)));
goto gliss_STMSS_SS___LB_S_RB_S_11_;
			}
			if((((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STMSS_SS___LB_S_RB_S_x_rn_r))), 0xfffffffdLU));
		}
	}

};

static void otawa_sem_STREXHS_S__S___LT_S_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STREXDS_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STREXBS_S__S___LT_S_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STREXS_S__S___LT_S_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDREXHS_S___LT_S_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDREXDS_S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDREXBS_S___LT_S_RT__1(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDREXS_S___LT_S_RT__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRDS_S___LT_SS__S_IUSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSSH_S___LT_SS__SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rd_r)))));
			if(ARM_LDRSSH_S___LT_SS__SSSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r)) == 15) || (((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSH_S___LT_SS__SSSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rm_r)))));
		else
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rm_r)))));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r)))));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rd_r))), 0xfffffffeLU, 2));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__SSSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_LDRSSH_S___LT_SS__S_IUSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint8_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rd_r)))));
			if(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSH_S___LT_SS__S_IUSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setu)) == 0))
			__gtmp_0 = -arm_concat8(ARM_LDRSSH_S___LT_SS__S_IUSS_x_immh, ARM_LDRSSH_S___LT_SS__S_IUSS_x_imml, 4, 4);
		else
			__gtmp_0 = arm_concat8(ARM_LDRSSH_S___LT_SS__S_IUSS_x_immh, ARM_LDRSSH_S___LT_SS__S_IUSS_x_imml, 4, 4);
		block.add(sem::seti(0xfffffffeLU, ((uint32_t)(__gtmp_0))));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r))), 0xfffffffeLU));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rd_r))), 0xffffffffLU, 2));
		if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r))), 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSH_S___LT_SS__S_IUSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_LDRSSB_S___LT_SS__SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rd_r)))));
			if(ARM_LDRSSB_S___LT_SS__SSSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r)) == 15) || (((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSB_S___LT_SS__SSSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rm_r)))));
		else
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rm_r)))));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r)))));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rd_r))), 0xfffffffeLU, 1));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__SSSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_LDRSSB_S___LT_SS__S_IUSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint8_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rd_r)))));
			if(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSB_S___LT_SS__S_IUSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setu)) == 0))
			__gtmp_0 = -arm_concat8(ARM_LDRSSB_S___LT_SS__S_IUSS_x_immh, ARM_LDRSSB_S___LT_SS__S_IUSS_x_imml, 4, 4);
		else
			__gtmp_0 = arm_concat8(ARM_LDRSSB_S___LT_SS__S_IUSS_x_immh, ARM_LDRSSB_S___LT_SS__S_IUSS_x_imml, 4, 4);
		block.add(sem::seti(0xfffffffeLU, ((uint32_t)(__gtmp_0))));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r))), 0xfffffffeLU));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rd_r))), 0xffffffffLU, 1));
		if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r))), 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSB_S___LT_SS__S_IUSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_LDRSH_S___LT_SS__SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_LDRSH_S___LT_SS__SSSS_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDRSH_S___LT_SS__SSSS_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rd_r)))));
			if(ARM_LDRSH_S___LT_SS__SSSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rn_r)) == 15) || (((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_LDRSH_S___LT_SS__SSSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rm_r)))));
		else
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rm_r)))));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rn_r)))));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rd_r))), 0xfffffffeLU, 6));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__SSSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_LDRSH_S___LT_SS__S_IUSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint8_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rd_r)))));
			if(ARM_LDRSH_S___LT_SS__S_IUSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_LDRSH_S___LT_SS__S_IUSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_setu)) == 0))
			__gtmp_0 = -arm_concat8(ARM_LDRSH_S___LT_SS__S_IUSS_x_immh, ARM_LDRSH_S___LT_SS__S_IUSS_x_imml, 4, 4);
		else
			__gtmp_0 = arm_concat8(ARM_LDRSH_S___LT_SS__S_IUSS_x_immh, ARM_LDRSH_S___LT_SS__S_IUSS_x_imml, 4, 4);
		block.add(sem::seti(0xfffffffeLU, ((uint32_t)(__gtmp_0))));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r))), 0xfffffffeLU));
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rd_r))), 0xffffffffLU, 6));
		if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r))), 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSH_S___LT_SS__S_IUSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_STRHS_S___LT_SS__SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_STRHS_S___LT_SS__SSSS_x_cond_cond)))) == 15)) {
		if((!(((uint32_t)(((uint8_t)(ARM_STRHS_S___LT_SS__SSSS_x_cond_cond)))) == 14) && ARM_STRHS_S___LT_SS__SSSS_x_setw)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rn_r)) == 15) || (((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rd_r)) == 15)) || (((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rm_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_STRHS_S___LT_SS__SSSS___IADDR + 8)));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, _GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rm_r)))));
		else
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rm_r)))));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rn_r)))));
		block.add(sem::store(_GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rd_r))), 0xfffffffeLU, 6));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rn_r))), _GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STRHS_S___LT_SS__SSSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_STRHS_S___LT_SS__S_IUSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint8_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_cond_cond)))) == 15)) {
		if((!(((uint32_t)(((uint8_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_cond_cond)))) == 14) && ARM_STRHS_S___LT_SS__S_IUSS_x_setw)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r)) == 15) || (((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rd_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_STRHS_S___LT_SS__S_IUSS___IADDR + 8)));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_setu)) == 0))
			__gtmp_0 = -arm_concat8(ARM_STRHS_S___LT_SS__S_IUSS_x_immh, ARM_STRHS_S___LT_SS__S_IUSS_x_imml, 4, 4);
		else
			__gtmp_0 = arm_concat8(ARM_STRHS_S___LT_SS__S_IUSS_x_immh, ARM_STRHS_S___LT_SS__S_IUSS_x_imml, 4, 4);
		block.add(sem::seti(0xfffffffeLU, ((uint32_t)(__gtmp_0))));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r))), 0xfffffffeLU));
		block.add(sem::store(_GPR(((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rd_r))), 0xffffffffLU, 6));
		if((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r))), _GPR(((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r))), 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STRHS_S___LT_SS__S_IUSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_STRSSS_S___LT_SS__SS__S__IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond)))) == 15)) {
		if((!(((uint32_t)(((uint8_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond)))) == 14) && ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setw)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)) == 15) || (((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rd_r)) == 15)) || (((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_STRSSS_S___LT_SS__SS__S__IDSS___IADDR + 8)));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt))));
			switch(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, 0xffffffffLU));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)))));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setb)) == 1))
			__gtmp_0 = 5;
		else
			__gtmp_0 = 7;
		block.add(sem::store(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rd_r))), 0xfffffffeLU, __gtmp_0));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_LDRSSS_S___LT_SS__SS__S__IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r)))));
			if(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)) == 15) || (((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSS_S___LT_SS__SS__S__IDSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftAmt))));
			switch(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setu)) == 0))
			block.add(sem::neg(0xffffffffLU, 0xffffffffLU));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 1))
			block.add(sem::add(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xffffffffLU));
		else
			block.add(sem::set(0xfffffffeLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r)))));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setb)) == 1))
			__gtmp_0 = 5;
		else
			__gtmp_0 = 7;
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rd_r))), 0xfffffffeLU, __gtmp_0));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xffffffffLU));
		else {
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__SS__S__IDSS_x_rn_r))), 0xfffffffeLU));
		}
	}

};

static void otawa_sem_STRSSS_S___LT_SS__S_IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_1;
	uint32_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_cond_cond)))) == 15)) {
		if((!(((uint32_t)(((uint8_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_cond_cond)))) == 14) && ARM_STRSSS_S___LT_SS__S_IDSS_x_setw)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r)) == 15) || (((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_rd_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_STRSSS_S___LT_SS__S_IDSS___IADDR + 8)));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setu)) == 0))
			__gtmp_0 = -((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_offset12_n));
		else
			__gtmp_0 = ((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_offset12_n));
		block.add(sem::seti(0xfffffffeLU, __gtmp_0));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r))), 0xfffffffeLU));
		if(ARM_STRSSS_S___LT_SS__S_IDSS_x_setb)
			__gtmp_1 = 5;
		else
			__gtmp_1 = 7;
		block.add(sem::store(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_rd_r))), 0xffffffffLU, __gtmp_1));
		if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r))), 0xffffffffLU, 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_STRSSS_S___LT_SS__S_IDSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_LDRSSS_S___LT_SS__S_IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_1;
	uint32_t __gtmp_0;
	if(!(((uint32_t)(((uint8_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r)))));
			if(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setw)
				block.add(sem::scratch(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_LDRSSS_S___LT_SS__S_IDSS___IADDR + 8)));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setu)) == 0))
			__gtmp_0 = -((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_offset12_n));
		else
			__gtmp_0 = ((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_offset12_n));
		block.add(sem::seti(0xfffffffeLU, __gtmp_0));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r)))));
		else
			block.add(sem::add(0xffffffffLU, _GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r))), 0xfffffffeLU));
		if(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setb)
			__gtmp_1 = 5;
		else
			__gtmp_1 = 7;
		block.add(sem::load(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_rd_r))), 0xffffffffLU, __gtmp_1));
		if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setpre)) == 0))
			block.add(sem::add(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r))), 0xffffffffLU, 0xfffffffeLU));
		else {
			if((((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_setw)) == 1))
				block.add(sem::set(_GPR(((uint32_t)(ARM_LDRSSS_S___LT_SS__S_IDSS_x_rn_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_BSS__40(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_0;
	if(!(((uint32_t)(ARM_BSS__40_x_cond_cond)) == 15)) {
		block.add(sem::seti(0xffffffffLU, ((ARM_BSS__40___IADDR + 8) + arm_concat32(((int32_t)(ARM_BSS__40_x_signed_immed_24_n)), 0, 30, 2))));
		if((((uint32_t)(ARM_BSS__40_x_setl)) == 1))
			block.add(sem::seti(_GPR(14), (ARM_BSS__40___IADDR + 4)));
		if((((uint32_t)(ARM_BSS__40_x_cond_cond)) == 14))
			block.add(sem::branch(0xffffffffLU));
		else {
			switch(ARM_BSS__40_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, _CPSR(), 1));
			block.add(sem::branch(0xffffffffLU));
		}
	}

};

static void otawa_sem_BLXS_S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BXS_S_0(arm_inst_t *inst, otawa::sem::Block& block) {
	uint32_t __gtmp_1;
	uint32_t __gtmp_0;
	if((((uint32_t)(ARM_BXS_S_0_x_rd_r)) == 15))
		block.add(sem::seti(_GPR(15), (ARM_BXS_S_0___IADDR + 8)));
	if(!(((uint32_t)(((uint8_t)(ARM_BXS_S_0_x_cond_cond)))) == 15)) {
		if((((uint32_t)(((uint8_t)(ARM_BXS_S_0_x_cond_cond)))) == 14))
			block.add(sem::branch(_GPR(((uint32_t)(ARM_BXS_S_0_x_rd_r)))));
		else {
			switch(ARM_BXS_S_0_x_cond_cond) {
			case 0:
				__gtmp_0 = sem::EQ;
				break;
			case 1:
				__gtmp_0 = sem::NE;
				break;
			case 2:
				__gtmp_0 = sem::UGE;
				break;
			case 3:
				__gtmp_0 = sem::ULT;
				break;
			case 8:
				__gtmp_0 = sem::UGT;
				break;
			case 9:
				__gtmp_0 = sem::ULE;
				break;
			case 10:
				__gtmp_0 = sem::GE;
				break;
			case 11:
				__gtmp_0 = sem::LT;
				break;
			case 12:
				__gtmp_0 = sem::GT;
				break;
			case 13:
				__gtmp_0 = sem::LE;
				break;
			default:
				__gtmp_0 = sem::ANY_COND;
			}
			switch(ARM_BXS_S_0_x_cond_cond) {
			case 0:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::EQ;
				break;
			case 1:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::NE;
				break;
			case 2:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::UGE;
				break;
			case 3:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::ULT;
				break;
			case 8:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::UGT;
				break;
			case 9:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::ULE;
				break;
			case 10:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::GE;
				break;
			case 11:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::LT;
				break;
			case 12:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::GT;
				break;
			case 13:
				switch(ARM_BXS_S_0_x_cond_cond) {
				case 0:
					__gtmp_0 = sem::EQ;
					break;
				case 1:
					__gtmp_0 = sem::NE;
					break;
				case 2:
					__gtmp_0 = sem::UGE;
					break;
				case 3:
					__gtmp_0 = sem::ULT;
					break;
				case 8:
					__gtmp_0 = sem::UGT;
					break;
				case 9:
					__gtmp_0 = sem::ULE;
					break;
				case 10:
					__gtmp_0 = sem::GE;
					break;
				case 11:
					__gtmp_0 = sem::LT;
					break;
				case 12:
					__gtmp_0 = sem::GT;
					break;
				case 13:
					__gtmp_0 = sem::LE;
					break;
				default:
					__gtmp_0 = sem::ANY_COND;
				}
				__gtmp_1 = sem::LE;
				break;
			default:
				__gtmp_1 = sem::ANY_COND;
			}
			block.add(sem::_if(__gtmp_0, __gtmp_1, 1));
			block.add(sem::branch(_GPR(((uint32_t)(ARM_BXS_S_0_x_rd_r)))));
		}
	}

};

static void otawa_sem_MOVS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MOVTS_S___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_TSTS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_TSTS_S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_TSTS_S___ID_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if((((uint32_t)(ARM_TSTS_S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_TSTS_S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_TSTS_S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_and(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S___ID_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TSTS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_TSTS_S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_TSTS_S__S__S_S_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_TSTS_S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_TSTS_S__S__S_S___IADDR + 8)));
		switch(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_and(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S__S_S_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TSTS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_TSTS_S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_TSTS_S__S_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_TSTS_S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_TSTS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_TSTS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_and(0xffffffffLU, _GPR(((uint32_t)(ARM_TSTS_S__S_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TEQS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_TEQS_S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_TEQS_S___ID_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if((((uint32_t)(ARM_TEQS_S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_TEQS_S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_TEQS_S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_xor(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S___ID_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TEQS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_TEQS_S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_TEQS_S__S__S_S_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_TEQS_S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_TEQS_S__S__S_S___IADDR + 8)));
		switch(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_xor(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S__S_S_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_TEQS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_TEQS_S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_TEQS_S__S_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_TEQS_S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_TEQS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_TEQS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_xor(0xffffffffLU, _GPR(((uint32_t)(ARM_TEQS_S__S_x_rn_r))), 0xffffffffLU));
		block.add(sem::seti(0xfffffffeLU, 0));
		block.add(sem::cmp(_CPSR(), 0xffffffffLU, 0xfffffffeLU));
	}

};

static void otawa_sem_SUBSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_SUBSS_S__S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_SUBSS_S__S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SUBSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_SUBSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_SUBSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_SUBSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::sub(_GPR(((uint32_t)(ARM_SUBSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_SUBSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_SUBSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_SUBSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_SUBSS_S__S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_SUBSS_S__S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_SUBSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::sub(_GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_SUBSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_SUBSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_SUBSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_SUBSS_S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_SUBSS_S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_SUBSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_SUBSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::sub(_GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_SUBSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_SUBSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_SBCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SBCSS_S__S___ID_x_rd_r)))));
	if(ARM_SBCSS_S__S___ID_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_SBCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(0xffffffffLU));
		break;
	case 2:
		block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 1:
		block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 0:
		block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SBCSS_S__S__S__S_S_x_rd_r)))));
	if(ARM_SBCSS_S__S__S__S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_SBCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_r_r)))));
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt))));
		switch(ARM_SBCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		}
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_SBCSS_S__S__S_x_rd_r)))));
	if(ARM_SBCSS_S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSCSS_S__S___ID_x_rd_r)))));
	if(ARM_RSCSS_S__S___ID_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(0xffffffffLU));
		break;
	case 2:
		block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 1:
		block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 0:
		block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSCSS_S__S__S__S_S_x_rd_r)))));
	if(ARM_RSCSS_S__S__S__S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_r_r)))));
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt))));
		switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		}
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSCSS_S__S__S_x_rd_r)))));
	if(ARM_RSCSS_S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_RSBSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_RSBSS_S__S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_RSBSS_S__S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSBSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_RSBSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_RSBSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_RSBSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::sub(_GPR(((uint32_t)(ARM_RSBSS_S__S___ID_x_rd_r))), 0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S___ID_x_rn_r)))));
		if(ARM_RSBSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_RSBSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_RSBSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_RSBSS_S__S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_RSBSS_S__S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_RSBSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::sub(_GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rn_r)))));
		if(ARM_RSBSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_RSBSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_RSBSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_RSBSS_S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_RSBSS_S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_RSBSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_RSBSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::sub(_GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_rd_r))), 0xffffffffLU, _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_rn_r)))));
		if(ARM_RSBSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_RSBSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ORRSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ORRSS_S__S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ORRSS_S__S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ORRSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_ORRSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_ORRSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ORRSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_or(_GPR(((uint32_t)(ARM_ORRSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_ORRSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ORRSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ORRSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ORRSS_S__S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ORRSS_S__S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ORRSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_or(_GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_ORRSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ORRSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ORRSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ORRSS_S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ORRSS_S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ORRSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ORRSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_ORRSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_or(_GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_ORRSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ORRSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MVNSS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_MVNSS_S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_MVNSS_S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MVNSS_S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		block.add(sem::seti(_GPR(((uint32_t)(ARM_MVNSS_S___ID_x_rd_r))), ~arm_rotate_right32(32, ((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MVNSS_S___ID_x_shifter_operand_rotate)) << 1))));
		if(ARM_MVNSS_S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MVNSS_S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MVNSS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_MVNSS_S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_MVNSS_S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_MVNSS_S__S__S_S___IADDR + 8)));
		switch(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_not(_GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_rd_r))), 0xffffffffLU));
		if(ARM_MVNSS_S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MVNSS_S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MVNSS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_MVNSS_S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_MVNSS_S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MVNSS_S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_MVNSS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_MVNSS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_not(_GPR(((uint32_t)(ARM_MVNSS_S__S_x_rd_r))), 0xffffffffLU));
		if(ARM_MVNSS_S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MVNSS_S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MOVSS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_MOVSS_S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_MOVSS_S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MOVSS_S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		block.add(sem::seti(_GPR(((uint32_t)(ARM_MOVSS_S___ID_x_rd_r))), arm_rotate_right32(32, ((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_MOVSS_S___ID_x_shifter_operand_rotate)) << 1))));
		if(ARM_MOVSS_S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MOVSS_S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MOVSS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_MOVSS_S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_MOVSS_S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_MOVSS_S__S__S_S___IADDR + 8)));
		switch(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::set(_GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_rd_r))), 0xffffffffLU));
		if(ARM_MOVSS_S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MOVSS_S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_MOVSS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_MOVSS_S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_MOVSS_S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_MOVSS_S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_MOVSS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_MOVSS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::set(_GPR(((uint32_t)(ARM_MOVSS_S__S_x_rd_r))), 0xffffffffLU));
		if(ARM_MOVSS_S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_MOVSS_S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_EORSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_EORSS_S__S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_EORSS_S__S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_EORSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_EORSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_EORSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_EORSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_xor(_GPR(((uint32_t)(ARM_EORSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_EORSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_EORSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_EORSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_EORSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_EORSS_S__S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_EORSS_S__S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_EORSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_xor(_GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_EORSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_EORSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_EORSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_EORSS_S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_EORSS_S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_EORSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_EORSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_EORSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_EORSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_xor(_GPR(((uint32_t)(ARM_EORSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_EORSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_EORSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_CMPS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_CMPS_S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_CMPS_S___ID_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if((((uint32_t)(ARM_CMPS_S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_CMPS_S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMPS_S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_S___ID_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMPS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_CMPS_S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_CMPS_S__S__S_S_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_CMPS_S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_CMPS_S__S__S_S___IADDR + 8)));
		switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_S__S__S_S_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMPS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_CMPS_S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_CMPS_S__S_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_CMPS_S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_CMPS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMPS_S__S_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMNS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_CMNS_S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_CMNS_S___ID_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if((((uint32_t)(ARM_CMNS_S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_CMNS_S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, -arm_rotate_right32(32, ((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_CMNS_S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMNS_S___ID_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMNS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_CMNS_S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_CMNS_S__S__S_S_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_CMNS_S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_CMNS_S__S__S_S___IADDR + 8)));
		switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::neg(0xffffffffLU, 0xffffffffLU));
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMNS_S__S__S_S_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_CMNS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_CMNS_S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_CMNS_S__S_x_cond_cond)))) == 14))
			block.add(sem::cont());
		if(((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_CMNS_S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_CMNS_S__S___IADDR + 8)));
		if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::neg(0xffffffffLU, 0xffffffffLU));
		block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_CMNS_S__S_x_rn_r))), 0xffffffffLU));
	}

};

static void otawa_sem_BICSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_BICSS_S__S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_BICSS_S__S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_BICSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_BICSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_BICSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, ~arm_rotate_right32(32, ((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_BICSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_and(_GPR(((uint32_t)(ARM_BICSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_BICSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_BICSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_BICSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_BICSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_BICSS_S__S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_BICSS_S__S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_BICSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_not(0xffffffffLU, 0xffffffffLU));
		block.add(sem::_and(_GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_BICSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_BICSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_BICSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_BICSS_S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_BICSS_S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_BICSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_BICSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_BICSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_BICSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_not(0xffffffffLU, 0xffffffffLU));
		block.add(sem::_and(_GPR(((uint32_t)(ARM_BICSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_BICSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_BICSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ANDSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ANDSS_S__S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ANDSS_S__S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ANDSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_ANDSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_ANDSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ANDSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::_and(_GPR(((uint32_t)(ARM_ANDSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_ANDSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ANDSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ANDSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ANDSS_S__S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ANDSS_S__S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ANDSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::_and(_GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_ANDSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ANDSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ANDSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ANDSS_S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ANDSS_S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ANDSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ANDSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_ANDSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::_and(_GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_ANDSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ANDSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ADDSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ADDSS_S__S__S__S_S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ADDSS_S__S__S__S_S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ADDSS_S__S__S__S_S___IADDR + 8)));
		switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
			break;
		}
		block.add(sem::add(_GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rd_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rn_r))), 0xffffffffLU));
		if(ARM_ADDSS_S__S__S__S_S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ADDSS_S__S__S__S_S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ADDSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ADDSS_S__S__S_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ADDSS_S__S__S_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_rd_r)))));
			block.add(sem::cont());
		}
		if(((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r)) == 15) || (((uint32_t)(ARM_ADDSS_S__S__S_x_rn_r)) == 15)))
			block.add(sem::seti(_GPR(15), (ARM_ADDSS_S__S__S___IADDR + 8)));
		if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
			block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r)))));
		else {
			block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt))));
			switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
			case 3:
				block.add(sem::scratch(0xffffffffLU));
				if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
					block.add(sem::scratch(_CPSR()));
				break;
			case 2:
				block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 1:
				block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			case 0:
				block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
				break;
			}
		}
		block.add(sem::add(_GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_rd_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_rn_r))), 0xffffffffLU));
		if(ARM_ADDSS_S__S__S_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ADDSS_S__S__S_x_rd_r))), 0xffffffffLU));
		}
	}

};

static void otawa_sem_ADCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADCSS_S__S___ID_x_rd_r)))));
	if(ARM_ADCSS_S__S___ID_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(0xffffffffLU));
		break;
	case 2:
		block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 1:
		block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	case 0:
		block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r))), _GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)))));
		break;
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADCSS_S__S__S__S_S_x_rd_r)))));
	if(ARM_ADCSS_S__S__S__S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::set(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_r_r)))));
	else {
		block.add(sem::seti(0xffffffffLU, ((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt))));
		switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(0xffffffffLU));
			if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 1:
			block.add(sem::shr(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		case 0:
			block.add(sem::shl(0xffffffffLU, _GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_r_r))), 0xffffffffLU));
			break;
		}
	}
	block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADCSS_S__S__S_x_rd_r)))));
	if(ARM_ADCSS_S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADDSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	if(!(((uint32_t)(((uint8_t)(ARM_ADDSS_S__S___ID_x_cond_cond)))) == 15)) {
		if(!(((uint32_t)(((uint8_t)(ARM_ADDSS_S__S___ID_x_cond_cond)))) == 14)) {
			block.add(sem::scratch(_GPR(((uint32_t)(ARM_ADDSS_S__S___ID_x_rd_r)))));
			block.add(sem::cont());
		}
		if((((uint32_t)(ARM_ADDSS_S__S___ID_x_rn_r)) == 15))
			block.add(sem::seti(_GPR(15), (ARM_ADDSS_S__S___ID___IADDR + 8)));
		block.add(sem::seti(0xffffffffLU, arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
		block.add(sem::add(_GPR(((uint32_t)(ARM_ADDSS_S__S___ID_x_rd_r))), _GPR(((uint32_t)(ARM_ADDSS_S__S___ID_x_rn_r))), 0xffffffffLU));
		if(ARM_ADDSS_S__S___ID_x_sets_set) {
			block.add(sem::seti(0xffffffffLU, 0));
			block.add(sem::cmp(_CPSR(), _GPR(((uint32_t)(ARM_ADDSS_S__S___ID_x_rd_r))), 0xffffffffLU));
		}
	}

};




/*** function table ***/
static sem_fun_t sem_funs[] = {
	otawa_sem_UNKNOWN,
	otawa_sem_UXTAHS_S__S__SS,
	otawa_sem_UXTAB16S_S__S__SS,
	otawa_sem_UXTABS_S__S__SS,
	otawa_sem_USUB8S_S__S__S,
	otawa_sem_USUB16S_S__S__S,
	otawa_sem_USAXS_S__S__S,
	otawa_sem_USATS_S___ID__SS,
	otawa_sem_USADA8S_S__S__S__S,
	otawa_sem_UQSUB8S_S__S__S,
	otawa_sem_UQSUB16S_S__S__S,
	otawa_sem_UQSAXS_S__S__S,
	otawa_sem_UQASXS_S__S__S,
	otawa_sem_UQADD8S_S__S__S,
	otawa_sem_UQADD16S_S__S__S,
	otawa_sem_UMULLS_S__S__S__S,
	otawa_sem_UMLALS_S__S__S__S,
	otawa_sem_UMAALS_S__S__S__S,
	otawa_sem_UHSUB8S_S__S__S,
	otawa_sem_UHSUB16S_S__S__S,
	otawa_sem_UHSAXS_S__S__S,
	otawa_sem_UHASXS_S__S__S,
	otawa_sem_UHADD8S_S__S__S,
	otawa_sem_UHADD16S_S__S__S,
	otawa_sem_UDIVS_S__S__S,
	otawa_sem_UBFXS_S__S___ID___ID,
	otawa_sem_UASXS_S__S__S,
	otawa_sem_UADD8S_S__S__S,
	otawa_sem_UADD16S_S__S__S,
	otawa_sem_SXTAHS_S__S__SS,
	otawa_sem_SXTAB16S_S__S__SS,
	otawa_sem_SXTABS_S__S__SS,
	otawa_sem_SUBSS_W_S__S__SS,
	otawa_sem_SUBWS_S__S___ID_,
	otawa_sem_SUBSS_W_S__S___IU,
	otawa_sem_SSUB8S_S__S__S,
	otawa_sem_SSUB16S_S__S__S,
	otawa_sem_SSAXS_S__S__S,
	otawa_sem_SSATS_S___ID__SS,
	otawa_sem_SMULLS_S__S__S__S,
	otawa_sem_SMMLSSS_S__S__S__S,
	otawa_sem_SMMLASS_S__S__S__S,
	otawa_sem_SMLSLDSS_S__S__S__S,
	otawa_sem_SMLSDSS_S__S__S__S,
	otawa_sem_SMLAWSS_S__S__S__S,
	otawa_sem_SMLALDSS_S__S__S__S,
	otawa_sem_SMLALSSS_S__S__S__S,
	otawa_sem_SMLALS_S__S__S__S,
	otawa_sem_SMLADSS_S__S__S__S,
	otawa_sem_SMLASSS_S__S__S__S,
	otawa_sem_SHSUB8S_S__S__S,
	otawa_sem_SHSUB16S_S__S__S,
	otawa_sem_SHSAXS_S__S__S,
	otawa_sem_SHASXS_S__S__S,
	otawa_sem_SHADD8S_S__S__S,
	otawa_sem_SHADD16S_S__S__S,
	otawa_sem_SELS_S__S__S,
	otawa_sem_SDIVS_S__S__S,
	otawa_sem_SBFXS_S__S___ID___ID,
	otawa_sem_SBCSS_W_S__S__SS,
	otawa_sem_SBCSS_W_S__S___IU,
	otawa_sem_SASXS_S__S__S,
	otawa_sem_SADD8S_S__S__S,
	otawa_sem_SADD16S_S__S__S,
	otawa_sem_RSBSS_S__S__SS,
	otawa_sem_RORSS_W_S__S__S,
	otawa_sem_REVSHS_W_S__S,
	otawa_sem_REV16S_W_S__S,
	otawa_sem_REVS_W_S__S,
	otawa_sem_RBITS_S__S,
	otawa_sem_QSUB8S_S__S__S,
	otawa_sem_QSUB16S_S__S__S,
	otawa_sem_QSUBS_S__S__S,
	otawa_sem_QSAXS_S__S__S,
	otawa_sem_QDSUBS_S__S__S,
	otawa_sem_QDADDS_S__S__S,
	otawa_sem_QASXS_S__S__S,
	otawa_sem_QADD8S_S__S__S,
	otawa_sem_QADD16S_S__S__S,
	otawa_sem_QADDS_S__S__S,
	otawa_sem_PKHBTS_S__S__SS,
	otawa_sem_ORNSS_S__S__SS,
	otawa_sem_ORNSS_S__S___IU,
	otawa_sem_MRRCSS_D__D__S__S__CRD,
	otawa_sem_MRCSS_D__D__S__CRD__CRD___LB_D_RB_,
	otawa_sem_MLSS_S__S__S__S,
	otawa_sem_MLAS_S__S__S__S,
	otawa_sem_MCRRSS_D__D__S__S__CRD,
	otawa_sem_MCRSS_D__D__S__CRD__CRD___LB_D_RB_,
	otawa_sem_LSRSS_W_S__S__S,
	otawa_sem_LDMDBS_SS___LB_S_RB_,
	otawa_sem_EORSS_W_S__S__SS,
	otawa_sem_EORSS_W_S__S___IU,
	otawa_sem_CLZS_S__S,
	otawa_sem_CDPSS_D__D__CRD__CRD__CRD___LB_D_RB_,
	otawa_sem_BICSS_W_S__S__SS,
	otawa_sem_BICSS_W_S__S___IU,
	otawa_sem_BFIS_S__S___ID___ID,
	otawa_sem_BS_W_08X,
	otawa_sem_BS_W_08X_0,
	otawa_sem_MOVTS_S___ID,
	otawa_sem_ORRS_W_S__S__SS,
	otawa_sem_MOVWS_S___ID,
	otawa_sem_ORRSS_W_S__S___IU,
	otawa_sem_ASRSS_W_S__S__S,
	otawa_sem_ANDSS_W_S__S__SS,
	otawa_sem_ANDSS_W_S__S___IU,
	otawa_sem_ADDSS_W_S__S__SS,
	otawa_sem_ADDWS_S__S___ID_,
	otawa_sem_ADDSS_W_S__S___IU,
	otawa_sem_ADCSS_W_S__S__SS,
	otawa_sem_ADCSS_W_S__S___IU,
	otawa_sem_PLIS__LT_S__S_RT_,
	otawa_sem_PLIS__LT_PC_RT_,
	otawa_sem_PLIS__LT_S_RT_,
	otawa_sem_PLIS__LT_S_RT__0,
	otawa_sem_PLDSS__LT_S__S_RT_,
	otawa_sem_PLDSS__LT_S_RT_,
	otawa_sem_PLDSS__LT_S_RT__0,
	otawa_sem_RSBSS_W_S__S___ID,
	otawa_sem_LSLSS_W_S__S__S,
	otawa_sem_LDRDS_S__S___LT_SS,
	otawa_sem_STRDS_S__S___LT_SS,
	otawa_sem_STREXHS_S__S___LT_S_RT_,
	otawa_sem_STREXBS_S__S__S___LT_S_RT_,
	otawa_sem_STREXBS_S__S___LT_S_RT_,
	otawa_sem_STREXS_S__S___LT_S_RT_,
	otawa_sem_LDREXHS_S___LT_S_RT_,
	otawa_sem_LDREXBS_S___LT_S_RT_,
	otawa_sem_LDREXBS_S___LT_S_RT__0,
	otawa_sem_LDREXS_S___LT_S_RT_,
	otawa_sem_STMSS_SS___LB_SSSSSSSSSSSSSSS_RB_,
	otawa_sem_LDRSHS_S___LT_S_RT____IS0XX,
	otawa_sem_LDRSHS_S___LT_S___I0XX_RT_,
	otawa_sem_LDRSBS_S___LT_PC_RT_,
	otawa_sem_LDRSBS_S___LT_S_RT____IS0XX,
	otawa_sem_LDRSBS_S___LT_S___I0XX_RT_,
	otawa_sem_LDRBS_S___LT_S_RT____IS0XX,
	otawa_sem_LDRBS_W_S___LT_S___I0XX_RT_,
	otawa_sem_STRBS_S___LT_SS,
	otawa_sem_STRBS_W_S___LT_S___I0XX_RT_,
	otawa_sem_STRS_S___LT_S_RT____IS0XX,
	otawa_sem_STRS_W_S___LT_S___I0XX_RT_,
	otawa_sem_LDMSS_W_SS___LB_SSSSSSSSSSSSSSS_RB_,
	otawa_sem_STRHS_S___LT_S_RT____IS0XX,
	otawa_sem_STRHS_W_S___LT_S_RT_,
	otawa_sem_LDRHS_S___LT_S_RT____IS0XX,
	otawa_sem_LDRHS_W_S___LT_S_RT_,
	otawa_sem_LDRSHS_W_S___LT_S__S_RT_,
	otawa_sem_STRHS_W_S___LT_S__S_RT_,
	otawa_sem_LDRHS_W_S___LT_S__S_RT_,
	otawa_sem_LDRS_S___LT_S_RT____IS0XX,
	otawa_sem_LDRS_W_S___LT_S___I0XX_RT_,
	otawa_sem_LDRSHTS_S___LT_S_RT_,
	otawa_sem_LDRSBTS_S___LT_S_RT_,
	otawa_sem_STRTS_S___LT_S_RT_,
	otawa_sem_LDRTS_S___LT_S_RT_,
	otawa_sem_STRHTS_S___LT_S_RT_,
	otawa_sem_LDRHTS_S___LT_S_RT_,
	otawa_sem_STRBTS_S___LT_S_RT_,
	otawa_sem_LDRBTS_S___LT_S_RT_,
	otawa_sem_LDRSBS_W_S___LT_S__S_RT_,
	otawa_sem_STRBS_W_S___LT_S__S_RT_,
	otawa_sem_LDRBS_W_S___LT_S__S_RT_,
	otawa_sem_STRS_W_S___LT_S__S_RT_,
	otawa_sem_LDRS_W_S___LT_S__S_RT_,
	otawa_sem_LDC2SS_D__D___LT_RD_RT___D,
	otawa_sem_LDC2SS_D__D___LT_RD_RT____ISD,
	otawa_sem_LDC2SS_D__D___LT_RD___ISD_RT__21,
	otawa_sem_LDC2SS_D__D___LT_RD___ISD_RT_,
	otawa_sem_LDCSS_D__D___LT_RD_RT___D,
	otawa_sem_LDCSS_D__D___LT_RD_RT____ISD,
	otawa_sem_LDCSS_D__D___LT_RD___ISD_RT__21,
	otawa_sem_LDCSS_D__D___LT_RD___ISD_RT_,
	otawa_sem_STC2SS_D__D___LT_RD_RT___D,
	otawa_sem_STC2SS_D__D___LT_RD_RT____ISD,
	otawa_sem_STC2SS_D__D___LT_RD___ISD_RT__21,
	otawa_sem_STC2SS_D__D___LT_RD___ISD_RT_,
	otawa_sem_STCSS_D__D___LT_RD_RT___D,
	otawa_sem_STCSS_D__D___LT_RD_RT____ISD,
	otawa_sem_STCSS_D__D___LT_RD___ISD_RT__21,
	otawa_sem_STCSS_D__D___LT_RD___ISD_RT_,
	otawa_sem_BLXS_0X08X,
	otawa_sem_TBBS__LT_S__S_RT_,
	otawa_sem_BLS_0XX,
	otawa_sem_VSS_F64_DD__DD__DD,
	otawa_sem_VSS_F32_SD__SD__SD,
	otawa_sem_VSS_F32_QD__QD__QD,
	otawa_sem_VSS_F32_DD__DD__DD,
	otawa_sem_VPOPS__LB_SD_RB_,
	otawa_sem_VPOPS__LB_DD_RB_,
	otawa_sem_VADDS_F64_DD__DD__DD,
	otawa_sem_VADDS_F32_SD__SD__SD,
	otawa_sem_VADDS_F32_QD__QD__QD,
	otawa_sem_VADDS_F32_DD__DD__DD,
	otawa_sem_VCVTS_F64_S_DD__SD,
	otawa_sem_VCVTSS_U32_F64_SD__DD,
	otawa_sem_VCVTS_F32_S_SD__SD,
	otawa_sem_VPUSHS__LB_SD_RB_,
	otawa_sem_VPUSHS__LB_DD_RB_,
	otawa_sem_VMULS_F64_DD__DD__DD,
	otawa_sem_VMULS_F32_SD__SD__SD,
	otawa_sem_VMULS_F32_QD__QD__QD,
	otawa_sem_VMULS_F32_DD__DD__DD,
	otawa_sem_VMRSS_S__FPSCR,
	otawa_sem_VSTRS_SD___LT_S___ISD_RT_,
	otawa_sem_VSTRS_DD___LT_S___ISD_RT_,
	otawa_sem_VLDRS_DD___LT_S___ISD_RT_,
	otawa_sem_VLDRS_DD___LT_S___ISD_RT__0,
	otawa_sem_VDIVS_F64_DD__DD__DD,
	otawa_sem_VDIVS_F32_SD__SD__SD,
	otawa_sem_VSUBS_F64_DD__DD__DD,
	otawa_sem_VSUBS_F32_SD__SD__SD,
	otawa_sem_VMOVS_DD__S__S,
	otawa_sem_VMOVS_SD__S,
	otawa_sem_VMOVS_F64_DD__DD,
	otawa_sem_VMOVS_F32_SD__SD,
	otawa_sem_VMOVS_F64_DD___ID,
	otawa_sem_VMOVS_F32_SD___ID,
	otawa_sem_UXTHS_RD__RD,
	otawa_sem_UXTBS_RD__RD,
	otawa_sem_YIELDS,
	otawa_sem_MOVS_S__S,
	otawa_sem_MOVS_RD___ID,
	otawa_sem_TSTS_RD__RD,
	otawa_sem_SXTHS_RD__RD,
	otawa_sem_SXTBS_RD__RD,
	otawa_sem_SUBS_RD__RD__RD,
	otawa_sem_SUBS_SP___ID,
	otawa_sem_SUBS_RD___ID,
	otawa_sem_SUBS_RD__RD___ID,
	otawa_sem_STRHS_RD___LT_RD__RD__RT_,
	otawa_sem_STRHS_RD___LT_RD___I0XX_RT_,
	otawa_sem_STRBS_RD___LT_RD__RD_RT_,
	otawa_sem_STRBS_RD___LT_RD___ID_RT_,
	otawa_sem_STRS_RD___LT_SP___ID_RT_,
	otawa_sem_STRS_RD___LT_RD__RD_RT_,
	otawa_sem_STRS_RD___LT_RD___I0XX_RT_,
	otawa_sem_STMIAS_RD_21___LB_S_RB_,
	otawa_sem_SBCS_RD__RD,
	otawa_sem_RORS_RD__RD,
	otawa_sem_REVSHS_RD__RD,
	otawa_sem_REV16S_RD__RD,
	otawa_sem_REVS_RD__RD,
	otawa_sem_PUSHS__LB_SS_RB_,
	otawa_sem_PUSHS__LB_SS_RB__0,
	otawa_sem_POPS__LB_SS_RB_,
	otawa_sem_POPS__LB_SS_RB__0,
	otawa_sem_ORRS_RD__RD,
	otawa_sem_RSBS_RD__RD___I0,
	otawa_sem_MVNS_RD__RD,
	otawa_sem_MULS_RD__RD,
	otawa_sem_LSRS_RD__RD,
	otawa_sem_LSRS_RD__RD___ID,
	otawa_sem_LSLS_RD__RD,
	otawa_sem_LSLS_RD__RD___ID,
	otawa_sem_LDRSHS_RD___LT_RD__RD_RT_,
	otawa_sem_LDRSBS_RD___LT_RD__RD_RT_,
	otawa_sem_LDRHS_RD___LT_RD__RD_RT_,
	otawa_sem_LDRHS_RD___LT_RD___I0XX_RT_,
	otawa_sem_LDRBS_RD___LT_RD__RD_RT_,
	otawa_sem_LDRBS_RD___LT_RD___ID_RT_,
	otawa_sem_LDRS_RD___LT_SP___I0XX_RT_,
	otawa_sem_LDRS_RD___LT_PC___I0XX_RT_,
	otawa_sem_LDRS_RD___LT_RD__RD_RT_,
	otawa_sem_LDRS_RD___LT_RD___I0XX_RT_,
	otawa_sem_LDMIAS_RD___LB_S_RB_,
	otawa_sem_EORS_RD__RD,
	otawa_sem_CMPS_RD__S,
	otawa_sem_CMPS_RD__RD,
	otawa_sem_CMPS_RD___ID,
	otawa_sem_CMNS_RD__RD,
	otawa_sem_CBZS_RD__D,
	otawa_sem_BXS_S,
	otawa_sem_BLXS_S,
	otawa_sem_BKPT__ID,
	otawa_sem_BICS_RD__RD,
	otawa_sem_BS_N__40,
	otawa_sem_S_N_08X,
	otawa_sem_ASRS_RD__RD,
	otawa_sem_ASRS_RD__RD___ID,
	otawa_sem_ANDS_RD__RD,
	otawa_sem_ADDS_S__S,
	otawa_sem_ADDS_RD__RD__RD,
	otawa_sem_ADDS_SP__SP___ID,
	otawa_sem_ADDS_RD__SP___ID,
	otawa_sem_ADDS_RD__PC___ID,
	otawa_sem_ADDS_RD___ID,
	otawa_sem_ADDS_RD__RD___ID,
	otawa_sem_ADCS_RD__RD,
	otawa_sem_MRCS_D__D__S__CRD__CRD__D,
	otawa_sem_LDCSSS_D__D___LT_RD_RT___D,
	otawa_sem_LDCSSS_D__D___LT_RD_RT____ISD,
	otawa_sem_LDCSSS_D__D___LT_RD___ISD_RT__21,
	otawa_sem_LDCSSS_D__D___LT_RD___ISD_RT_,
	otawa_sem_STCSSS_D__D___LT_RD_RT___D,
	otawa_sem_STCSSS_D__D___LT_RD_RT____ISD,
	otawa_sem_STCSSS_D__D___LT_RD___ISD_RT__21,
	otawa_sem_STCSSS_D__D___LT_RD___ISD_RT_,
	otawa_sem_VSTRS_SD___LT_S___ISD_RT__0,
	otawa_sem_VSTRS_DD___LT_S___ISD_RT__0,
	otawa_sem_VSTMSSS_SS___LB_S_RB_,
	otawa_sem_VSTMSSS_SS___LB_S_RB__0,
	otawa_sem_VSTMSSS_SS___LB_S_RB__1,
	otawa_sem_VSTMSSS_SS___LB_S_RB__2,
	otawa_sem_VMULS_F64_DD__DD__DD_0,
	otawa_sem_VMULS_F32_SD__SD__SD_0,
	otawa_sem_VMUL_F32_QD__QD__QD,
	otawa_sem_VMUL_F32_DD__DD__DD,
	otawa_sem_VMOVS_DD__S__S_0,
	otawa_sem_VMOVS_SD__S_0,
	otawa_sem_VMOVS_F64_DD__DD_0,
	otawa_sem_VMOVS_F32_SD__SD_0,
	otawa_sem_VMOVS_F64_DD___ID_0,
	otawa_sem_VMOVS_F32_SD___ID_0,
	otawa_sem_VSS_F64_DD__DD__DD_0,
	otawa_sem_VSS_F32_SD__SD__SD_0,
	otawa_sem_VS_F32_QD__QD__QD,
	otawa_sem_VS_F32_DD__DD__DD,
	otawa_sem_VLDRS_DD___LT_S___ISD_RT__1,
	otawa_sem_VLDRS_DD___LT_S___ISD_RT__2,
	otawa_sem_VLDMDBS_S_21___LB_S_RB_,
	otawa_sem_VLDMIAS_SS___LB_S_RB_,
	otawa_sem_VLDMDBS_S_21___LB_S_RB__0,
	otawa_sem_VLDMIAS_SS___LB_S_RB__0,
	otawa_sem_VDIVS_F64_DD__DD__DD_0,
	otawa_sem_VDIVS_F32_SD__SD__SD_0,
	otawa_sem_VCVT_FD_FD_S__S,
	otawa_sem_VCVTSS_S_S_S_S,
	otawa_sem_VADDS_F64_DD__DD__DD_0,
	otawa_sem_VADDS_F32_SD__SD__SD_0,
	otawa_sem_VADD_F32_QD__QD__QD,
	otawa_sem_VADD_F32_DD__DD__DD,
	otawa_sem_DMB_S,
	otawa_sem_MRSS_S__CPSR,
	otawa_sem_MRSS_S__SPSR,
	otawa_sem_MSRS_CPSR___S,
	otawa_sem_MSRS_CPSR_FSXC__S,
	otawa_sem_MSRS_CPSR_SXC__S,
	otawa_sem_MSRS_CPSR_FXC__S,
	otawa_sem_MSRS_CPSR_FSX__S,
	otawa_sem_MSRS_CPSR_XC__S,
	otawa_sem_MSRS_CPSR_SC__S,
	otawa_sem_MSRS_CPSR_SX__S,
	otawa_sem_MSRS_CPSR_F__S,
	otawa_sem_MSRS_CPSR_FX__S,
	otawa_sem_MSRS_CPSR_FS__S,
	otawa_sem_MSRS_CPSR_C__S,
	otawa_sem_MSRS_CPSR_X__S,
	otawa_sem_MSRS_CPSR_S__S,
	otawa_sem_MSRS_CPSR_F__S_0,
	otawa_sem_MSRS_SPSR___S,
	otawa_sem_MSRS_SPSR_FSXC__S,
	otawa_sem_MSRS_SPSR_SXC__S,
	otawa_sem_MSRS_SPSR_FXC__S,
	otawa_sem_MSRS_SPSR_FSX__S,
	otawa_sem_MSRS_SPSR_XC__S,
	otawa_sem_MSRS_SPSR_SC__S,
	otawa_sem_MSRS_SPSR_SX__S,
	otawa_sem_MSRS_SPSR_F__S,
	otawa_sem_MSRS_SPSR_FX__S,
	otawa_sem_MSRS_SPSR_FS__S,
	otawa_sem_MSRS_SPSR_C__S,
	otawa_sem_MSRS_SPSR_X__S,
	otawa_sem_MSRS_SPSR_S__S,
	otawa_sem_MSRS_SPSR_F__S_0,
	otawa_sem_MSRS_CPSR____ID,
	otawa_sem_MSRS_CPSR_FSXC___ID,
	otawa_sem_MSRS_CPSR_SXC___ID,
	otawa_sem_MSRS_CPSR_FXC___ID,
	otawa_sem_MSRS_CPSR_FSX___ID,
	otawa_sem_MSRS_CPSR_XC___ID,
	otawa_sem_MSRS_CPSR_SC___ID,
	otawa_sem_MSRS_CPSR_SX___ID,
	otawa_sem_MSRS_CPSR_F___ID,
	otawa_sem_MSRS_CPSR_FX___ID,
	otawa_sem_MSRS_CPSR_FS___ID,
	otawa_sem_MSRS_CPSR_C___ID,
	otawa_sem_MSRS_CPSR_X___ID,
	otawa_sem_MSRS_CPSR_S___ID,
	otawa_sem_MSRS_CPSR_F___ID_0,
	otawa_sem_MSRS_SPSR____ID,
	otawa_sem_MSRS_SPSR_FSXC___ID,
	otawa_sem_MSRS_SPSR_SXC___ID,
	otawa_sem_MSRS_SPSR_FXC___ID,
	otawa_sem_MSRS_SPSR_FSX___ID,
	otawa_sem_MSRS_SPSR_XC___ID,
	otawa_sem_MSRS_SPSR_SC___ID,
	otawa_sem_MSRS_SPSR_SX___ID,
	otawa_sem_MSRS_SPSR_F___ID,
	otawa_sem_MSRS_SPSR_FX___ID,
	otawa_sem_MSRS_SPSR_FS___ID,
	otawa_sem_MSRS_SPSR_C___ID,
	otawa_sem_MSRS_SPSR_X___ID,
	otawa_sem_MSRS_SPSR_S___ID,
	otawa_sem_MSRS_SPSR_F___ID_0,
	otawa_sem_CDPSS_D__D__D__D__D__D,
	otawa_sem_BFIS_S___ID___ID,
	otawa_sem_CLZS_S__S_0,
	otawa_sem_SWPS_S__S___LT_S_RT_,
	otawa_sem_SWPSB_S__S___LT_S_RT_,
	otawa_sem_UMLALSS_S__S__S__S,
	otawa_sem_SMLALSS_S__S__S__S,
	otawa_sem_UMULLSS_S__S__S__S,
	otawa_sem_SMULLSS_S__S__S__S,
	otawa_sem_MULSS_S__S__S,
	otawa_sem_MLASS_S__S__S__S,
	otawa_sem_SWIS_D,
	otawa_sem_LDMSS_SS___LB_S_RB_S,
	otawa_sem_STMSS_SS___LB_S_RB_S,
	otawa_sem_STREXHS_S__S___LT_S_RT__0,
	otawa_sem_STREXDS_S__S___LT_S_RT_,
	otawa_sem_STREXBS_S__S___LT_S_RT__0,
	otawa_sem_STREXS_S__S___LT_S_RT__0,
	otawa_sem_LDREXHS_S___LT_S_RT__0,
	otawa_sem_LDREXDS_S___LT_S_RT_,
	otawa_sem_LDREXBS_S___LT_S_RT__1,
	otawa_sem_LDREXS_S___LT_S_RT__0,
	otawa_sem_STRDS_S___LT_SS__S_IUSS,
	otawa_sem_LDRSSH_S___LT_SS__SSSS,
	otawa_sem_LDRSSH_S___LT_SS__S_IUSS,
	otawa_sem_LDRSSB_S___LT_SS__SSSS,
	otawa_sem_LDRSSB_S___LT_SS__S_IUSS,
	otawa_sem_LDRSH_S___LT_SS__SSSS,
	otawa_sem_LDRSH_S___LT_SS__S_IUSS,
	otawa_sem_STRHS_S___LT_SS__SSSS,
	otawa_sem_STRHS_S___LT_SS__S_IUSS,
	otawa_sem_STRSSS_S___LT_SS__SS__S__IDSS,
	otawa_sem_LDRSSS_S___LT_SS__SS__S__IDSS,
	otawa_sem_STRSSS_S___LT_SS__S_IDSS,
	otawa_sem_LDRSSS_S___LT_SS__S_IDSS,
	otawa_sem_BSS__40,
	otawa_sem_BLXS_S_0,
	otawa_sem_BXS_S_0,
	otawa_sem_MOVS_S___ID,
	otawa_sem_MOVTS_S___ID_0,
	otawa_sem_TSTS_S___ID,
	otawa_sem_TSTS_S__S__S_S,
	otawa_sem_TSTS_S__S,
	otawa_sem_TEQS_S___ID,
	otawa_sem_TEQS_S__S__S_S,
	otawa_sem_TEQS_S__S,
	otawa_sem_SUBSS_S__S___ID,
	otawa_sem_SUBSS_S__S__S__S_S,
	otawa_sem_SUBSS_S__S__S,
	otawa_sem_SBCSS_S__S___ID,
	otawa_sem_SBCSS_S__S__S__S_S,
	otawa_sem_SBCSS_S__S__S,
	otawa_sem_RSCSS_S__S___ID,
	otawa_sem_RSCSS_S__S__S__S_S,
	otawa_sem_RSCSS_S__S__S,
	otawa_sem_RSBSS_S__S___ID,
	otawa_sem_RSBSS_S__S__S__S_S,
	otawa_sem_RSBSS_S__S__S,
	otawa_sem_ORRSS_S__S___ID,
	otawa_sem_ORRSS_S__S__S__S_S,
	otawa_sem_ORRSS_S__S__S,
	otawa_sem_MVNSS_S___ID,
	otawa_sem_MVNSS_S__S__S_S,
	otawa_sem_MVNSS_S__S,
	otawa_sem_MOVSS_S___ID,
	otawa_sem_MOVSS_S__S__S_S,
	otawa_sem_MOVSS_S__S,
	otawa_sem_EORSS_S__S___ID,
	otawa_sem_EORSS_S__S__S__S_S,
	otawa_sem_EORSS_S__S__S,
	otawa_sem_CMPS_S___ID,
	otawa_sem_CMPS_S__S__S_S,
	otawa_sem_CMPS_S__S,
	otawa_sem_CMNS_S___ID,
	otawa_sem_CMNS_S__S__S_S,
	otawa_sem_CMNS_S__S,
	otawa_sem_BICSS_S__S___ID,
	otawa_sem_BICSS_S__S__S__S_S,
	otawa_sem_BICSS_S__S__S,
	otawa_sem_ANDSS_S__S___ID,
	otawa_sem_ANDSS_S__S__S__S_S,
	otawa_sem_ANDSS_S__S__S,
	otawa_sem_ADDSS_S__S__S__S_S,
	otawa_sem_ADDSS_S__S__S,
	otawa_sem_ADCSS_S__S___ID,
	otawa_sem_ADCSS_S__S__S__S_S,
	otawa_sem_ADCSS_S__S__S,
	otawa_sem_ADDSS_S__S___ID
};

/**
 * Get the OTAWA semantics of the instruction.
 * @param inst		Current GLISS instruction.
 * @param block		Block to write semantic instructions in.
 */
static void arm_sem(arm_inst_t *inst, otawa::sem::Block& block) {
	sem_funs[inst->ident](inst, block);
}
