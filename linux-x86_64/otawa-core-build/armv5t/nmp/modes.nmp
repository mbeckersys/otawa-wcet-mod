/*
Registers access
*/
mode REG_INDEX(r: index) = r
	syntax = format( "%s", 
			switch (r) {
				case 0:"r0"
				case 1:"r1" 
				case 2:"r2" 
				case 3:"r3" 
				case 4:"r4" 
				case 5:"r5" 
				case 6:"r6" 
				case 7:"r7"            
				case 8:"r8" 
				case 9:"r9" 
				case 10:"sl"  
				case 11:"fp" 
				case 12:"ip" 
				case 13:"sp" 
				case 14:"lr" 
				case 15:"pc" 
			})
	image  = format("%4b", r)
	number = r



macro first_bit_on(v16) = \
	if v16<0..0> == 1 then 15 else \
	if v16<1..1> == 1 then 14 else \
	if v16<2..2> == 1 then 13 else \
	if v16<3..3> == 1 then 12 else \
	if v16<4..4> == 1 then 11 else \
	if v16<5..5> == 1 then 10 else \
	if v16<6..6> == 1 then 9 else \
	if v16<7..7> == 1 then 8 else \
	if v16<8..8> == 1 then 7 else \
	if v16<9..9> == 1 then 6 else \
	if v16<10..10> == 1 then 5 else \
	if v16<11..11> == 1 then 4 else \
	if v16<12..12> == 1 then 3 else \
	if v16<13..13> == 1 then 2 else \
	if v16<14..14> == 1 then 1 else \
	if v16<15..15> == 1 then 0 else \
	-1 endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif \
    
macro syntax_reg(on_off, num_reg) = \
	if on_off == 1 then \
		switch (num_reg) { \
		case 10: "sl"  \
		case 11: "fp" \
		case 12: "ip" \
		case 13: "sp" \
		case 14: "lr" \
		case 15: "pc" \
		default: format("r%d", num_reg) \
		} \
	else \
		"" \
	endif \

macro syntax_reg_format(idx, v16) = \
	format("%s%s", if v16<idx..idx> && (v16 & ((1 << idx) - 1)) then ", " else "" endif, syntax_reg(v16<idx..idx>, idx)) \

mode REG_LIST(r: u16) = r
	image  = format( "%16b", r)
	start = first_bit_on(r)
	syntax = if start == -1 then "" else
		format("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
			syntax_reg_format(0, r),
			syntax_reg_format(1, r),
			syntax_reg_format(2, r),
			syntax_reg_format(3, r),
			syntax_reg_format(4, r),
			syntax_reg_format(5, r),
			syntax_reg_format(6, r),
			syntax_reg_format(7, r),
			syntax_reg_format(8, r),
			syntax_reg_format(9, r),
			syntax_reg_format(10, r),
			syntax_reg_format(11, r),
			syntax_reg_format(12, r),
			syntax_reg_format(13, r),
			syntax_reg_format(14, r),
			syntax_reg_format(15, r)
		) endif


mode IMM24(n: s24) = n
	syntax = format("%d", n << 2)
	image  = format("%24b", n)


mode OFFSET_12(n: u12) = n
	syntax = format("%d", n)
	image = format("%12b", n)



/**
 * Special addressing for coprocessors
 */
mode CoproAddress = CoproOffset | CoproPreInc | CoproPostInc | CoproBased

mode CoproOffset(r: REG_INDEX, i: card(8), u: bool)
	syntax = format("[R%d, #%s%d]", r.number, if u then "+" else "-" endif, i :: 0b00)
	Rn = r.number
	imm8 = i
	U = u
	P = 1
	W = 0

mode CoproPreInc(r: REG_INDEX, i: card(8), u: bool)
	syntax = format("[R%d, #%s%d]!", r.number, if u then "+" else "-" endif, i :: 0b00)
	Rn = r.number
	imm8 = i
	U = u
	P = 1
	W = 1

mode CoproPostInc(r: REG_INDEX, i: card(8), u: bool)
	syntax = format("[R%d], #%s%d", r.number, if u then "+" else "-" endif, i :: 0b00)
	Rn = r.number
	imm8 = i
	U = u
	P = 0
	W = 1

mode CoproBased(r: REG_INDEX, i: card(8))
	syntax = format("[R%d], %d", r.number, i)
	Rn = r.number
	imm8 = i
	U = 0b1
	P = 0
	W = 0



